Given a square chessboard of N x N size, the position of Knight and position of a target is given. We need to find out minimum 
steps a Knight will take to reach the target position.

struct cell 
{ 
    int x, y; 
    int dis; 
    cell() {} 
    cell(int x, int y, int dis) : x(x), y(y), dis(dis) {} 
}; 
  
// Utility method returns true if (x, y) lies 
// inside Board 
bool isInside(int x, int y, int N) 
{ 
    if (x >= 1 && x <= N && y >= 1 && y <= N) 
        return true; 
    return false; 
} 
  
// Method returns minimum step to reach target position 
int minStepToReachTarget(int knightPos[], int targetPos[], 
                                                int N) 
{ 
    // x and y direction, where a knight can move 
    int dx[] = {-2, -1, 1, 2, -2, -1, 1, 2}; 
    int dy[] = {-1, -2, -2, -1, 1, 2, 2, 1}; 
  
    // queue for storing states of knight in board 
    queue<cell> q; 
  
    // push starting position of knight with 0 distance 
    q.push(cell(knightPos[0], knightPos[1], 0)); 
  
    cell t; 
    int x, y; 
    bool visit[N + 1][N + 1]; 
  
    // make all cell unvisited 
    for (int i = 1; i <= N; i++) 
        for (int j = 1; j <= N; j++) 
            visit[i][j] = false; 
  
    // visit starting state 
    visit[knightPos[0]][knightPos[1]] = true; 
  
    // loop untill we have one element in queue 
    while (!q.empty()) 
    { 
        t = q.front(); 
        q.pop(); 
  
        // if current cell is equal to target cell, 
        // return its distance 
        if (t.x == targetPos[0] && t.y == targetPos[1]) 
            return t.dis; 
  
        // loop for all reachable states 
        for (int i = 0; i < 8; i++) 
        { 
            x = t.x + dx[i]; 
            y = t.y + dy[i]; 
  
            // If reachable state is not yet visited and 
            // inside board, push that state into queue 
            if (isInside(x, y, N) && !visit[x][y]) { 
                visit[x][y] = true; 
                q.push(cell(x, y, t.dis + 1)); 
            } 
        } 
    } 
} 
  
// Driver code to test above methods 
int main() 
{ 
    int N = 30; 
    int knightPos[] = {1, 1}; 
    int targetPos[] = {30, 30}; 
    cout << minStepToReachTarget(knightPos, targetPos, N); 
    return 0; 
}
 time complexity as O(N^2)
 
  OR
  
  int getsteps(int x, int y,  
             int tx, int ty) 
{ 
    // if knight is on the target  
    // position return 0. 
    if (x == tx && y == ty) 
        return dp[0][0]; 
    else { 
          
        // if already calculated then return 
        // that value. Taking absolute difference. 
        if (dp[abs(x - tx)][abs(y - ty)] != 0) 
            return dp[abs(x - tx)][abs(y - ty)]; 
              
        else { 
  
            // there will be two distinct positions 
            // from the knight towards a target. 
            // if the target is in same row or column 
            // as of knight than there can be four 
            // positions towards the target but in that 
            // two would be the same and the other two 
            // would be the same. 
            int x1, y1, x2, y2; 
              
            // (x1, y1) and (x2, y2) are two positions. 
            // these can be different according to situation. 
            // From position of knight, the chess board can be 
            // divided into four blocks i.e.. N-E, E-S, S-W, W-N . 
            if (x <= tx) { 
                if (y <= ty) { 
                    x1 = x + 2; 
                    y1 = y + 1; 
                    x2 = x + 1; 
                    y2 = y + 2; 
                } else { 
                    x1 = x + 2; 
                    y1 = y - 1; 
                    x2 = x + 1; 
                    y2 = y - 2; 
                } 
            } else { 
                if (y <= ty) { 
                    x1 = x - 2; 
                    y1 = y + 1; 
                    x2 = x - 1; 
                    y2 = y + 2; 
                } else { 
                    x1 = x - 2; 
                    y1 = y - 1; 
                    x2 = x - 1; 
                    y2 = y - 2; 
                } 
            } 
              
            // ans will be, 1 + minimum of steps  
            // required from (x1, y1) and (x2, y2). 
            dp[abs(x - tx)][abs(y - ty)] =  
                           min(getsteps(x1, y1, tx, ty),  
                           getsteps(x2, y2, tx, ty)) + 1; 
                             
            // exchanging the coordinates x with y of both 
            // knight and target will result in same ans. 
            dp[abs(y - ty)][abs(x - tx)] =  
                           dp[abs(x - tx)][abs(y - ty)]; 
            return dp[abs(x - tx)][abs(y - ty)]; 
        } 
    } 
} 
  
// Driver Code 
int main() 
{ 
    int i, n, x, y, tx, ty, ans; 
      
    // size of chess board n*n 
    n = 100; 
      
    // (x, y) coordinate of the knight. 
    // (tx, ty) coordinate of the target position. 
    x = 4; 
    y = 5; 
    tx = 1; 
    ty = 1; 
  
    // (Exception) these are the four corner points  
    // for which the minimum steps is 4. 
    if ((x == 1 && y == 1 && tx == 2 && ty == 2) ||  
        (x == 2 && y == 2 && tx == 1 && ty == 1)) 
            ans = 4; 
    else if ((x == 1 && y == n && tx == 2 && ty == n - 1) || 
             (x == 2 && y == n - 1 && tx == 1 && ty == n)) 
                ans = 4; 
    else if ((x == n && y == 1 && tx == n - 1 && ty == 2) ||  
             (x == n - 1 && y == 2 && tx == n && ty == 1)) 
                ans = 4; 
    else if ((x == n && y == n && tx == n - 1 && ty == n - 1) ||  
             (x == n - 1 && y == n - 1 && tx == n && ty == n)) 
                ans = 4; 
    else { 
        // dp[a][b], here a, b is the difference of 
        // x & tx and y & ty respectively. 
        dp[1][0] = 3; 
        dp[0][1] = 3; 
        dp[1][1] = 2; 
        dp[2][0] = 2; 
        dp[0][2] = 2; 
        dp[2][1] = 1; 
        dp[1][2] = 1; 
  
        ans = getsteps(x, y, tx, ty); 
    } 
  
    cout << ans << endl; 
  
    return 0; 
} 

