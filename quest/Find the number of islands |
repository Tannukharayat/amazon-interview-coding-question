**Find the number of islands | Set 1 (Using DFS)**
Given a boolean 2D matrix, find the number of islands. A group of connected 1s forms an island. For example, the below matrix contains 5 islands

Example:

Input : mat[][] = {{1, 1, 0, 0, 0},
                   {0, 1, 0, 0, 1},
                   {1, 0, 0, 1, 1},
                   {0, 0, 0, 0, 0},
                   {1, 0, 1, 0, 1} 
Output : 5

using dfs

  
// A function to check if a given 
// cell (row, col) can be included in DFS 
int isSafe(int M[][COL], int row, int col, 
           bool visited[][COL]) 
{ 
    // row number is in range, column 
    // number is in range and value is 1 
    // and not yet visited 
    return (row >= 0) && (row < ROW) && (col >= 0) && (col < COL) && (M[row][col] && !visited[row][col]); 
} 
  
// A utility function to do DFS for a 
// 2D boolean matrix. It only considers 
// the 8 neighbours as adjacent vertices 
void DFS(int M[][COL], int row, int col, 
         bool visited[][COL]) 
{ 
    // These arrays are used to get 
    // row and column numbers of 8 
    // neighbours of a given cell 
    static int rowNbr[] = { -1, -1, -1, 0, 0, 1, 1, 1 }; 
    static int colNbr[] = { -1, 0, 1, -1, 1, -1, 0, 1 }; 
  
    // Mark this cell as visited 
    visited[row][col] = true; 
  
    // Recur for all connected neighbours 
    for (int k = 0; k < 8; ++k) 
        if (isSafe(M, row + rowNbr[k], col + colNbr[k], visited)) 
            DFS(M, row + rowNbr[k], col + colNbr[k], visited); 
} 
  
// The main function that returns 
// count of islands in a given boolean 
// 2D matrix 
int countIslands(int M[][COL]) 
{ 
    // Make a bool array to mark visited cells. 
    // Initially all cells are unvisited 
    bool visited[ROW][COL]; 
    memset(visited, 0, sizeof(visited)); 
  
    // Initialize count as 0 and 
    // travese through the all cells of 
    // given matrix 
    int count = 0; 
    for (int i = 0; i < ROW; ++i) 
        for (int j = 0; j < COL; ++j) 
  
            // If a cell with value 1 is not 
            if (M[i][j] && !visited[i][j]) { 
                // visited yet, then new island found 
                // Visit all cells in this island. 
                DFS(M, i, j, visited); 
  
                // and increment island count 
                ++count; 
            } 
  
    return count; 
} 
 using bfs
 bool isSafe(int mat[R][C], int i, int j, 
            bool vis[R][C]) 
{ 
    return (i >= 0) && (i < R) &&  
           (j >= 0) && (j < C) &&  
           (mat[i][j] && !vis[i][j]); 
} 
  
void BFS(int mat[R][C], bool vis[R][C], 
         int si, int sj) 
{ 
  
    // These arrays are used to get row and 
    // column numbers of 8 neighbours of 
    // a given cell 
    int row[] = { -1, -1, -1, 0, 0, 1, 1, 1 }; 
    int col[] = { -1, 0, 1, -1, 1, -1, 0, 1 }; 
  
    // Simple BFS first step, we enqueue 
    // source and mark it as visited 
    queue<pair<int, int> > q; 
    q.push(make_pair(si, sj)); 
    vis[si][sj] = true; 
  
    // Next step of BFS. We take out 
    // items one by one from queue and 
    // enqueue their univisited adjacent 
    while (!q.empty()) { 
  
        int i = q.front().first; 
        int j = q.front().second; 
        q.pop(); 
  
        // Go through all 8 adjacent 
        for (int k = 0; k < 8; k++) { 
            if (isSafe(mat, i + row[k], 
                       j + col[k], vis)) { 
             vis[i + row[k]][j + col[k]] = true; 
             q.push(make_pair(i + row[k], j + col[k])); 
            } 
        } 
    } 
} 
  
// This function returns number islands (connected 
// components) in a graph. It simply works as  
// BFS for disconnected graph and returns count 
// of BFS calls. 
int countIslands(int mat[R][C]) 
{ 
    // Mark all cells as not visited 
    bool vis[R][C]; 
    memset(vis, 0, sizeof(vis)); 
  
    // Call BFS for every unvisited vertex 
    // Whenever we see an univisted vertex, 
    // we increment res (number of islands) 
    // also. 
    int res = 0; 
    for (int i = 0; i < R; i++) { 
        for (int j = 0; j < C; j++) { 
            if (mat[i][j] && !vis[i][j]) { 
                BFS(mat, vis, i, j); 
                res++; 
            } 
        } 
    } 
  
    return res; 
}
