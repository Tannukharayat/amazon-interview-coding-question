Write a function to generate all possible n pairs of balanced parentheses.

Examples:

Input: n=1
Output: {}
Explantaion: This the only sequence of balanced 
parenthesis formed using 1 pair of balanced parenthesis. 

Input : n=2
Output: 
{}{}
{{}}
Explantaion: This the only two sequences of balanced 
parenthesis formed using 2 pair of balanced parenthesis. 


    // C program to Print all combinations 
// of balanced parentheses 
# include<stdio.h> 
# define MAX_SIZE 100 

void _printParenthesis(int pos, int n, int open, int close); 

// Wrapper over _printParenthesis() 
void printParenthesis(int n) 
{ 
	if(n > 0) 
		_printParenthesis(0, n, 0, 0); 
	return; 
}	 

void _printParenthesis(int pos, int n, int open, int close) 
{ 
	static char str[MAX_SIZE];	 
	
	if(close == n) 
	{ 
		printf("%s \n", str); 
		return; 
	} 
	else
	{ 
		if(open > close) 
		{ 
			str[pos] = '}'; 
			_printParenthesis(pos+1, n, open, close+1); 
		} 
		
		if(open < n) 
		{ 
		str[pos] = '{'; 
		_printParenthesis(pos+1, n, open+1, close); 
		} 
	} 
} 

// Driver program to test above functions 
int main() 
{ 
	int n = 3; 
	printParenthesis(n); 
	getchar(); 
	return 0; 
} 
Complexity Analysis:

    Time Complexity: O(2^n).
    For every index there can be two options ‘{‘ or ‘}’. So it can be said that the upperbound of time complexity is O(2^n) or it has exponential time complexity.
    Space Complexity: O(n).
    The space complexity can be reduced to O(n) if global variable or static variable is used to store the output string.

