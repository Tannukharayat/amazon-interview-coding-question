  class gfg 
  { 

  /* Function to calculate x raised to the power y */
  public: 
  int power(int x, unsigned int y) 
  { 
      if (y == 0) 
          return 1; 
      else if (y % 2 == 0) 
          return power(x, y / 2) * power(x, y / 2); 
      else
          return x * power(x, y / 2) * power(x, y / 2); 
  } 
  }; 

  Time Complexity: O(n)
  Space Complexity: O(1)

  or

  int power(int x, unsigned int y) 
  { 
      int temp; 
      if( y == 0) 
          return 1; 
      temp = power(x, y/2); 
      if (y%2 == 0) 
          return temp*temp; 
      else
          return x*temp*temp; 
  } 
  Time Complexity of optimized solution: O(logn)

  or
  /* Extended version of power function  
  that can work for float x and negative y*/
  #include <bits/stdc++.h> 
  using namespace std; 

  float power(float x, int y)  
  {  
      float temp;  
      if(y == 0)  
          return 1;  
      temp = power(x, y / 2);  
      if (y % 2 == 0)  
          return temp * temp;  
      else
      {  
          if(y > 0)  
              return x * temp * temp;  
          else
              return (temp * temp) / x;  
      }  
  }  
  or
