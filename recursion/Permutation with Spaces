Given a string you need to print all possible strings that can be made by placing spaces (zero or one) in between them. Output 
should be printed in sorted increasing order of strings.

Input:  str[] = "ABC"
Output: (A B C)(A BC)(AB C)(ABC)

void printPatternUtil(char str[], char buff[], int i, int j, int n) 
{ 
    if (i==n) 
    { 
        buff[j] = '\0'; 
        cout << buff << endl; 
        return; 
    } 
  
    // Either put the character 
    buff[j] = str[i]; 
    printPatternUtil(str, buff, i+1, j+1, n); 
  
    // Or put a space followed by next character 
    buff[j] = ' '; 
    buff[j+1] = str[i]; 
  
    printPatternUtil(str, buff, i+1, j+2, n); 
} 

 Thus overall complexity would be O(n*(2^n)).
