There are n-pairs and therefore 2n people. everyone has one unique number ranging from 1 to 2n. All these 2n persons are 
arranged in random fashion in an Array of size 2n. We are also given who is partner of whom. Find the minimum number of swaps 
required to arrange these pairs such that all pairs become adjacent to each other.

Input:
n = 3  
pairs[] = {1->3, 2->6, 4->5}  // 1 is partner of 3 and so on
arr[] = {3, 5, 6, 4, 1, 2}

Output: 2
We can get {3, 1, 5, 4, 6, 2} by swapping 5 & 6, and 6 & 1

  // This function updates indexes of elements 'a' and 'b' 
void updateindex(int index[], int a, int ai, int b, int bi) 
{ 
    index[a] = ai; 
    index[b] = bi; 
} 
  
// This function returns minimum number of swaps required to arrange 
// all elements of arr[i..n] become aranged 
int minSwapsUtil(int arr[], int pairs[], int index[], int i, int n) 
{ 
    // If all pairs procesed so no swapping needed return 0 
    if (i > n) return 0; 
  
    // If current pair is valid so DO NOT DISTURB this pair 
    // and move ahead. 
    if (pairs[arr[i]] == arr[i+1]) 
         return minSwapsUtil(arr, pairs, index, i+2, n); 
  
    // If we reach here, then arr[i] and arr[i+1] don't form a pair 
  
    // Swap pair of arr[i] with arr[i+1] and recursively compute 
    // minimum swap required if this move is made. 
    int one = arr[i+1]; 
    int indextwo = i+1; 
    int indexone = index[pairs[arr[i]]]; 
    int two = arr[index[pairs[arr[i]]]]; 
    swap(arr[i+1], arr[indexone]); 
    updateindex(index, one, indexone, two, indextwo); 
    int a = minSwapsUtil(arr, pairs, index, i+2, n); 
  
    // Backtrack to previous configuration. Also restore the 
    // previous indices, of one and two 
    swap(arr[i+1], arr[indexone]); 
    updateindex(index, one, indextwo, two, indexone); 
    one = arr[i], indexone = index[pairs[arr[i+1]]]; 
  
    // Now swap arr[i] with pair of arr[i+1] and recursively 
    // compute minimum swaps required for the subproblem 
    // after this move 
    two = arr[index[pairs[arr[i+1]]]], indextwo = i; 
    swap(arr[i], arr[indexone]); 
    updateindex(index, one, indexone, two, indextwo); 
    int b = minSwapsUtil(arr, pairs, index, i+2, n); 
  
    // Backtrack to previous configuration.  Also restore 
    // the previous indices, of one and two 
    swap(arr[i], arr[indexone]); 
    updateindex(index, one, indextwo, two, indexone); 
  
    // Return minimum of two cases 
    return 1 + min(a, b); 
} 
  
// Returns minimum swaps required 
int minSwaps(int n, int pairs[], int arr[]) 
{ 
    int index[2*n + 1]; // To store indices of array elements 
  
    // Store index of each element in array index 
    for (int i = 1; i <= 2*n; i++) 
        index[arr[i]] = i; 
  
    // Call the recursive function 
    return minSwapsUtil(arr, pairs, index, 1, 2*n); 
} 
