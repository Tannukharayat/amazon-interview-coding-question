Before the advent of QWERTY keyboards, texts and numbers were placed on the same key. For example, 2 has “ABC” if we wanted to write 
anything starting with ‘A’ we need to type key 2 once. If we wanted to type ‘B’, press key 2 twice and thrice for typing ‘C’. Below is a 
picture of such keypad
.

    Example:

Input number: 234
Output:
adg adh adi aeg aeh aei afg afh 
afi bdg bdh bdi beg beh bei bfg 
bfh bfi cdg cdh cdi ceg ceh cei 
cfg cfh cfi
Explanation: All possible words which can be 
formed are (Alphabetical order):
adg adh adi aeg aeh aei afg afh 
afi bdg bdh bdi beg beh bei bfg 
bfh bfi cdg cdh cdi ceg ceh cei 
cfg cfh cfi
If 2 is pressed then the alphabet
can be a, b, c, 
Similarly, for 3, it can be 
d, e, f, and for 4 can be g, h, i. 


const char hashTable[10][5] = {"", "", "abc", "def", "ghi", "jkl", 
                               "mno", "pqrs", "tuv", "wxyz"}; 
  
// A recursive function to print all possible words that can be obtained 
// by input number[] of size n.  The output words are one by one stored 
// in output[] 
void  printWordsUtil(int number[], int curr_digit, char output[], int n) 
{ 
    // Base case, if current output word is prepared 
    int i; 
    if (curr_digit == n) 
    { 
        printf("%s ", output); 
        return ; 
    } 
  
    // Try all 3 possible characters for current digir in number[] 
    // and recur for remaining digits 
    for (i=0; i<strlen(hashTable[number[curr_digit]]); i++) 
    { 
        output[curr_digit] = hashTable[number[curr_digit]][i]; 
        printWordsUtil(number, curr_digit+1, output, n); 
        if (number[curr_digit] == 0 || number[curr_digit] == 1) 
            return; 
    } 
} 
  
// A wrapper over printWordsUtil().  It creates an output array and 
// calls printWordsUtil() 
void printWords(int number[], int n) 
{ 
    char result[n+1]; 
    result[n] ='\0'; 
    printWordsUtil(number, 0, result, n); 
} 
  
//Driver program 
int main(void) 
{ 
    int number[] = {2, 3, 4}; 
    int n = sizeof(number)/sizeof(number[0]); 
    printWords(number, n); 
    return 0; 
} 
Complexity Analysis:

Time Complexity: O(4n), where n is number of digits in input number.
Each digit of a number has 3 or 4 alphabets, so it can be said that each digit has 4 alphabets as options. If there are n digits then 
there are 4 options for first digit and for each alphabet of first digit there are 4 options in second digit, i.e for every recursion 4
more recursion is called (if it does not match the base case). So the time complexity is O(4n).
Space Compelxity:O(1).
As no extra space is needed.
