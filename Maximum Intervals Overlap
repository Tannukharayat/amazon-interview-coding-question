**Consider a big party where a log register for guestâ€™s entry and exit times is maintained. Find the time at which there are maximum 
guests in the party. Note that entries in register are not in any order **

    bool compare(const pair<int,int> a, const pair<int,int> b)
    {
        if(a.first  < b.first)
        {
            return 1;
        }
        else if ( a.first > b.first ) 
        {
            return 0 ; 
        }
        else 
        {
            if ( a.second <= b.second )
                return 0 ; 
            else 
                return 1 ; 
        }
        //return 0;
    }
    int main() 
    {
      int t ;
      cin >> t ;
      while(t--)
      {
          int n ;
          cin >> n ;
          int s[n], e[n];
          vector<pair<int,int> > v;
          for(int i = 0 ; i < n ; i++)
          cin >> s[i];
          for(int i = 0 ; i < n ; i++)
          cin >> e[i];
          for(int i = 0 ; i < n ; i++)
          {
              v.push_back({s[i],1});
              v.push_back({e[i],-1});
          }
          sort(v.begin(),v.end(),compare);
          int i = 0 ;
          int sum = 0, mx = 0, t = 0;
          while( i<v.size())
          {
              if(v[i].second==1)
              sum ++ ;
              if(mx<sum)
              {
                  mx=sum;
                  t = v[i].first;
              }
              if(v[i].second==-1)
                  sum --;
              i++;
          }
          cout<<mx<<" "<<t<<endl;
      }
      return 0;
    }
