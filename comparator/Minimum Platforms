**Given arrival and departure times of all trains that reach a railway station. Your task is to find the minimum number of platforms 
required for the railway station so that no train waits.

Note: Consider that all the trains arrive on the same day and leave on the same day. Also, arrival and departure times will not be same 
for a train, but we can have arrival time of one train equal to departure of the other. In such cases, we need different platforms, i.e at 
any given instance of time, same platform can not be used for both departure of a train and arrival of another.**


        bool comp(pair<int,int> p1, pair<int,int>p2) //comp is used for equal condition
        {
            if(p1.first<p2.first)
            return 1;
            else if(p1.first>p2.first)
            return 0;
            else if(p1.first==p2.first)
            {
                if(p1.second>p2.second)
                return 1;
                else
                return 0;
            }
        }
        int main() {
            int t;
            cin >> t ;
            while(t--)
            {
                int n;
                cin >>n ;
                int a[n], d[n];
                vector<pair<int,int> >v;
                for(int i = 0 ; i < n ; i++)
                {
                    cin >> a[i];
                    v.push_back({a[i],1});
                }
                for(int i = 0 ; i < n ; i++)
                {
                    cin >> d[i];
                    v.push_back({d[i],-1});
                }
                sort(v.begin(), v.end(),comp);
                int ans=0, cnt=0;
                for(int i = 0 ; i < v.size() ; i++)
                {
                    if(v[i].second== 1)
                    cnt++;
                    else cnt--;
                    ans=max(ans,cnt);
                }
                cout<<ans<<endl;
            }
          //code
          return 0;
        }

