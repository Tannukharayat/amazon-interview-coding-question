** Given an array of integers, every element appears twice except for one. Find that single one in linear time complexity and without using 
extra memory **

    for(int i=0;i<t;i++)
      {
          cin>>n;
          if(n==0)
          {
              cout<<n<<endl;
              continue;
          }
          int x=0, num=0;
          int arr[100000];
          cin >> x;
          num=x;
          for(int j=1;j<n;j++)
          {
             cin>>x;
            num=num^x;
          }
          cout<<num<<endl;

      }
      
 Method 2:
 
         while(t--)
            {
                int n ,x ;
                cin >> n ;
                int a[n+1];
                for(int i = 0 ; i < n ; i++ )
                {
                    cin >> a[i+1];
                }
                int low = 1 , high = n, ans = 0;
                if(a[low]!=a[low+1])
                ans = 1 ;
                else if(a[high]!=a[high-1])
                ans = high;
                else
                while(low<=high)
                {
                    int mid = (low+high)/2;
                    if(a[mid]!=a[mid-1]&&a[mid]!=a[mid+1])
                    {
                        ans = mid;
                        break;
                    }
                    if(mid%2==0)
                    {
                        if(a[mid-1]==a[mid])
                        {
                            low=mid+1;
                        }else high= mid-1;
                    }else
                    {
                        if(a[mid+1]==a[mid])
                        {
                            low=mid+1;
                        }else high=mid-1;
                    }
                }
                cout<<a[ans] << endl;
            }
