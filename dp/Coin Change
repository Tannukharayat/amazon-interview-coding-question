**Given a value N, find the number of ways to make change for N cents, if we have infinite supply of each of S = { S1, S2, .. , Sm} valued 
coins. The order of coins doesnâ€™t matter. For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. 
\So output should be 4. For N = 10 and S = {2, 5, 3, 6}, there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. So 
the output should be 5.**

          int count( int S[], int m, int n ) 
          { 
              // If n is 0 then there is 1 solution  
              // (do not include any coin) 
              if (n == 0) 
                  return 1; 

              // If n is less than 0 then no  
              // solution exists 
              if (n < 0) 
                  return 0; 

              // If there are no coins and n  
              // is greater than 0, then no 
              // solution exist 
              if (m <=0 && n >= 1) 
                  return 0; 

              // count is sum of solutions (i)  
              // including S[m-1] (ii) excluding S[m-1] 
              return count( S, m - 1, n ) + count( S, m, n-S[m-1] ); 
          }    
          
          OR
          
          int count( int S[], int m, int n ) 
          { 
              int i, j, x, y; 

              // We need n+1 rows as the table  
              // is constructed in bottom up 
              // manner using the base case 0 
              // value case (n = 0) 
              int table[n + 1][m]; 

              // Fill the enteries for 0 
              // value case (n = 0) 
              for (i = 0; i < m; i++) 
                  table[0][i] = 1; 

              // Fill rest of the table entries  
              // in bottom up manner  
              for (i = 1; i < n + 1; i++) 
              { 
                  for (j = 0; j < m; j++) 
                  { 
                      // Count of solutions including S[j] 
                      x = (i-S[j] >= 0) ? table[i - S[j]][j] : 0; 

                      // Count of solutions excluding S[j] 
                      y = (j >= 1) ? table[i][j - 1] : 0; 

                      // total count 
                      table[i][j] = x + y; 
                  } 
              } 
              return table[n][m - 1]; 
          } 
 
          OR
          
          int count( int S[], int m, int n ) 
          { 
              // table[i] will be storing the number of solutions for 
              // value i. We need n+1 rows as the table is constructed 
              // in bottom up manner using the base case (n = 0) 
              int table[n+1]; 

              // Initialize all table values as 0 
              memset(table, 0, sizeof(table)); 

              // Base case (If given value is 0) 
              table[0] = 1; 

              // Pick all coins one by one and update the table[] values 
              // after the index greater than or equal to the value of the 
              // picked coin 
              for(int i=0; i<m; i++) 
                  for(int j=S[i]; j<=n; j++) 
                      table[j] += table[j-S[i]]; 

              return table[n]; 
          } 
          
          OR
          
          int count( int S[], int m, int n )  
          {  
               //we need a two dimensional matrix to store the result 
              int table[m+1][n+1];  

              // Initialize all table values as 0  
              memset(table, 0, sizeof(table));  

              // Base case (If given value is 0)  
              for(int i=0;i<m;i++) 
             {table[0][i] = 1;  
             } 

              for(int i=1;i<=m;i++) 
                { 

                    for(int j=1;j<=n;j++) 
                    { 
                        if(S[i-1]>j) 
                        { 
                            table[i][j]=table[i-1][j]; 

                        } 

                        else
                        { 
                            table[i][j]=table[i-1][j]+table[i][j-(i-1)]; 
                        } 

                    } 
                } 
              return table[m][n];  
          } 

          OR
          
          {
            int t;
            cin >> t ;
            while(t--)
            {
                int n ;
                cin >> n ;
                int a[n], h[1000];
                for(int i = 0 ; i < n ; i++)
                {
                    cin >> a[i];
                }
             //   sort(a,a+n);
                int dp[1001][1001]={0};
                int x ;
                cin >> x;
                for(int i = 0 ; i <= n ; i++)
                {
                   for(int j = 0 ; j <= x ; j++)
                   {
                       if(j==0)
                       {
                           dp[i][j]=1;
                       }else if(i==0)
                       {
                           dp[i][j]=0 ;
                       }else if(j >= a[i-1])
                       {
                           dp[i][j]=(dp[i][j-a[i-1]]+dp[i-1][j]);
                       }else dp[i][j]=dp[i-1][j];
                   }
                }
                cout<<dp[n][x]<<endl;
            }
            return 0;
          }
