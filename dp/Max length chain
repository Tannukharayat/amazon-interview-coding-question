**You are given N pairs of numbers. In every pair, the first number is always smaller than the second number. A pair (c, d) can follow
another pair (a, b) if b < c. Chain of pairs can be formed in this fashion. Your task is to complete the function maxChainLen which returns
an integer denoting the longest chain which can be formed from a given set of pair **

        bool comp(pair<int,int> v1, pair<int,int> v2)
        {
            if(v1.first>v2.first)
            return 0;
            if(v1.first<v2.first)
            return 1;
            if(v1.first==v2.second)
            {
                if(v1.second>v2.second)
                {
                    return 0;
                }else return 1;
            }
        }
        int maxChainLen(struct val p[],int n)
        {
            vector<pair<int,int> >v;
            for(int i = 0 ; i < n ; i++)
            {
                v.push_back({p[i].first,p[i].second});
            }
            sort(v.begin(), v.end() , comp);
            int dp[n]={0};
            int ans = 1 ;
            dp[0]=1;
            for(int i = 1 ; i < n ; i++)
            {
                dp[i]=1;
                for(int j = i-1 ; j >= 0 ; j--)
                {
                    if(v[j].second<v[i].first&&dp[i]<dp[j]+1)
                    {
                        dp[i]=dp[j]+1;
                    }
                }ans = max(ans, dp[i]);
            }
            return ans;
        }
