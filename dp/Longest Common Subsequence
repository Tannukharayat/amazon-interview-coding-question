**Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase***

        #include <iostream>
        using namespace std;

        int main() 
        {
          int t ;
          cin >> t ;
          while(t--)
          {
              int n , m ;
              cin >> n >> m ;
              string s , t ;
              cin >> s >> t ;
              int dp[s.length()+1][t.length()+1]={0};
              for(int i = 0 ; i <= s.length() ; i++)
              {
                  for(int j = 0 ; j <= t.length() ; j++)
                  {
                      if(i==0||j==0)
                      dp[i][j]=0;
                      else
                      {
                          if(s[i-1]==t[j-1])
                          {
                              dp[i][j]=1+dp[i-1][j-1];
                          }
                          dp[i][j]=max(dp[i][j], max(dp[i-1][j],dp[i][j-1]));
                      }
                  }
              }
              cout<<dp[n][m]<<endl;
          }
          return 0;
        }
