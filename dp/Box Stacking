**You are given a set of N types of rectangular 3-D boxes, where the ith box has height h, width w and length l. You task is to create a 
stack of boxes which is as tall as possible, but you can only stack a box on top of another box if the dimensions of the 2-D base of the 
lower box are each strictly larger than those of the 2-D base of the higher box. Of course, you can rotate a box so that any side functions
as its base.It is also allowable to use multiple instances of the same type of box. You task is to complete the function maxHeight which 
returns the height of the highest possible stack so formed **

      bool compare(pair<pair<int,int>, int> p1, pair<pair<int,int>, int> p2)
      {
          if(p1.first.first<p2.first.first)
          {
              return 1;
          }else
          if(p2.first.first<p1.first.first)
          {
              return 0;
          }else
          if(p1.first.first==p2.first.first)
          {
              if(p1.first.second<p2.first.second)
              return 1;
              else if(p1.first.second>p2.first.second)
              return 0;
              else return 0;
          }
      }
      int maxHeight(int height[],int width[],int length[],int n)
      {
          map<pair<int,int>,int> mp;
          vector<pair<pair<int,int>,int> > v;
          for(int i = 0 ; i < n ; i++)
          {
              pair<pair<int,int>, int> p;
              p.first.first=min(height[i],width[i]);
              p.first.second=max(height[i],width[i]);
              p.second=length[i];
              pair<int,int> p1;
              p1=p.first;
              mp[p1]=length[i];
              v.push_back(p);
              p.first.first=min(length[i],width[i]);
              p.first.second=max(length[i],width[i]);
              p.second=height[i];
              p1=p.first;
              mp[p1]=height[i];
              v.push_back(p);
              p.first.first=min(length[i],height[i]);
              p.first.second=max(length[i],height[i]);
              p.second=width[i];
              p1=p.first;
              mp[p1]=width[i];
              v.push_back(p);
          }
              int dp[v.size()+1];
              int ans = 0;

              sort(v.begin(), v.end() , compare);
               for(int i = 0 ; i < v.size() ; i++)
              dp[i]=v[i].second;
              for(int i = 1 ; i < v.size() ; i++)
              {
                  for(int j = 0 ; j < i ; j++)
                  {
                      if(v[j].first.first<v[i].first.first&&v[j].first.second<v[i].first.second&&dp[i]<v[i].second+dp[j])
                      {
                          dp[i]=v[i].second+dp[j];
                      }
                  }
                  ans = max(ans, dp[i]);
              }
              return ans ;
      }
