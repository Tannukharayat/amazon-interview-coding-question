**Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). 
Palindrome string: A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S. Incase of conflict, return 
the substring which occurs first ( with the least starting index ).

NOTE: Required Time Complexity O(n2).**

    int main() 
    {
        ll t ; 
      cin>>t;
      for(int i=0;i<t;i++)
      {
          string s ;
          cin>>s;
          ll n=s.length();
          int dp[1001][1001]={0};
          for(int i = 0 ; i < n ; i++)
          dp[i][i]=1;
          int l=0;
          string st="";
          for(int diff = 2 ; diff <= n ; diff++ )
          {
              for(int i = 0 ; i < n-diff+1 ; i++)
              {
                  int j=i+diff-1;
                  if(diff==2)
                  {
                      if(s[i]==s[j])
                      {
                          dp[i][j]=1;
                      }else dp[i][j]=0;
                  }else
                  {
                      if(s[i]==s[j]&&dp[i+1][j-1]==1)
                      dp[i][j]=1;
                      else dp[i][j]=0;
                  }
                  if(j-i+1>l&&dp[i][j]==1)
                  {
                      l=j-i+1;
                      st=s.substr(i,l);
                  }
              }
          }
          if(l==0)
          st=s.substr(0,1);
          cout<<st<<endl;
      }
      return 0;
    }
