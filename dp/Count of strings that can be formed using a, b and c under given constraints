** Given a length n, count the number of strings of length n that can be made using ‘a’, ‘b’ and ‘c’ with at-most one ‘b’ and two ‘c’s
allowed. **

  int main()
  {
      int t;
      cin >> t;
      for( int i = 0 ; i < t ; i++)
      {
          int n;
          cin >> n;
          if(n==1)
          cout<<3<<endl;
          else if(n==2)
          cout<<"6"<<endl;
          else 
          {
              cout<<1+n+n+(n*(n-1))/2+n*(n-1)+(n*(n-1)*(n-2))/2<<endl;
          }
      }
  }

2- using recursion and dp array

  int funct(int n, int b, int c, int dp[1001][2][3])
  {
       if(b<0||c<0)
              return 0;

      if((b==0&&c==0)||n==0)
              return 1;

       if(dp[n][b][c]!=-1)
            return dp[n][b][c];

        int x=funct(n-1, b, c, dp);
        x+=funct(n-1,b-1,c, dp);
        x+=funct(n-1, b, c-1, dp);
        dp[n][b][c]=x ;
        return dp [ n ] [ b ] [ c ] ; 
   }
  int main()
  {
      ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0) ; 
      int t;
      cin >> t;
      for( int i = 0 ; i < t ; i++)
      {
          int n;
          cin >> n;
          if(n==1)
          cout<<3<<endl;
          else if(n==2)
          cout<<"6"<<endl;
          else 
          {
              int dp[1001 ][2][3];
              for(int j=0;j<1001 ;j++)
              {
                  for(int k=0;k<2;k++)
                  {
                      for(int l=0;l<3;l++)
                      {
                          dp[j][k][l]=-1;
                      }
                  }
              }
             // memset(dp,-1,sizeof(dp));
              cout<<funct(n,1,2,dp)<<endl;
          }
      }
  }
