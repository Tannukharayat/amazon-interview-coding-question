**Given two sorted arrays arr1[] and arr2[] in non-decreasing order with size n and m. The task is to merge the two sorted arrays into one 
sorted array (in non-decreasing order).

Note: Expected time complexity is O((n+m) log(n+m)). DO NOT use extra space.  We need to modify existing arrays as following.**

        void min_heap(int a[], int k, int n)
                {
                    int curr=k;
                    if(2*k+1<n&&a[2*k+1]<a[curr])
                    {
                        curr=2*k+1;
                    }
                     if(2*k+2<n&&a[2*k+2]<a[curr])
                    {
                        curr=2*k+2;
                    }   
                    if(curr!=k)
                    {
                        swap(a[k],a[curr]);
                        min_heap(a,curr,n);
                    }

                }
                void build_min_heap(int a[], int n)
                {
                    for(int k = (n/2)-1 ; k >= 0 ; k--)
                    {
                        min_heap(a,k,n);
                    }
                }
        int main() 
        {
            int t , n , m;

          cin>>t;
          for(int i=0;i<t;i++)
          {
              cin>>n>>m;
              int a[n],b[m];
              for(int j=0;j<n;j++)
              {
                  cin>>a[j];
              }
              for(int j=0;j<m;j++)
              {
                  cin>>b[j];
              }

              build_min_heap(b,m);

               for(int i = 0 ; i < n ; i++)
               {
                   if(a[i]>b[0])
                   {
                       swap(a[i],b[0]);
                         min_heap(b, 0, m);
                   }
               }
               sort(b,b+m);
            int j=0,k=0; 
              while(j<n)
              {
                  cout<<a[j++]<<" ";
              }
              while(k<m)
              {
                  cout<<b[k++]<<" ";
              }
              cout<<endl;
            }
          return 0;
        }
