**Given two strings str1 and str2 and below operations that can performed on str1. Find minimum number of edits (operations) required to convert ‘str1′ into ‘str2′.

Insert
Remove
Replace
All of the above operations are of cost=1.
Both the strings are of lowercase***


          int main() 
          {
            int t ;
            cin >> t ;
            while(t--)
            {
                int n , m ;
                cin >> n >> m ;
                string s, t ;
                cin >> s>> t ;
                int dp[s.length()+1][t.length()+1];
                for(int i = 0 ; i <= s.length() ; i++)
                {
                    for(int j = 0 ; j <= t.length() ; j++)
                    {
                        if(i==0)
                        dp[i][j]=j; 
                        else if(j==0)
                        dp[i][j]=i;
                        else if(s[i-1]==t[j-1])
                        {
                            dp[i][j]=dp[i-1][j-1];
                        }else 
                        {
                            int x = min(dp[i][j-1],dp[i-1][j-1]);
                            dp[i][j]=min(dp[i-1][j] , x)+1;
                        }
                    }
                }cout<<dp[s.length()][t.length()]<<endl;
            }
            return 0;
          }

        Time Complexity: O(m x n)
          Auxiliary Space: O(m x n)

          int editDist(string str1, string str2, int m, int n) 
          { 
              // If first string is empty, the only option is to 
              // insert all characters of second string into first 
              if (m == 0) 
                  return n; 

              // If second string is empty, the only option is to 
              // remove all characters of first string 
              if (n == 0) 
                  return m; 

              // If last characters of two strings are same, nothing 
              // much to do. Ignore last characters and get count for 
              // remaining strings. 
              if (str1[m - 1] == str2[n - 1]) 
                  return editDist(str1, str2, m - 1, n - 1); 

              // If last characters are not same, consider all three 
              // operations on last character of first string, recursively 
              // compute minimum cost for all three operations and take 
              // minimum of three values. 
              return 1 + min(editDist(str1, str2, m, n - 1), // Insert 
                             editDist(str1, str2, m - 1, n), // Remove 
                             editDist(str1, str2, m - 1, n - 1) // Replace 
                             ); 
          } 

          // Driver program 
          int main() 
          { 
              // your code goes here 
              string str1 = "sunday"; 
              string str2 = "saturday"; 

              cout << editDist(str1, str2, str1.length(), str2.length()); 

              return 0; 
          } 
          O(3^m) 
          
          In the above-given method we require O(m x n) space. This will not be suitable if the length of strings is greater 
          than 2000 as it can only create 2D array of 2000 x 2000. To fill a row in DP array we require only one row the upper
          row. For example, if we are filling the i = 10 rows in DP array we require only values of 9th row. So we simply 
          create a DP array of 2 x str1 length. This approach reduces the space complexity. Here is the C++ implementation of
          the above-mentioned problem.


          // A Space efficient Dynamic Programming 
          // based C++ program to find minimum 
          // number operations to convert str1 to str2 
          #include <bits/stdc++.h> 
          using namespace std; 

          void EditDistDP(string str1, string str2) 
          { 
              int len1 = str1.length(); 
              int len2 = str2.length(); 

              // Create a DP array to memoize result 
              // of previous computations 
              int DP[2][len1 + 1]; 

              // To fill the DP array with 0 
              memset(DP, 0, sizeof DP); 

              // Base condition when second string 
              // is empty then we remove all characters 
              for (int i = 0; i <= len1; i++) 
                  DP[0][i] = i; 

              // Start filling the DP 
              // This loop run for every 
              // character in second string 
              for (int i = 1; i <= len2; i++) { 
                  // This loop compares the char from 
                  // second string with first string 
                  // characters 
                  for (int j = 0; j <= len1; j++) { 
                      // if first string is empty then 
                      // we have to perform add character 
                      // operation to get second string 
                      if (j == 0) 
                          DP[i % 2][j] = i; 

                      // if character from both string 
                      // is same then we do not perform any 
                      // operation . here i % 2 is for bound 
                      // the row number. 
                      else if (str1[j - 1] == str2[i - 1]) { 
                          DP[i % 2][j] = DP[(i - 1) % 2][j - 1]; 
                      } 

                      // if character from both string is 
                      // not same then we take the minimum 
                      // from three specified operation 
                      else { 
                          DP[i % 2][j] = 1 + min(DP[(i - 1) % 2][j], 
                                                 min(DP[i % 2][j - 1], 
                                                     DP[(i - 1) % 2][j - 1])); 
                      } 
                  } 
              } 

              // after complete fill the DP array 
              // if the len2 is even then we end 
              // up in the 0th row else we end up 
              // in the 1th row so we take len2 % 2 
              // to get row 
              cout << DP[len2 % 2][len1] << endl; 
          } 

          Time Complexity: O(m x n)
          Auxiliary Space: O( m )
