**Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). 
Palindrome string: A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S. Incase of conflict, return
the substring which occurs first ( with the least starting index ).

NOTE: Required Time Complexity O(n2).********




        string longestPalindrome(string A) 
        {
           int n = A.length();
           int dp[n+1][n+1]={0};
           for(int i = 0 ; i < n ; i++)
           dp[i][i] = 1 ;
           int start = -1, end = -1 , mx = 0 ;
           string st="";
           for(int k = 1 ; k <= n-1 ; k++ )
           {
               for(int i = 0 ; i+k < n ; i++)
               {
                   if(k==1)
                   {
                       if(A[i]==A[i+k])
                       {
                           dp[i][i+k]=1;
                       }else dp[i][i+k]=0;
                   }else 
                   {
                       if(A[i]==A[i+k]&&dp[i+1][i+k-1]==1)
                       {
                           dp[i][i+k]=1;
                       }else dp[i][i+k]=0;
                   }
               }
           }
           for(int i = 0 ; i < n ; i++)
           {
               for(int j = 0 ; j  < n  ; j++)
               {
                   if(mx<(j-i+1)&&dp[i][j]==1)
                       {
                           mx = j-i+1;
                           start = i;
                           end = j;
                       }
               }
           }
           if(start!=-1&&end!=-1)
           {
             for(int i = start ; i <= end ; i++)
             {
                 st+=A[i];
             }
           }
           return st;
        }
        
        or
        
        int longestPalSubstr(char *str)  
{  
    int maxLength = 1; // The result (length of LPS)  
  
    int start = 0;  
    int len = strlen(str);  
  
    int low, high;  
  
    // One by one consider every character as center point of  
    // even and length palindromes  
    for (int i = 1; i < len; ++i)  
    {  
        // Find the longest even length palindrome  
        // with center points as i-1 and i.  
        low = i - 1;  
        high = i;  
        while (low >= 0 && high < len && str[low] == str[high])  
        {  
            if (high - low + 1 > maxLength)  
            {  
                start = low;  
                maxLength = high - low + 1;  
            }  
            --low;  
            ++high;  
        }  
  
        // Find the longest odd length palindrome with center  
        // point as i  
        low = i - 1;  
        high = i + 1;  
        while (low >= 0 && high < len && str[low] == str[high])  
        {  
            if (high - low + 1 > maxLength)  
            {  
                start = low;  
                maxLength = high - low + 1;  
            }  
            --low;  
            ++high;  
        }  
    }  
  
    cout<<"Longest palindrome substring is: ";  
    printSubStr(str, start, start + maxLength - 1);  
  
    return maxLength;  
}  

TIME:- O(N^2)
SPACE :- O(1)
