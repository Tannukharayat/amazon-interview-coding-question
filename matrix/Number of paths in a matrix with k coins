**Given a N x N matrix where every cell has some number of coins. Count number of ways to reach bottom right cell of matrix from top left 
cell with exactly K coins. We can move to (i+1, j) or (i, j+1) from a cell (i, j).**

        long long int funct(ll dp[50][50][50],ll a[50][50], ll i , ll j, ll n , ll k )
        {
            k=k-a[i][j];
            if(dp[i][j][k]!=-1)
            return dp[i][j][k];
            if(i>=n||j>=n)
            return 0;
            if(k==0&&i==n-1&&j==n-1)
            {
                return 1;
            }
            if(k==0)
            return 0;
            dp[i][j][k]=funct(dp,a,i+1, j, n , k )+funct(dp,a,i, j+1, n , k);
            return dp[i][j][k];
        }
        int main() 
        {
          int t ;
          cin >> t ;
          while(t--)
          {
             ll k , n ;
              cin >> k >> n ;
              ll a[50][50];
              for(ll i= 0 ; i < n ; i++)
              {
                  for(ll j = 0 ; j < n ; j++)
                  cin >> a[i][j];
              }
              ll dp[50][50][50];
              memset(dp,-1,sizeof(dp));
              cout<<funct(dp,a, 0, 0, n , k )<<endl;
          }
          return 0;
        }
