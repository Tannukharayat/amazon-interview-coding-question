Given k sorted lists of integers of size n each, find the smallest range that includes at least element from each of the k lists
. If more than one smallest ranges are found, print any one of them.

      #define N 5 

      // array for storing the current index of list i 
      int ptr[501]; 

      // This function takes an k sorted lists in the form of 
      // 2D array as an argument. It finds out smallest range 
      // that includes elements from each of the k lists. 
      void findSmallestRange(int arr[][N], int n, int k) 
      { 
          int i, minval, maxval, minrange, minel, maxel, flag, minind; 

          // initializing to 0 index; 
          for (i = 0; i <= k; i++) 
              ptr[i] = 0; 

          minrange = INT_MAX; 

          while (1) { 
              // for mainting the index of list containing the minimum element 
              minind = -1; 
              minval = INT_MAX; 
              maxval = INT_MIN; 
              flag = 0; 

              // iterating over all the list 
              for (i = 0; i < k; i++) { 
                  // if every element of list[i] is traversed then break the loop 
                  if (ptr[i] == n) { 
                      flag = 1; 
                      break; 
                  } 
                  // find minimum value among all the list elements pointing by the ptr[] array 
                  if (ptr[i] < n && arr[i][ptr[i]] < minval) { 
                      minind = i; // update the index of the list 
                      minval = arr[i][ptr[i]]; 
                  } 
                  // find maximum value among all the list elements pointing by the ptr[] array 
                  if (ptr[i] < n && arr[i][ptr[i]] > maxval) { 
                      maxval = arr[i][ptr[i]]; 
                  } 
              } 

              // if any list exhaust we will not get any better answer, so break the while loop 
              if (flag) 
                  break; 

              ptr[minind]++; 

              // updating the minrange 
              if ((maxval - minval) < minrange) { 
                  minel = minval; 
                  maxel = maxval; 
                  minrange = maxel - minel; 
              } 
          } 

          printf("The smallest range is [%d, %d]\n", minel, maxel); 
      } 
      
      
      Complexity Analysis:
Time complexity : O(n * k2), to find the maximum and minimum in an array of length k the time required is O(k), and to traverse all the k arrays of length n (in worst case), the time complexity is O(n*k), then the total time complexity is O(n*k2).
Space complexity: O(k), an extra array is required of length k so the space complexity is O(k)

      class MinHeap { 

          // pointer to array of elements in heap 
          MinHeapNode* harr; 

          // size of min heap 
          int heap_size; 

      public: 
          // Constructor: creates a min heap of given size 
          MinHeap(MinHeapNode a[], int size); 

          // to heapify a subtree with root at given index 
          void MinHeapify(int); 

          // to get index of left child of node at index i 
          int left(int i) { return (2 * i + 1); } 

          // to get index of right child of node at index i 
          int right(int i) { return (2 * i + 2); } 

          // to get the root 
          MinHeapNode getMin() { return harr[0]; } 

          // to replace root with new node x and heapify() new root 
          void replaceMin(MinHeapNode x) 
          { 
              harr[0] = x; 
              MinHeapify(0); 
          } 
      }; 

      // Constructor: Builds a heap from a 
      // given array a[] of given size 
      MinHeap::MinHeap(MinHeapNode a[], int size) 
      { 
          heap_size = size; 
          harr = a; // store address of array 
          int i = (heap_size - 1) / 2; 
          while (i >= 0) { 
              MinHeapify(i); 
              i--; 
          } 
      } 

      // A recursive method to heapify a subtree with root at 
      // given index. This method assumes that the subtrees 
      // are already heapified 
      void MinHeap::MinHeapify(int i) 
      { 
          int l = left(i); 
          int r = right(i); 
          int smallest = i; 
          if (l < heap_size && harr[l].element < harr[i].element) 
              smallest = l; 
          if (r < heap_size && harr[r].element < harr[smallest].element) 
              smallest = r; 
          if (smallest != i) { 
              swap(harr[i], harr[smallest]); 
              MinHeapify(smallest); 
          } 
      } 

      // This function takes an k sorted lists in the form of 
      // 2D array as an argument. It finds out smallest range 
      // that includes elements from each of the k lists. 
      void findSmallestRange(int arr[][N], int k) 
      { 
          // Create a min heap with k heap nodes. Every heap node 
          // has first element of an list 
          int range = INT_MAX; 
          int min = INT_MAX, max = INT_MIN; 
          int start, end; 

          MinHeapNode* harr = new MinHeapNode[k]; 
          for (int i = 0; i < k; i++) { 
              // Store the first element 
              harr[i].element = arr[i][0]; 

              // index of list 
              harr[i].i = i; 

              // Index of next element to be stored 
              // from list 
              harr[i].j = 1; 

              // store max element 
              if (harr[i].element > max) 
                  max = harr[i].element; 
          } 

          // Create the heap 
          MinHeap hp(harr, k); 

          // Now one by one get the minimum element from min 
          // heap and replace it with next element of its list 
          while (1) { 
              // Get the minimum element and store it in output 
              MinHeapNode root = hp.getMin(); 

              // update min 
              min = hp.getMin().element; 

              // update range 
              if (range > max - min + 1) { 
                  range = max - min + 1; 
                  start = min; 
                  end = max; 
              } 

              // Find the next element that will replace current 
              // root of heap. The next element belongs to same 
              // list as the current root. 
              if (root.j < N) { 
                  root.element = arr[root.i][root.j]; 
                  root.j += 1; 

                  // update max element 
                  if (root.element > max) 
                      max = root.element; 
              } 

              // break if we have reached end of any list 
              else
                  break; 

              // Replace root with next element of list 
              hp.replaceMin(root); 
          } 

          cout << "The smallest range is "
               << "["
               << start << " " << end << "]" << endl; 
          ; 
      } 
      
      Complexity Analysis:
Time complexity : O(n * k *log k).
To find the maximum and minimum in an Min Heap of length k the time required is O(log k), and to traverse all the k arrays of length n (in worst case), the time complexity is O(n*k), then the total time complexity is O(n * k *log k).
Space complexity: O(k).
The priority queue will store k elements so the space complexity os O(k)
