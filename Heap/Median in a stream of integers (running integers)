Method 1: Insertion Sort
time complexity: O(n2) 

Method 2: Augmented self balanced binary search tree (AVL, RB, etcâ€¦)

Method 3: Heaps
O(N log N)
class MedianFinder 
{
public:
    /** initialize your data structure here. */
    priority_queue < int > maxi ; 
    priority_queue < int , vector < int > , greater < int > > mini ; 
    
    MedianFinder() {
        
        
        
    }
    
    void addNum(int x) 
    {
        if ( mini.size() > maxi.size() )
      {
        //cout << "1" << endl ; 
        if ( x > mini.top() )
        {
          int temp = mini.top() ; 
          mini.pop() ; 
          maxi.push ( temp ) ; 
          mini.push ( x ) ; 
        }
        else 
          maxi.push ( x ) ; 
      }
      else if ( mini.size() <  maxi.size() )
      {
        //cout << "2" << endl ; 

        if ( x > maxi.top() )
          mini.push ( x ) ; 
        else
        {
          int temp = maxi.top() ; 
          maxi.pop() ; 
          mini.push ( temp ) ; 
          maxi.push ( x ) ; 
        }
      }
      else 
      {
              //cout << "3" << endl ; 

          if ( mini.size() == 0 and maxi.size() == 0 )
            mini .push ( x ) ; 
          else 
          {
            if ( x <= maxi.top() )
              maxi.push ( x ) ; 
            else if ( x >= mini.top() )
              mini.push ( x ) ; 
            else maxi.push( x ) ; 
          }
      }
   }
    
    double findMedian() 
    {
        
        
        if ( maxi.size() == mini.size() )
            return ( ( maxi.top() + mini.top() ) * 1.0 ) / 2 ; 
        
        else if ( maxi.size() >  mini.size())
                return maxi.top() ; 
        else 
                return mini.top() ; 
      }  
