**Given a dictionary, a method to do lookup in dictionary and a M x N board where every cell has one character. Find all possible words 
that can be formed by a sequence of adjacent characters. Note that we can move to any of 8 adjacent characters, but a word should not have 
multiple instances of same cell.**

        int dfs(string stt,int i,int j,int n,int m,int arr[100][100],int vis[100][100],int &c)
        {
           vis[i][j]=1;
            if(c==stt.length())
            return 1;
            if(i-1>=0&&arr[i-1][j]==stt[c]&&vis[i-1][j]==0)
            {
                dfs(stt,i-1,j,n,m,arr,vis,c+1);
            }
            if(i+1<n&&arr[i+1][j]==stt[c]&&vis[i+1][j]==0)
            {
                dfs(stt,i+1,j,n,m,arr,vis,c+1);
            }
            if(j+1<m&&arr[i][j+1]==stt[c]&&vis[i][j+1]==0)
            {
                dfs(stt,i,j+1,n,m,arr,vis,c+1);
            }
            if(j-1>=0&&arr[i][j-1]==stt[c]&&vis[i][j-1]==0)
            {
                dfs(stt,i,j-1,n,m,arr,vis,c+1);
            }
            if(i-1>=0&&j-1>=0&&arr[i-1][j-1]==stt[c]&&vis[i-1][j-1]==0)
            {
                 dfs(stt,i-1,j-1,n,m,arr,vis,c+1);
            }
            if(i+1<n&&j+1<m&&arr[i+1][j+1]==stt[c]&&vis[i+1][j+1]==0)
            {
                 dfs(stt,i+1,j+1,n,m,arr,vis,c+1);
            }
            if(i-1>=0&&j+1<m&&arr[i-1][j+1]==stt[c]&&vis[i-1][j+1]==0)
            {
                 dfs(stt,i-1,j+1,n,m,arr,vis,c+1);
            }
            if(i+1<n&&j-1>=0&&arr[i+1][j-1]==stt[c]&&vis[i+1][j-1]==0)
            {
                 dfs(stt,i+1,j-1,n,m,arr,vis,c+1);
            }

            return c;
        }
        int main() 
        {
          cin>>q;
            int n,m,x;
          for(int i=0;i<q;i++)
          {
              cin>>x;
              string s[x];
              map<char,pair<int,int> >mp;
              for(int j=0;j<x;j++)
              cin>>s[j];
              cin>>n>>m;
              int arr[100][100];
              for(int j=0;j<n;j++)
              {
                  for(int k=0;k<m;k++)
                  {
                      cin>>arr[j][k];
                      mp[arr[j][k]]={j,k};
                  }
              }
              //long long int vis[n][]
              for(int j=0;j<x;j++)
              {
                  st=s[j];  
                  int c=1;
                  int vis[100][100];
                  memset(vis,0,sizeof(vis));
                   int x=0;
                  for(int k=0;k<n;k++)
                  {
                      for(int l=0;l<m;l++)
                      {

                          if(st[0]==arr[k][l])
                          x=dfs(st,i,j,n,m,arr,vis,c);
                          cout<<x<<" ";
                          if(x==1)
                         { 
                         cout<<st<<" ";
                         break;
                         }
                      }
                      if(x==1)
                      break;
                  }

              }
          }
          return 0;
        }
