**Determine the row index with minimum number of ones. The given 2D matrix has only zeroes and ones and also the matrix is sorted row wise.
If two or more rows have same number of 1's than print the row with smallest index.**

    int main() 
    {
        int t;
        cin>>t ;
        while(t--)
        {
            int n , m ;
            cin >> n >> m ;
            int a[n][m];
            for(int i = 0 ; i < n ; i++)
            {
                for(int j =0 ; j < m ; j++)
                {
                    cin >> a[i][j];
                }
            }
            int mx = m+1, index=-1;
            for(int i = 0 ; i < n ; i++)
            {
                int l=0, high=m;
                while(l<high)
                {
                    int mid = l + (high - l) / 2;
                    if(a[i][mid]==1)
                    {
                        high=mid;
                    }else l=mid+1;
                }
                if(m-l<mx&&l!=m)
                {
                    index=i;
                    mx=m-l;
                }
            }
           // cout<<l<<" "<<mx<<endl;
            if(mx==0)
            cout<<"-1"<<endl;
            else cout<<index<<endl;
        }
      return 0;
    }

O(mLogn)
 
 now modifying avove method :- instead of using binary search for every row use check current value is 0 / 1 use binay search for 1 only
 
 
 int rowWithMax1s(bool mat[R][C]) 
{ 
    // Initialize first row as row with max 1s 
    int max_row_index = 0; 
  
    // The function first() returns index of first 1 in row 0. 
    // Use this index to initialize the index of leftmost 1 seen so far 
    int j = first(mat[0], 0, C-1); 
    if (j == -1) // if 1 is not present in first row 
      j = C - 1; 
  
    for (int i = 1; i < R; i++) 
    { 
        // Move left until a 0 is found 
        while (j >= 0 && mat[i][j] == 1) 
        { 
           j = j-1;  // Update the index of leftmost 1 seen so far 
           max_row_index = i;  // Update max_row_index 
        } 
    } 
    return max_row_index; 
} 
O(M+N)

void findMax (int arr[][N]) 
{ 
    int row = 0, i, j; 
    for (i=0, j=N-1; i<N;i++) 
    { 
        // find left most position of 1 in a row 
        // find 1st zero in a row 
        while (arr[i][j] == 1 && j >= 0)  
        { 
            row = i; 
            j--; 
        } 
    } 
    cout << "Row number = " << row+1; 
    cout << ", MaxCount = " << N-1-j; 
} linear time complexity
