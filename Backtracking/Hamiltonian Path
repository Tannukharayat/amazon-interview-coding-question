**A Hamiltonian path, is a path in an undirected or directed graph that visits each vertex exactly once. Given an undirected graph  the 
task is to check if a Hamiltonian path is present in it or not.**--undirected and first vertex npt included

        bool issafe(int graph[100][100], int path[] , int v, int pos)
        {
            if(graph[path[pos-1]][v]==0)
            return 0;
            for(int i = 0 ; i < pos ; i++)
            {
                if(path[i]==v)
                return 0;
            }
            return 1;
        }
        bool hamcycle(int graph[100][100], int path[],int pos, int V)
        {
            if(pos==V)
            {
                 return 1;
            }
            for(int ij = 0 ; ij < V ; ij++)
            {
                if(issafe(graph,path,ij, pos))
                {
                    path[pos]=ij;
                    if(hamcycle(graph,path,pos+1,V)==1)
                    return 1;
                    path[pos]=-1;
                }
            }return 0;
        }
        int main() 
        {
          int t ;
          cin >> t ;
          while(t--)
          {
              int n , m ;
              cin >> n >> m ;
              int graph[100][100]={0};
              int path[n];
              int a, b ,ans=0;
              memset(path,-1,sizeof(path));
              for(int j = 0 ; j < m ; j++)
              {
                      cin >> a >> b;
                      a--;
                      b--;
                      graph[a][b] = 1;
                      graph[b][a] =1 ;
             }
              for(int i = 0 ; i < n ; i++)
              {
                  path[0]=i;
                  if(hamcycle(graph,path,1,n)==1)
                  {
                     ans=1;
                      break;
                  }
              }
              cout<<ans<<endl;
          }
          return 0;
        }

*******METHOD-2*********

                        bool dfs(vector<int> graph[100], int vis[100], int pos, int n,int v)
                        {
                            v++;
                            if(v==n)
                            {
                                return 1;
                            }

                           vis[pos]=1;
                           for(int i = 0 ; i < graph[pos].size() ;i++)
                           {
                               if(vis[graph[pos][i]]==0)
                               {
                                   if(dfs(graph,vis,graph[pos][i], n, v)==1)
                                   return 1;
                               }
                           }  v--;
                           vis[pos]=0;
                           return 0;
                        }
                        int main() 
                        {
                                int t ;
                                cin >> t ;
                                while(t--)
                                {
                                    int n , m ;
                                    cin >> n >> m ;
                                    vector<int> graph[100];
                                    int vis[100]={0};
                                    int a, b ,ans=0;
                                    for(int j = 0 ; j < m ; j++)
                                    {
                                            cin >> a >> b;
                                            a--;
                                            b--;
                                            graph[a].push_back(b);
                                            graph[b].push_back(a);
                                   }int cnt=0;
                                   int v=0;
                                    for(int i = 0 ; i < n ; i++)
                                    {

                                        vis[i]=1;
                                        cnt=1;
                                       if(dfs(graph,vis,i,n,v)==1)
                                       {
                                           ans=1;
                                           break;
                                       }

                                       vis[i]=0;
                                    }
                                    cout<<ans<<endl;
                                }
                                return 0;
                        }
