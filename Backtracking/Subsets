**Given an array of integers that might contain duplicates, return all possible subsets.

Note:

        Elements in a subset must be in non-descending order.
        The solution set must not contain duplicate subsets.
        The subsets must be sorted lexicographically.**
        
Input:
2
3
1 2 2
4
1 2 3 3

Output:
()(1)(1 2)(1 2 2)(2)(2 2)
()(1)(1 2)(1 2 3)(1 2 3 3)(1 3)(1 3 3)(2)(2 3)(2 3 3)(3)(3 3)



        void funct(int arr[], int index, vector<vector<int> >&v, int n, vector<int>&vect)
        {
            v.push_back(vect);
            for(int i = index ; i < n ; i++)
            {
                 vect.push_back(arr[i]);
                funct(arr, i+1, v, n, vect);
                vect.pop_back();
            }
          // return;
        }
        int main() 
        {
          int t ;
          cin >> t ;
          while(t--)
          {
              int n ;
              cin >> n ;
              int a[n];
              for(int i = 0 ; i < n ; i++)
              cin >> a[i];
              sort(a,a+n);
              vector<vector<int> > v;
              vector<int> vect;
              funct(a,0,v,n,vect);
              sort(v.begin(), v.end());
              unique(v.begin(), v.begin());
              for(int i = 0 ; i < v.size() ; i++)
              {

                  cout<<"(";
                  for(int j = 0 ; j < v[i].size() ;j++)
                  {
                      cout<<v[i][j];
                      if(j!=v[i].size()-1)
                      cout<<" ";
                  }
                  cout<<")";
                  while(v[i]==v[i+1])
                  i++;
              }cout<<endl;
          }
          return 0;
        }
