***Given an incomplete Sudoku configuration in terms of a 9 x 9  2-D square matrix (mat[][]). The task to print a solved Sudoku. For 
simplicity you may assume that there will be only one unique solution**

      void printGrid(int mat[N][N])
      {
          for(int i=0;i<9;i++)
          {
              for(int j=0;j<9;j++)
                  cout<<mat[i][j]<<" ";
          }
      }
      bool issafee(int r , int c , int k, int grid[9][9])
      {
          int sumr=0, sumc=0;
          for(int i = 0 ; i < 9 ;i++)
          {
              if(i!=r&&k==grid[i][c])
              {
                  return 0;
              }
              if(i!=c&&k==grid[r][i])
              {
                  return 0;
              }
          }
          if(r<3)
          {
              sumr=0;
          }else if(r>=3&&r<6)
          {
              sumr=3;
          }else sumr=6;
          if(c<3)
          {
              sumc=0;
          }else if(c>=3&&c<6)
          {
              sumc=3;
          }else sumc=6;
          for(int i = 0 ; i < 3 ; i++)
          {
              for(int j = 0 ; j < 3 ; j++)
              {
                  if(grid[i+sumr][j+sumc]==k&&!(r==i+sumr&&c==j+sumc))
                  {
                      return 0;
                  }
              }
          }
          return 1;
      }
      int search(int grid[9][9], int &r , int &c)
      {
          int i, j;
          for(i=0;i<9; i++)
          {
              for(j=0;j<9;j++)
              {
                  if(grid[i][j]==0)
                  {
                      r=i;
                      c=j;
                      return 1;
                  }
              }
          }return 0;
      }
      bool SolveSudoku(int grid[N][N]) 
      {
          int r=0, c=0;
          if(search(grid,r,c)==0)
          {
              return 1;
          }
          for(int k = 1 ; k <= 9 ; k++)
          {
              if(issafee(r,c,k,grid))
              {
                   grid[r][c]=k;
                   if(SolveSudoku(grid))
                   return 1;
                   grid[r][c]=0;
              }
          }

          return 0;
      }
