***Given an incomplete Sudoku configuration in terms of a 9 x 9  2-D square matrix (mat[][]). The task to print a solved Sudoku. For 
simplicity you may assume that there will be only one unique solution**
Time complexity: O(9^(n*n)). 
For every unassigned index there are 9 possible options so the time complexity is O(9^(n*n)).
Space Complexity: O(n*n). 
To store the output array a matrix is needed.

      void printGrid(int mat[N][N])
      {
          for(int i=0;i<9;i++)
          {
              for(int j=0;j<9;j++)
                  cout<<mat[i][j]<<" ";
          }
      }
      bool issafee(int r , int c , int k, int grid[9][9])
      {
          int sumr=0, sumc=0;
          for(int i = 0 ; i < 9 ;i++)
          {
              if(i!=r&&k==grid[i][c])
              {
                  return 0;
              }
              if(i!=c&&k==grid[r][i])
              {
                  return 0;
              }
          }
          if(r<3)
          {
              sumr=0;
          }else if(r>=3&&r<6)
          {
              sumr=3;
          }else sumr=6;
          if(c<3)
          {
              sumc=0;
          }else if(c>=3&&c<6)
          {
              sumc=3;
          }else sumc=6;
          for(int i = 0 ; i < 3 ; i++)
          {
              for(int j = 0 ; j < 3 ; j++)
              {
                  if(grid[i+sumr][j+sumc]==k&&!(r==i+sumr&&c==j+sumc))
                  {
                      return 0;
                  }
              }
          }
          return 1;
      }
      int search(int grid[9][9], int &r , int &c)
      {
          int i, j;
          for(i=0;i<9; i++)
          {
              for(j=0;j<9;j++)
              {
                  if(grid[i][j]==0)
                  {
                      r=i;
                      c=j;
                      return 1;
                  }
              }
          }return 0;
      }
      bool SolveSudoku(int grid[N][N]) 
      {
          int r=0, c=0;
          if(search(grid,r,c)==0)
          {
              return 1;
          }
          for(int k = 1 ; k <= 9 ; k++)
          {
              if(issafee(r,c,k,grid))
              {
                   grid[r][c]=k;
                   if(SolveSudoku(grid))
                   return 1;
                   grid[r][c]=0;
              }
          }

          return 0;
      }
      
      OR
      
      #include <bits/stdc++.h> 
            using namespace std; 

            // UNASSIGNED is used for empty 
            // cells in sudoku grid 
            #define UNASSIGNED 0 

            // N is used for the size of Sudoku grid. 
            // Size will be NxN 
            #define N 9 

            // This function finds an entry in grid 
            // that is still unassigned 
            bool FindUnassignedLocation(int grid[N][N], 
                                        int& row, int& col); 

            // Checks whether it will be legal 
            // to assign num to the given row, col 
            bool isSafe(int grid[N][N], int row, 
                        int col, int num); 

            /* Takes a partially filled-in grid and attempts  
            to assign values to all unassigned locations in  
            such a way to meet the requirements for 
            Sudoku solution (non-duplication across rows, 
            columns, and boxes) */
            bool SolveSudoku(int grid[N][N]) 
            { 
                int row, col; 

                // If there is no unassigned location, 
                // we are done 
                if (!FindUnassignedLocation(grid, row, col)) 
                    // success! 
                    return true; 

                // Consider digits 1 to 9 
                for (int num = 1; num <= 9; num++) { 
                    // if looks promising 
                    if (isSafe(grid, row, col, num)) { 
                        // make tentative assignment 
                        grid[row][col] = num; 

                        // return, if success, yay! 
                        if (SolveSudoku(grid)) 
                            return true; 

                        // failure, unmake & try again 
                        grid[row][col] = UNASSIGNED; 
                    } 
                } 
                // this triggers backtracking 
                return false; 
            } 

            /* Searches the grid to find an entry that is  
            still unassigned. If found, the reference  
            parameters row, col will be set the location  
            that is unassigned, and true is returned.  
            If no unassigned entries remain, false is returned. */
            bool FindUnassignedLocation(int grid[N][N], 
                                        int& row, int& col) 
            { 
                for (row = 0; row < N; row++) 
                    for (col = 0; col < N; col++) 
                        if (grid[row][col] == UNASSIGNED) 
                            return true; 
                return false; 
            } 

            /* Returns a boolean which indicates whether  
            an assigned entry in the specified row matches 
            the given number. */
            bool UsedInRow(int grid[N][N], int row, int num) 
            { 
                for (int col = 0; col < N; col++) 
                    if (grid[row][col] == num) 
                        return true; 
                return false; 
            } 

            /* Returns a boolean which indicates whether  
            an assigned entry in the specified column 
            matches the given number. */
            bool UsedInCol(int grid[N][N], int col, int num) 
            { 
                for (int row = 0; row < N; row++) 
                    if (grid[row][col] == num) 
                        return true; 
                return false; 
            } 

            /* Returns a boolean which indicates whether  
            an assigned entry within the specified 3x3 box  
            matches the given number. */
            bool UsedInBox(int grid[N][N], int boxStartRow, 
                           int boxStartCol, int num) 
            { 
                for (int row = 0; row < 3; row++) 
                    for (int col = 0; col < 3; col++) 
                        if (grid[row + boxStartRow] 
                                [col + boxStartCol] 
                            == num) 
                            return true; 
                return false; 
            } 

            /* Returns a boolean which indicates whether  
            it will be legal to assign num to the given  
            row, col location. */
            bool isSafe(int grid[N][N], int row, 
                        int col, int num) 
            { 
                /* Check if 'num' is not already placed in  
                current row, current column and current 3x3 box */
                return !UsedInRow(grid, row, num) 
                       && !UsedInCol(grid, col, num) 
                       && !UsedInBox(grid, row - row % 3, 
                                     col - col % 3, num) 
                       && grid[row][col] == UNASSIGNED; 
            } 

            /* A utility function to print grid */
            void printGrid(int grid[N][N]) 
            { 
                for (int row = 0; row < N; row++) { 
                    for (int col = 0; col < N; col++) 
                        cout << grid[row][col] << " "; 
                    cout << endl; 
                } 
            } 

            // Driver Code 
            int main() 
            { 
                // 0 means unassigned cells 
                int grid[N][N] = { { 3, 0, 6, 5, 0, 8, 4, 0, 0 }, 
                                   { 5, 2, 0, 0, 0, 0, 0, 0, 0 }, 
                                   { 0, 8, 7, 0, 0, 0, 0, 3, 1 }, 
                                   { 0, 0, 3, 0, 1, 0, 0, 8, 0 }, 
                                   { 9, 0, 0, 8, 6, 3, 0, 0, 5 }, 
                                   { 0, 5, 0, 0, 9, 0, 6, 0, 0 }, 
                                   { 1, 3, 0, 0, 0, 0, 2, 5, 0 }, 
                                   { 0, 0, 0, 0, 0, 0, 0, 7, 4 }, 
                                   { 0, 0, 5, 2, 0, 6, 3, 0, 0 } }; 
                if (SolveSudoku(grid) == true) 
                    printGrid(grid); 
                else
                    cout << "No solution exists"; 

                return 0; 
            } 

