**Given a number K and string S of digits denoting a positive integer, build the largest number possible by performing swap operations on 
the digits of S atmost K times.**

      void funct(string s, int k , string &st)
      {

           if (s>st) 
              st = s;
          if(k==0)
          return ;
          for(int i = 0 ; i < s.length()-1 ; i++)
          {
              for(int j = i+1 ; j < s.length() ; j++)
              {
                  if(s[i]<s[j])
                  {
                      swap(s[i],s[j]);
                      funct(s,k-1,st);
                      swap(s[i],s[j]);
                  }
              }
          }
      }
      int main() 
      {

          ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0) ; 
          ll T ; 
          cin >> T ; 
          while ( T --)
          {
              int k , n ;
              cin >> k ; 
              string s ; 
              cin >> s ;
              n = s.length() ;
              string st=s;
              funct(s,k,st);
              cout<<st<<endl;
          }
        //code
        return 0;
      }
      Time Complexity: O((n^2)^k).
For every recursive call n^2 recursive calls is generated until the value of k is 0. So total recursive calls are O((n^2)^k).
Space Complexity:O(n).
                           
                           
      void findMaximumNum(string str, int k, string& max, int ctr) 
            { 
                // return if no swaps left 
                if (k == 0) 
                    return; 

                int n = str.length(); 

                // consider every digit after the cur position 
                char maxm = str[ctr]; 
                for (int j = ctr + 1; j < n; j++) 
                { 
                    // find maximum digit greater than at ctr among rest 
                    if (maxm < str[j]) 
                        maxm = str[j]; 
                } 

                // if maxm is not equal to k, decrement k 
                if (maxm != str[ctr]) 
                    --k; 

                // search this maximum among the rest 
                for (int j = ctr; j < n; j++) 
                { 
                   // if digit equals maxm swap the digit with current  
                   // digit and recurse for the rest 
                   if (str[j] == maxm) 
                   { 
                       // swap str[ctr] with str[j] 
                       swap(str[ctr], str[j]); 

                       // If current num is more than maximum so far 
                       if (str.compare(max) > 0) 
                           max = str; 

                       // recurse other swaps after cur 
                       findMaximumNum(str, k, max, ctr+1); 

                       // backtrack 
                       swap(str[ctr], str[j]); 
                   } 
                } 
            }                      
            
            Time Complexity: O(n^k).
For every recursive call n recursive calls is generated until the value of k is 0. So total recursive calls are O((n)^k).
Space Complexity: O(n).
