You are given an array of n+2 elements. All elements of the array are in range 1 to n. And all elements occur once except two 
numbers which occur twice. Find the two repeating numbers.

void printRepeating(int arr[], int size) 
{ 
    int i, j; 
    printf(" Repeating elements are "); 
    for(i = 0; i < size; i++) 
        for(j = i + 1; j < size; j++) 
        if(arr[i] == arr[j]) 
            cout << arr[i] << " "; 
} 
Time Complexity: O(n*n)
Auxiliary Space: O(1)

OR

void printRepeating(int arr[], int size)  
{  
    int *count = new int[sizeof(int)*(size - 2)];  
    int i;  
          
    cout << " Repeating elements are ";  
    for(i = 0; i < size; i++)  
    {  
        if(count[arr[i]] == 1)  
            cout << arr[i] << " ";  
        else
            count[arr[i]]++;  
    }  
}  
Time Complexity: O(n)
Auxiliary Space: O(n)

OR

void printRepeating(int arr[], int size)  
{  
    int S = 0; /* S is for sum of elements in arr[] */
    int P = 1; /* P is for product of elements in arr[] */
    int x, y; /* x and y are two repeating elements */
    int D; /* D is for difference of x and y, i.e., x-y*/
    int n = size - 2, i;  
      
    /* Calculate Sum and Product of all elements in arr[] */
    for(i = 0; i < size; i++)  
    {  
        S = S + arr[i];  
        P = P*arr[i];  
    }      
          
    S = S - n*(n+1)/2; /* S is x + y now */
    P = P/fact(n);     /* P is x*y now */
          
    D = sqrt(S*S - 4*P); /* D is x - y now */
          
    x = (D + S)/2;  
    y = (S - D)/2;  
          
    cout<<"The two Repeating elements are "<<x<<" & "<<y;  
}  
  
int fact(int n)  
{  
    return (n == 0)? 1 : n*fact(n-1);  
}  

Time Complexity: O(n)
Auxiliary Space: O(1)


OR

void printRepeating(int arr[], int size)  
{  
    int i;  
      
    cout << "The repeating elements are";  
          
    for(i = 0; i < size; i++)  
    {  
        if(arr[abs(arr[i])] > 0)  
            arr[abs(arr[i])] = -arr[abs(arr[i])];  
        else
            cout<<" " << abs(arr[i]) <<" ";  
    }      
}

OR

void printRepeating(int arr[], int size)  
{  
    int Xor = arr[0]; /* Will hold Xor of all elements */
    int set_bit_no; /* Will have only single set bit of Xor */
    int i;  
    int n = size - 2;  
    int x = 0, y = 0;  
          
    /* Get the Xor of all elements in arr[] and {1, 2 .. n} */
    for(i = 1; i < size; i++)  
        Xor ^= arr[i];  
    for(i = 1; i <= n; i++)  
        Xor ^= i;  
      
    /* Get the rightmost set bit in set_bit_no */
    set_bit_no = Xor & ~(Xor-1);  
      
    /* Now divide elements in two sets by comparing rightmost set  
    bit of Xor with bit at same position in each element. */
    for(i = 0; i < size; i++)  
    {  
        if(arr[i] & set_bit_no)  
        x = x ^ arr[i]; /*Xor of first set in arr[] */
        else
        y = y ^ arr[i]; /*Xor of second set in arr[] */
    }  
    for(i = 1; i <= n; i++)  
    {  
        if(i & set_bit_no)  
        x = x ^ i; /*Xor of first set in arr[] and {1, 2, ...n }*/
        else
        y = y ^ i; /*Xor of second set in arr[] and {1, 2, ...n } */
    }  
          
    cout<<"The two repeating elements are "<<y<<" "<<x;  
}  
