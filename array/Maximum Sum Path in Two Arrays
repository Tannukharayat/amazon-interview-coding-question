Given two sorted arrays, such that the arrays may have some common elements. Find the sum of the maximum sum path to reach from the 
beginning of any array to end of any of the two arrays. We can switch from one array to another array only at common elements.
Note: The common elements do not have to be at the same indexes.

Expected Time Complexity: O(m+n), where m is the number of elements in ar1[] and n is the number of elements in ar2[].

    int maxPathSum(int ar1[], int ar2[], int m, int n) 
{ 
    // initialize indexes for ar1[] and ar2[] 
    int i = 0, j = 0; 
  
    // Initialize result and current sum through ar1[] and ar2[]. 
    int  result = 0, sum1 = 0, sum2 = 0; 
  
    // Below 3 loops are similar to merge in merge sort 
    while (i < m && j < n) 
    { 
        // Add elements of ar1[] to sum1 
        if (ar1[i] < ar2[j]) 
            sum1 += ar1[i++]; 
  
        // Add elements of ar2[] to sum2 
        else if (ar1[i] > ar2[j]) 
            sum2 += ar2[j++]; 
  
        else  // we reached a common point 
        { 
            // Take the maximum of two sums and add to result 
            result += max(sum1, sum2); 
  
            // Update sum1 and sum2 for elements after this 
            // intersection point 
            sum1 = 0, sum2 = 0; 
  
            // Keep updating result while there are more common 
            // elements 
            while (i < m &&  j < n && ar1[i] == ar2[j]) 
            { 
                result = result + ar1[i++]; 
                j++; 
            } 
        } 
    } 
  
    // Add remaining elements of ar1[] 
    while (i < m) 
        sum1  +=  ar1[i++]; 
  
    // Add remaining elements of ar2[] 
    while (j < n) 
        sum2 +=  ar2[j++]; 
  
    // Add maximum of two sums of remaining elements 
    result +=  max(sum1, sum2); 
  
    return result; 
} 
  
// Driver program to test above function 
int main() 
{ 
    int ar1[]  = {2, 3, 7, 10, 12, 15, 30, 34}; 
    int ar2[] =  {1, 5, 7, 8, 10, 15, 16, 19}; 
    int m = sizeof(ar1)/sizeof(ar1[0]); 
    int n = sizeof(ar2)/sizeof(ar2[0]); 
    cout << "Maximum sum path is " 
         << maxPathSum(ar1, ar2, m, n); 
    return 0; 
} 
Output:

Maximum sum path is 122
Complexity Analysis:

Space Complexity: O(1).
Any extra space is not required, so the space complexity is constant.
Time complexity: O(m+n).
In every iteration of while loops, an element from either of the two arrays is processed. There are total m + n elements. Therefore, the time complexity is O(m+n)
