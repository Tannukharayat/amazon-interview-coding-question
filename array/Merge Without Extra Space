**Given two sorted arrays arr1[] and arr2[] in non-decreasing order with size n and m. The task is to merge the two sorted arrays into one 
sorted array (in non-decreasing order).

Note: Expected time complexity is O((n+m) log(n+m)). DO NOT use extra space.  We need to modify existing arrays as following.**

time complexitty: O(M*n)

    int main() 
    {
      cin>>t;
      for(int i=0;i<t;i++)
      {
          cin>>n>>m;
          int a[n],b[m];
          for(int j=0;j<n;j++)
          {
              cin>>a[j];
          }
          for(int j=0;j<m;j++)
          {
              cin>>b[j];
          }
             for(int i = m-1 ; i >=0 ; i--)
         {
             int j=n-2,temp=a[n-1];
             for(j = n-2 ; j >=0 && a[j]>b[i]; j--)
             {
                 a[j+1]=a[j];
             }
             if(j==n-2&&a[n-1]>b[i])
             {
                 swap(a[n-1],b[i]);
             }
             if(j<n-2)
             {
                 a[j+1]=b[i];
                 b[i]=temp;
             }
         }
        int j=0,k=0; 
          while(j<n)
          {
              cout<<a[j++]<<" ";
          }
          while(k<m)
          {
              cout<<b[k++]<<" ";
          }
          cout<<endl;
        }
      return 0;
    }
    
    Time Used: O(n) (build Heap) + O(m * log(n)) . (each element of first array and then heapify ) + O(n*log(n)) (sorting the second array)
    
