Given an array of n elements which contains elements from 0 to n-1, with any of these numbers appearing any number of times. Find these repeating numbers in O(n) and using only constant memory space.
Example:

Input : n = 7 and array[] = {1, 2, 3, 1, 3, 6, 6}
Output: 1, 3, 6

Explanation: The numbers 1 , 3 and 6 appears more
than once in the array.

Input : n = 5 and array[] = {1, 2, 3, 4 ,3}
Output: 3

Explanation: The number 3 appears more than once
in the array.

METHOD : 1
  void printRepeating(int arr[], int size) 
{ 
  int i; 
  cout << "The repeating elements are:" << endl; 
  for (i = 0; i < size; i++) 
  { 
      if (arr[abs(arr[i])] >= 0) 
      arr[abs(arr[i])] = -arr[abs(arr[i])]; 
      else
      cout << abs(arr[i]) << " "; 
  } 
}
Complexity Analysis:
Time Complexity: O(n), only one traversal is needed, so time complexity is O(n)
Auxiliary Space: O(1), no extra space is required, so space complexity is constant.

METHOD : 2
int main() 
{ 
      
    int numRay[] = {0, 4, 3, 2, 7, 8, 2, 3, 1}; 
    int arr_size = sizeof(numRay) /  
                   sizeof(numRay[0]);  
    for (int i = 0; i < arr_size; i++) 
    { 
        numRay[numRay[i] % arr_size] = numRay[numRay[i] % arr_size] + arr_size; 
    } 
    cout << "The repeating elements are : " << endl; 
    for (int i = 0; i < arr_size; i++)  
    { 
        if (numRay[i] >= arr_size*2)  
        { 
            cout << i << " " << endl; 
        } 
    } 
    return 0; 
} 
Complexity Anlaysis:
Time Complexity: O(n).
Only two traversals are needed. So the time complexity is O(n).
Auxiliary Space: O(1).
No extra space is needed, so the space complexity is constant

void printRepeating( int arr[], int n) 
{ 
    // First check all the values that are 
    // present in an array then go to that 
    // values as indexes and increment by 
    // the size of array 
    for (int i = 0; i < n; i++) 
    { 
        int index = arr[i] % n; 
        arr[index] += n; 
    } 
  
    // Now check which value exists more 
    // than once by dividing with the size 
    // of array 
    for (int i = 0; i < n; i++) 
    { 
        if ((arr[i]/n) > 1) 
            cout << i << " "; 
    } 
} 
Complexity Analysis:

Time Complexity: O(n).
Only two traversal is needed. So the time complexity is O(n)
Auxiliary Space: O(1).
As no extra space is needed, so the space complexity is constant

