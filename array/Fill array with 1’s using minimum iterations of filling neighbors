Given an array of 0s and 1s, in how many iterations the whole array can be filled with 1s if in a single iteration immediate 
neighbors of 1s can be filled.

NOTE: If we cannot fill array with 1s, then print “-1” .

Case 1 : A block of 0s has 1s on both sides

Let count_zero be the count of zeros in the block.

Number of iterations are always equal to : 
              count_zero/2   if (count_zero is even)
              count_zero+1)/2    if(count_zero is odd).

Case 2 : Either single 1 at the end or in 
         the starting. For example 0 0 0 0 1 and 
         1 0 0 0 0
In this case the number of iterations required will 
always be equal to number of zeros.

Case 3 : There are no 1s (Array has only 0s)
In this case array can't be filled with all 1's. 
So print -1.

      int countIterations(int arr[], int n) 
    { 
        bool oneFound = false; 
        int res = 0; 
        // Start traversing the array 
        for (int i=0; i<n; ) 
        { 
            if (arr[i] == 1) 
              oneFound = true; 

            // Traverse until a 0 is found 
            while (i<n && arr[i]==1) 
                i++; 

            // Count contiguous 0s 
            int count_zero = 0; 
            while (i<n && arr[i]==0) 
            { 
                count_zero++; 
                i++; 
            } 

            // Condition for Case 3 
            if (oneFound == false && i == n) 
                return -1; 

            // Condition to check if Case 1 satisfies: 
            int curr_count; 
            if (i < n && oneFound == true) 
            { 
                // If count_zero is even 
                if (count_zero & 1 == 0) 
                    curr_count = count_zero/2; 

                // If count_zero is odd 
                else
                    curr_count = (count_zero+1)/2; 

                // Reset count_zero 
                count_zero = 0; 
            } 

            // Case 2 
            else
            { 
                curr_count = count_zero; 
                count_zero = 0; 
            } 

            // Update res 
            res = max(res, curr_count); 
        } 

        return res; 
    } 

    // Driver code 
    int main() 
    { 
        int arr[] = {0, 1, 0, 0, 1, 0, 0, 
                     0, 0, 0, 0, 0, 1, 0}; 
        int n = sizeof(arr) / sizeof(arr[0]); 
        cout << countIterations(arr, n); 
        return 0; 
    }
    Time Complexity : O(n)
