int missingNumber(int a[], int n) 
{ 
    // Declaring an unordered_map 
    unordered_map<int, int> mp; 
  
    // if array value is positive 
    // store it in map 
    for (int i = 0; i < n; i++) { 
        if (a[i] > 0) 
            mp[a[i]]++; 
    } 
  
    // index value set to 1 
    int index = 1; 
  
    // Return the first value starting 
    // from 1 which does not exists in map 
    while (1) { 
        if (mp.find(index) == mp.end()) { 
            return index; 
        } 
  
        index++; 
    } 
} 
Time Complexity: O(N)
Auxiliary Space: O(N)

OR

void swap(int* a, int* b) 
{ 
    int temp; 
    temp = *a; 
    *a = *b; 
    *b = temp; 
} 
  
/* Utility function that puts all  
non-positive (0 and negative) numbers on left  
side of arr[] and return count of such numbers */
int segregate(int arr[], int size) 
{ 
    int j = 0, i; 
    for (i = 0; i < size; i++) { 
        if (arr[i] <= 0) { 
            swap(&arr[i], &arr[j]); 
            j++; // increment count of non-positive integers 
        } 
    } 
  
    return j; 
} 
  
/* Find the smallest positive missing number  
in an array that contains all positive integers */
int findMissingPositive(int arr[], int size) 
{ 
    int i; 
  
    // Mark arr[i] as visited by making arr[arr[i] - 1] negative. 
    // Note that 1 is subtracted because index start 
    // from 0 and positive numbers start from 1 
    for (i = 0; i < size; i++) { 
        if (abs(arr[i]) - 1 < size && arr[abs(arr[i]) - 1] > 0) 
            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]; 
    } 
  
    // Return the first index value at which is positive 
    for (i = 0; i < size; i++) 
        if (arr[i] > 0) 
            // 1 is added because indexes start from 0 
            return i + 1; 
  
    return size + 1; 
} 
  
/* Find the smallest positive missing  
number in an array that contains  
both positive and negative integers */
int findMissing(int arr[], int size) 
{ 
    // First separate positive and negative numbers 
    int shift = segregate(arr, size); 
  
    // Shift the array and call findMissingPositive for 
    // positive part 
    return findMissingPositive(arr + shift, size - shift); 
} 
  
// Driver code 
int main() 
{ 
    int arr[] = { 0, 10, 2, -10, -20 }; 
    int arr_size = sizeof(arr) / sizeof(arr[0]); 
    int missing = findMissing(arr, arr_size); 
    cout << "The smallest positive missing number is " << missing; 
    return 0; 
} 
A O(n) time and O(1) extra space solution:

OR
int firstMissingPos(int A[], int n) 
{ 
  
    // To mark the occurrence of elements 
    bool present[n + 1] = { false }; 
  
    // Mark the occurrences 
    for (int i = 0; i < n; i++) { 
  
        // Only mark the required elements 
        // All non-positive elements and 
        // the elements greater n + 1 will never 
        // be the answer 
        // For example, the array will be {1, 2, 3} 
        // in the worst case and the result 
        // will be 4 which is n + 1 
        if (A[i] > 0 && A[i] <= n) 
            present[A[i]] = true; 
    } 
  
    // Find the first element which didn't 
    // appear in the original array 
    for (int i = 1; i <= n; i++) 
        if (!present[i]) 
            return i; 
  
    // If the original array was of the 
    // type {1, 2, 3} in its sorted form 
    return n + 1; 
} 
  
// Driver code 
int main() 
{ 
  
    int A[] = { 0, 10, 2, -10, -20 }; 
    int size = sizeof(A) / sizeof(A[0]); 
    cout << firstMissingPos(A, size); 
} 
OR

int findMissingNo(int arr[], int n) 
{ 
    // to store current array element 
    int val; 
  
    // to store next array element in 
    // current traversal 
    int nextval; 
  
    for (int i = 0; i < n; i++) { 
  
        // if value is negative or greater 
        // than array size, then it cannot 
        // be marked in array. So move to 
        // next element. 
        if (arr[i] <= 0 || arr[i] > n) 
            continue; 
  
        val = arr[i]; 
  
        // traverse the array until we 
        // reach at an element which 
        // is already marked or which 
        // could not be marked. 
        while (arr[val - 1] != val) { 
            nextval = arr[val - 1]; 
            arr[val - 1] = val; 
            val = nextval; 
            if (val <= 0 || val > n) 
                break; 
        } 
    } 
  
    // find first array index which is 
    // not marked which is also the 
    // smallest positive missing 
    // number. 
    for (int i = 0; i < n; i++) { 
        if (arr[i] != i + 1) { 
            return i + 1; 
        } 
    } 
  
    // if all indices are marked, then 
    // smallest missing positive 
    // number is array_size + 1. 
    return n + 1; 
} 
  
// Driver code 
int main() 
{ 
    int arr[] = { 2, 3, 7, 6, 8, -1, -10, 15 }; 
    int arr_size = sizeof(arr) / sizeof(arr[0]); 
    int missing = findMissingNo(arr, arr_size); 
    cout << "The smallest positive missing number is "
         << missing; 
    return 0; 
} 
Time Complexity: O(n)
Auxiliary Space: O(1)

OR
int findMissingPositive(int arr[], int n) 
{ 
    // Default smallest Positive Integer 
    int m = 1; 
  
    // Store values in set which are 
    // greater than variable m 
    set<int> x; 
  
    for (int i = 0; i < n; i++) { 
        // Store value when m is less than 
        // current index of given array 
        if (m < arr[i]) { 
            x.insert(arr[i]); 
        } 
        else if (m == arr[i]) { 
            // Increment m when it is equal 
            // to current element 
            m = m + 1; 
  
            while (x.count(m)) { 
                x.erase(m); 
  
                // Increment m when it is one of the 
                // element of the set 
                m = m + 1; 
            } 
        } 
    } 
  
    // Return the required answer 
    return m; 
} 
  
// Driver code 
int main() 
{ 
    int arr[] = { 2, 3, -7, 6, 8, 1, -10, 15 }; 
  
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    // Function call 
    cout << findMissingPositive(arr, n); 
  
    return 0; 
} 
