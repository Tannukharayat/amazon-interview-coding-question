 Given an array Arr of N integers(duplicates allowed). Print “Yes” if it is a set of contiguous integers else print “No”.
 
 
      bool check(int arr[], int n) 
      { 

          int k = INT_MIN; 
          int r = INT_MAX; 

          // To find the max and min 
          // in the array 
          for (int i = 0; i < n; i++) { 
              k = max(k, arr[i]); 
              r = min(r, arr[i]); 
          } 

          k += 1; 

          // Update the array with 
          // the difference from 
          // the max element 
          for (int i = 0; i < n; i++) 
              arr[i] = k - arr[i]; 

          for (int i = 0; i < n; i++) { 

              // if the element is positive 
              // and less than the size of 
              // array(in range), make it negative 
              if (abs(arr[i]) - 1 < n 
                  && arr[abs(arr[i]) - 1] > 0) { 
                  arr[abs(arr[i]) - 1] 
                      = -arr[abs(arr[i]) - 1]; 
              } 
          } 

          int flag = 0; 

          // Loop from 0 to end of the array 
          for (int i = 0; i <= k - r - 1; i++) { 

              // Found positive, out of range 
              if (arr[i] > 0) { 
                  flag = 1; 
                  break; 
              } 
              bool areElementsContiguous(int arr[], int n) 
          { 
              // Storing elements of 'arr[]' in a hash 
              // table 'us'    
              unordered_set<int> us; 
              for (int i = 0; i < n; i++) 
                  us.insert(arr[i]); 

              // as arr[0] is present in 'us' 
              int count = 1; 

              // starting with previous smaller element 
              // of arr[0] 
              int curr_ele = arr[0] - 1; 

              // if 'curr_ele' is present in 'us' 
              while (us.find(curr_ele) != us.end()) { 

                  // increment count 
                  count++; 

                  // update 'curr_ele" 
                  curr_ele--; 
              } 

              // starting with next greater element 
              // of arr[0] 
              curr_ele = arr[0] + 1; 

              // if 'curr_ele' is present in 'us' 
              while (us.find(curr_ele) != us.end()) { 

                  // increment count 
                  count++; 

                  // update 'curr_ele" 
                  curr_ele++; 
              } 

              // returns true if array contains a set of 
              // contiguous integers else returns false 
              return (count == (int)(us.size())); 
          } 
                    } 

                    return flag == 0; 
                } 
                TIME: O(N)
                SPACE : O(N)

                OR

                Efficient solution using hash table
                bool areElementsContiguous(int arr[], int n) 
          { 
              // Storing elements of 'arr[]' in a hash 
              // table 'us'    
              unordered_set<int> us; 
              for (int i = 0; i < n; i++) 
                  us.insert(arr[i]); 

              // as arr[0] is present in 'us' 
              int count = 1; 

              // starting with previous smaller element 
              // of arr[0] 
              int curr_ele = arr[0] - 1; 

              // if 'curr_ele' is present in 'us' 
              while (us.find(curr_ele) != us.end()) { 

                  // increment count 
                  count++; 

                  // update 'curr_ele" 
                  curr_ele--; 
              } 

              // starting with next greater element 
              // of arr[0] 
              curr_ele = arr[0] + 1; 

              // if 'curr_ele' is present in 'us' 
              while (us.find(curr_ele) != us.end()) { 

                  // increment count 
                  count++; 

                  // update 'curr_ele" 
                  curr_ele++; 
              } 

              // returns true if array contains a set of 
              // contiguous integers else returns false 
              return (count == (int)(us.size())); 
          } 
          Time Complexity: O(n).
Auxiliary Space: O(n).
