Given an integer array and a positive integer k, count all distinct pairs with difference equal to k.
Examples:

Input: arr[] = {1, 5, 3, 4, 2}, k = 3
Output: 2
There are 2 pairs with difference 3, the pairs are {1, 4} and {5, 2} 

Input: arr[] = {8, 12, 16, 4, 0, 20}, k = 4
Output: 5
There are 5 pairs with difference 4, the pairs are {0, 4}, {4, 8}, 
{8, 12}, {12, 16} and {16, 20} 

Method 1 (Simple)
int countPairsWithDiffK(int arr[], int n, int k) 
{ 
    int count = 0; 
      
    // Pick all elements one by one 
    for (int i = 0; i < n; i++) 
    {        
        // See if there is a pair of this picked element 
        for (int j = i+1; j < n; j++) 
            if (arr[i] - arr[j] == k || arr[j] - arr[i] == k ) 
                  count++; 
    } 
    return count; 
} 

Time Complexity of O(n2)

OR

Method 2 (Use Sorting)
int binarySearch(int arr[], int low, int high, int x) 
{ 
    if (high >= low) 
    { 
        int mid = low + (high - low)/2; 
        if (x == arr[mid]) 
            return mid; 
        if (x > arr[mid]) 
            return binarySearch(arr, (mid + 1), high, x); 
        else
            return binarySearch(arr, low, (mid -1), x); 
    } 
    return -1; 
} 
  
/* Returns count of pairs with difference k in arr[] of size n. */
int countPairsWithDiffK(int arr[], int n, int k) 
{ 
    int count = 0, i; 
    sort(arr, arr+n);  // Sort array elements 
  
    /* code to remove duplicates from arr[] */
    
    // Pick a first element point 
    for (i = 0; i < n-1; i++) 
        if (binarySearch(arr, i+1, n-1, arr[i] + k) != -1) 
            count++; 
  
    return count; 
} 
Time complexity: The first step (sorting) takes O(nLogn) time.

OR

Method 3 (Use Self-balancing BST)
1) Initialize count as 0.
2) Insert all elements of arr[] in an AVL tree. While inserting, 
   ignore an element if already present in AVL tree.
3) Do following for each element arr[i].
   a) Search for arr[i] + k in AVL tree, if found then increment count.
   b) Search for arr[i] - k in AVL tree, if found then increment count.
   c) Remove arr[i] from AVL tree. 
Time complexity of above solution is also O(nLogn) as search and delete operations take O(Logn) time for a self-balancing 
binary search tree.

OR

int countPairsWithDiffK(int arr[], int n, int k) 
{ 
    int count = 0;  // Initialize count 
  
    // Initialize empty hashmap. 
    bool hashmap[MAX] = {false}; 
  
    // Insert array elements to hashmap 
    for (int i = 0; i < n; i++) 
        hashmap[arr[i]] = true; 
  
    for (int i = 0; i < n; i++) 
    { 
        int x = arr[i]; 
        if (x - k >= 0 && hashmap[x - k]) 
            count++; 
        if (x + k < MAX && hashmap[x + k]) 
            count++; 
        hashmap[x] = false; 
    } 
    return count; 
}

OR

int countPairsWithDiffK(int arr[], int n, int k) 
{ 
    int count = 0; 
    sort(arr, arr+n);  // Sort array elements 
  
    int l = 0; 
    int r = 0; 
    while(r < n) 
    { 
         if(arr[r] - arr[l] == k) 
        { 
              count++; 
              l++; 
              r++; 
        } 
         else if(arr[r] - arr[l] > k) 
              l++; 
         else // arr[r] - arr[l] < sum 
              r++; 
    }    
    return count; 
} 
Time Complexity: O(nlogn)
