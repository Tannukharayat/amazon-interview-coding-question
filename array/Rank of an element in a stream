Given a stream of integers, lookup the rank of a given integer x. Rank of an integer in stream is “Total number of elements 
less than or equal to x (not including x)”.

If element is not found in stream or is smallest in stream, return -1.

struct Node { 
    int data; 
    Node *left, *right; 
    int leftSize; 
}; 
  
Node* newNode(int data) 
{ 
    Node *temp = new Node; 
    temp->data = data; 
    temp->left = temp->right = NULL; 
    temp->leftSize = 0; 
    return temp; 
} 
  
// Inserting a new Node. 
Node* insert(Node*& root, int data) 
{ 
    if (!root) 
        return newNode(data); 
  
    // Updating size of left subtree. 
    if (data <= root->data) { 
        root->left = insert(root->left, data); 
        root->leftSize++; 
    } 
    else
        root->right = insert(root->right, data); 
  
    return root; 
} 
  
// Function to get Rank of a Node x. 
int getRank(Node* root, int x) 
{ 
    // Step 1. 
    if (root->data == x) 
        return root->leftSize; 
  
    // Step 2. 
    if (x < root->data) { 
        if (!root->left) 
            return -1; 
        else
            return getRank(root->left, x); 
    } 
  
    // Step 3. 
    else { 
        if (!root->right) 
            return -1; 
        else { 
            int rightSize = getRank(root->right, x); 
            return root->leftSize + 1 + rightSize; 
        } 
    } 
} 
  
// Driver code 
int main() 
{ 
    int arr[] = { 5, 1, 4, 4, 5, 9, 7, 13, 3 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int x = 4; 
  
    Node* root = NULL; 
    for (int i = 0; i < n; i++) 
        root = insert(root, arr[i]); 
  
    cout << "Rank of " << x << " in stream is: " 
         << getRank(root, x) << endl; 
  
    x = 13; 
    cout << "Rank of " << x << " in stream is: "
         << getRank(root, x) << endl; 
  
    return 0; 
} 
OR
int main() 
{ 
    int a[] = {5, 1, 14, 4, 15, 9, 7, 20, 11}; 
    int key = 20; 
    int arraySize = sizeof(a)/sizeof(a[0]); 
    int count = 0; 
    for(int i = 0; i < arraySize; i++) 
    { 
        if(a[i] <= key) 
        { 
            count += 1; 
        } 
    } 
    cout << "Rank of " << key << " in stream is: " 
            << count-1 << endl; 
    return 0; 
} 
