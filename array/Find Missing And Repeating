Given an unsorted array of size n. Array elements are in the range from 1 to n. One number from set {1, 2, …n} is missing and 
one number occurs twice in the array. Find these two numbers.

Method 1 (Use Sorting)
Approach:

Sort the input array.
Traverse the array and check for missing and repeating.
Time Complexity: O(nLogn)

Thanks to LoneShadow for suggesting this method.

Method 2 (Use count array)
Approach:

Create a temp array temp[] of size n with all initial values as 0.
Traverse the input array arr[], and do following for each arr[i]
if(temp[arr[i]] == 0) temp[arr[i]] = 1;
if(temp[arr[i]] == 1) output “arr[i]” //repeating
Traverse temp[] and output the array element having value as 0 (This is the missing element)
Time Complexity: O(n)
Auxiliary Space: O(n)

Method 3 (Use elements as Index and mark the visited places)
Approach:
Traverse the array. While traversing, use the absolute value of every element as an index and make the value at this index as 
negative to mark it visited. If something is already marked negative then this is the repeating element. To find missing, 
traverse the array again and look for a positive value.

void printTwoElements(int arr[], int size) 
{ 
    int i; 
    cout << " The repeating element is "; 
  
    for (i = 0; i < size; i++) { 
        if (arr[abs(arr[i]) - 1] > 0) 
            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]; 
        else
            cout << abs(arr[i]) << "\n"; 
    } 
  
    cout << "and the missing element is "; 
    for (i = 0; i < size; i++) { 
        if (arr[i] > 0) 
            cout << (i + 1); 
    } 
} 

Time Complexity: O(n)

Method 4 (Make two equations)
Approach:



Let x be the missing and y be the repeating element.
Get the sum of all numbers using formula S = n(n+1)/2 – x + y
Get product of all numbers using formula P = 1*2*3*…*n * y / x
The above two steps give us two equations, we can solve the equations and get the values of x and y.
Time Complexity: O(n)

Thanks to disappearedng for suggesting this solution.

Note: This method can cause arithmetic overflow as we calculate product and sum of all array elements.

Method 5 (Use XOR)
Approach:

Let x and y be the desired output elements.
Calculate XOR of all the array elements.
xor1 = arr[0]^arr[1]^arr[2]…..arr[n-1]

XOR the result with all numbers from 1 to n
xor1 = xor1^1^2^…..^n

In the result xor1, all elements would nullify each other except x and y. All the bits that are set in xor1 will be set in 
either x or y. So if we take any set bit (We have chosen the rightmost set bit in code) of xor1 and divide the elements of 
the array in two sets – one set of elements with same bit set and other set with same bit not set. By doing so, we will get 
x in one set and y in another set. Now if we do XOR of all the elements in first set, we will get x, and by doing same in 
other set we will get y..
void getTwoElements(int arr[], int n, 
                    int* x, int* y) 
{ 
    /* Will hold xor of all elements  
    and numbers from 1 to n */
    int xor1; 
  
    /* Will have only single set bit of xor1 */
    int set_bit_no; 
  
    int i; 
    *x = 0; 
    *y = 0; 
  
    xor1 = arr[0]; 
  
    /* Get the xor of all array elements */
    for (i = 1; i < n; i++) 
        xor1 = xor1 ^ arr[i]; 
  
    /* XOR the previous result with numbers  
    from 1 to n*/
    for (i = 1; i <= n; i++) 
        xor1 = xor1 ^ i; 
  
    /* Get the rightmost set bit in set_bit_no */
    set_bit_no = xor1 & ~(xor1 - 1); 
  
    /* Now divide elements into two  
    sets by comparing a rightmost set 
    bit of xor1 with the bit at the same  
    position in each element. Also,  
    get XORs of two sets. The two 
    XORs are the output elements.  
    The following two for loops  
    serve the purpose */
    for (i = 0; i < n; i++) { 
        if (arr[i] & set_bit_no) 
            /* arr[i] belongs to first set */
            *x = *x ^ arr[i]; 
  
        else
            /* arr[i] belongs to second set*/
            *y = *y ^ arr[i]; 
    } 
    for (i = 1; i <= n; i++) { 
        if (i & set_bit_no) 
            /* i belongs to first set */
            *x = *x ^ i; 
  
        else
            /* i belongs to second set*/
            *y = *y ^ i; 
    } 
  
    /* *x and *y hold the desired 
        output elements */
} 

Time Complexity: O(n)
Method 6 (Use a Map)

Method 7 (Make two equations using sum and sum of squares)
Approach:

Let x be the missing and y be the repeating element.
Let N is the size of array.
Get the sum of all numbers using formula S = N(N+1)/2
Get product of all numbers using formula Sum_Sq = N(N+1)(2N+1)/6
Iterate through a loop from i=1….N
S -= A[i]
Sum_Sq -= (A[i]*A[i])
It will give two equations
x-y = S – (1)
x^2 – y^2 = Sum_sq
x+ y = (Sum_sq/S) – (2)

Time Complexity: O(n)

Below is the implementation of the above approach:
