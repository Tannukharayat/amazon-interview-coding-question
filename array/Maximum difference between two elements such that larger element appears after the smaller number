Given an array arr[] of integers, find out the maximum difference between any two elements such that larger element appears after the 
smaller number.
Examples :

Input : arr = {2, 3, 10, 6, 4, 8, 1}
Output : 8
Explanation : The maximum difference is between 10 and 2.

Input : arr = {7, 9, 5, 6, 3, 2}
Output : 2
Explanation : The maximum difference is between 9 and 7.

    int maxDiff(int arr[], int arr_size) 
{      
  int max_diff = arr[1] - arr[0]; 
  for (int i = 0; i < arr_size; i++) 
  { 
    for (int j = i+1; j < arr_size; j++) 
    {      
      if (arr[j] - arr[i] > max_diff)  
        max_diff = arr[j] - arr[i]; 
    }  
  }          
  return max_diff; 
}  

Time Complexity : O(n^2)
Auxiliary Space : O(1)

OR

int maxDiff(int arr[], int arr_size) 
{ 
     // Maximum difference found so far 
     int max_diff = arr[1] - arr[0]; 
       
     // Minimum number visited so far  
     int min_element = arr[0]; 
     for(int i = 1; i < arr_size; i++) 
     {      
       if (arr[i] - min_element > max_diff)                              
       max_diff = arr[i] - min_element; 
         
       if (arr[i] < min_element) 
       min_element = arr[i];                      
     } 
       
     return max_diff; 
}  

Time Complexity : O(n)
Auxiliary Space : O(1)

OR

int maxDiff(int arr[], int n) 
{ 
    // Initialize Result 
    int maxDiff = -1;  
      
    // Initialize max element from right side 
    int maxRight = arr[n-1];  
  
    for (int i = n-2; i >= 0; i--) 
    { 
        if (arr[i] > maxRight) 
            maxRight = arr[i]; 
        else
        { 
            int diff = maxRight - arr[i]; 
            if (diff > maxDiff) 
            { 
                maxDiff = diff; 
            } 
        } 
    } 
    return maxDiff; 
} 
 
 OR
 
 int maxDiff(int arr[], int n) 
{ 
    // Create a diff array of size n-1.  
    // The array will hold the difference  
    // of adjacent elements 
    int diff[n-1]; 
    for (int i=0; i < n-1; i++) 
        diff[i] = arr[i+1] - arr[i]; 
  
    // Now find the maximum sum  
    // subarray in diff array 
    int max_diff = diff[0]; 
    for (int i=1; i<n-1; i++) 
    { 
        if (diff[i-1] > 0) 
            diff[i] += diff[i-1]; 
        if (max_diff < diff[i]) 
            max_diff = diff[i]; 
    } 
    return max_diff; 
} 
Time Complexity : O(n)
Auxiliary Space : O(n)

OR

int maxDiff (int arr[], int n) 
{ 
    // Initialize diff, current sum and max sum 
    int diff = arr[1]-arr[0]; 
    int curr_sum = diff; 
    int max_sum = curr_sum; 
  
    for(int i=1; i<n-1; i++) 
    { 
        // Calculate current diff 
        diff = arr[i+1]-arr[i]; 
  
        // Calculate current sum 
        if (curr_sum > 0) 
        curr_sum += diff; 
        else
        curr_sum = diff; 
  
        // Update max sum, if needed 
        if (curr_sum > max_sum) 
        max_sum = curr_sum; 
    } 
  
    return max_sum; 
} 

Time Complexity : O(n)
Auxiliary Space : O(1)

