**Given two arrays of integers, write a program to check if a pair of values (one value from each array) exists such that 
swapping the elements of the pair will make the sum of two arrays equal.**

void findSwapValues(int A[], int n, int B[], int m) 
{ 
    // Calculation of sums from both arrays 
    int sum1 = getSum(A, n); 
    int sum2 = getSum(B, m); 
  
    // Look for val1 and val2, such that 
    // sumA - val1 + val2 = sumB - val2 + val1 
    int newsum1, newsum2, val1, val2; 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            newsum1 = sum1 - A[i] + B[j]; 
            newsum2 = sum2 - B[j] + A[i]; 
            if (newsum1 == newsum2) { 
                val1 = A[i]; 
                val2 = B[j]; 
            } 
        } 
    } 
  
    cout << val1 << "  " << val2; 
}
Time Complexity :- O(n*m)

OR

Sort the arrays.
Traverse both array simultaneously and do following for every pair.
If the difference is too small then, make it bigger by moving ‘a’ to a bigger value.
If it is too big then, make it smaller by moving b to a bigger value.
If it’s just right, return this pair.
void findSwapValues(int A[], int n, int B[], int m) 
{ 
    // Call for sorting the arrays 
    sort(A, A + n); 
    sort(B, B + m); 
  
    // Note that target can be negative 
    int target = getTarget(A, n, B, m); 
  
    // target 0 means, answer is not possible 
    if (target == 0) 
        return; 
  
    int i = 0, j = 0; 
    while (i < n && j < m) { 
        int diff = A[i] - B[j]; 
        if (diff == target) { 
            cout << A[i] << " " << B[j]; 
            return; 
        } 
  
        // Look for a greater value in A[] 
        else if (diff < target) 
            i++; 
  
        // Look for a greater value in B[] 
        else
            j++; 
    } 
} 

Time Complexity :-
If arrays are sorted : O(n + m)
If arrays aren’t sorted : O(nlog(n) + mlog(m))

OR

HASHING

int main() 
{
	int t;
	cin >> t ;
	while(t--)
	{
	    int n , m , sum= 0 , sum1 = 0 , sum2 = 0;
	    cin >> n >> m ;
	    int a1[n],a2[m];
	   map<long long int,int> h2;
	    for(int i = 0 ; i < n ; i++)
	    {
	        cin >> a1[i];
	        sum1+=a1[i];
	    }
	    for(int i = 0 ; i < m ; i++)
	    {
	        cin >> a2[i];
	       sum2+=a2[i];
	        h2[a2[i]]++;
	    }
	    if((sum1+sum2)%2!=0)
	    {
	        cout<<"-1"<<endl;
	        continue;
	    }
	     sum=(sum1+sum2)/2;
	    int found = sum-sum1, ans = -1;
	    //cout<<sum<<" "<<sum1<<" "<<found<<endl;
	   
	    for(int i = 0 ; i < n ; i++)
	    {
	        //cout<<a1[i]+found<<" ";
	        if(h2[a1[i]+found]>=1)
	        {
	            ans = 1;
	            break;
	        }
	    }cout<<ans << endl;
	}
	return 0;
}
