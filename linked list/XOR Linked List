**An ordinary Doubly Linked List requires space for two address fields to store the addresses of previous and next nodes. A memory 
efficient version of Doubly Linked List can be created using only one space for address field with every node. This memory efficient Doubly
Linked List is called XOR Linked List or Memory Efficient as the list uses bit-wise XOR operation to save space for one address.
Given stream of data of size N for the linked list, your task is to complete the function insert() and printList(). The insert() function 
pushes (or inserts at beginning) the given data in the linked list and the printList() function prints the linked list first in forward 
direction and then in backward direction.
Note: There is an utility function XOR() that takes two Node pointer to get the bit-wise XOR of the two Node pointer. Use this function to 
get the XOR of the two pointers.**


        void insert(struct Node **head_ref, int data)
        {
          struct Node *nw_node=new Node(data);
            nw_node->npx = XOR((*head_ref),NULL);
          if((*head_ref)!=NULL)
            {
                struct Node *next=XOR((*head_ref)->npx,NULL);
                (*head_ref)->npx=XOR(nw_node,next);
            }

          (*head_ref)=nw_node;
        }

        void printList (struct Node *head)
        {
          struct Node *prev=NULL, *tmp=head;
          while(tmp!=NULL)
          {
              Node *next=XOR(prev,tmp->npx);
              cout<<tmp->data<<" ";
              prev=tmp;
              tmp=next;
          }
          tmp=prev;
          prev=NULL;
          cout<<endl;
          while(tmp!=NULL)
          {
               Node *next=XOR(prev,tmp->npx);
              cout<<tmp->data<<" ";
              prev=tmp;
              tmp=next;
          }
        }


