Given two sorted linked lists, construct a linked list that contains maximum sum path from start to end. The result list may contain nodes from both input lists. When constructing the result list, we may switch to the other input list only at the point of intersection (which mean the two node with the same value in the lists). You are allowed to use O(1) extra space.

Input:
List1 =  1->3->30->90->120->240->511
List2 =  0->3->12->32->90->125->240->249

Output: Following is maximum sum linked list out of two input lists
list =  1->3->12->32->90->125->240->511
we switch at 3 and 240 to get above maximum sum linked list

  void finalMaxSumList(Node *a, Node *b) 
{ 
    Node *result = NULL; 
  
    // Assigning pre and cur to the head of the 
    // linked list. 
    Node *pre1 = a, *curr1 = a; 
    Node *pre2 = b, *curr2 = b; 
  
    // Till either of the current pointers is not 
    // NULL execute the loop 
    while (curr1 != NULL || curr2 != NULL) 
    { 
        // Keeping 2 local variables at the start of every 
        // loop run to keep track of the sum between pre 
        // and cur pointer elements. 
        int sum1 = 0, sum2 = 0; 
  
        // Calculating sum by traversing the nodes of linked 
        // list as the merging of two linked list.  The loop 
        // stops at a common node 
        while (curr1!=NULL && curr2!=NULL && curr1->data!=curr2->data) 
        { 
            if (curr1->data < curr2->data) 
            { 
                sum1 += curr1->data; 
                curr1 = curr1->next; 
            } 
            else // (curr2->data < curr1->data) 
            { 
                sum2 += curr2->data; 
                curr2 = curr2->next; 
            } 
        } 
  
        // If either of current pointers becomes NULL 
        // carry on the sum calculation for other one. 
        if (curr1 == NULL) 
        { 
            while (curr2 != NULL) 
            { 
                sum2 += curr2->data; 
                curr2 = curr2->next; 
            } 
        } 
        if (curr2 == NULL) 
        { 
            while (curr1 != NULL) 
            { 
                sum1 += curr1->data; 
                curr1 = curr1->next; 
            } 
        } 
  
        // First time adjustment of resultant head based on 
        // the maximum sum. 
        if (pre1 == a && pre2 == b) 
            result = (sum1 > sum2)? pre1 : pre2; 
  
        // If pre1 and pre2 don't contain the head pointers of 
        // lists adjust the next pointers of previous pointers. 
        else
        { 
            if (sum1 > sum2) 
                pre2->next = pre1->next; 
            else
                pre1->next = pre2->next; 
        } 
  
        // Adjusting previous pointers 
        pre1 = curr1, pre2 = curr2; 
  
        // If curr1 is not NULL move to the next. 
        if (curr1) 
            curr1 = curr1->next; 
        // If curr2 is not NULL move to the next. 
        if (curr2) 
            curr2 = curr2->next; 
    } 
  
    // Print the resultant list. 
    while (result != NULL) 
    { 
        cout << result->data << " "; 
        result = result->next; 
    } 
} 

Time complexity: O(n) where n is the length of bigger linked list
Auxiliary space: O(1)
