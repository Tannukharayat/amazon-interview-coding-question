**Given a singly linked list of size N of integers. The task is to check if the given linked list is palindrome or not.**

            int pal(Node *&h , Node *e, int &ans)
            {
                if(e==NULL)
                return 1;
                int x = pal(h,e->next,ans);
                if(h->data==e->data&&ans==0)
                {
                    h=h->next;
                    return 1;
                }else 
                {
                    h=h->next;
                    ans = 1 ;
                    return 0;
                }
                return x;
            }
            bool isPalindrome(Node *head)
            {
                int ans = 0;
               return pal(head,head,ans);
            }
            OR
                      bool isPalin(Node* head)
                      { 

                    // Temp pointer  
                    Node* slow= head; 

                    // Declare a stack  
                    stack <int> s; 


                    // Push all elements of the list  
                    // to the stack  
                    while(slow != NULL){ 
                            s.push(slow->data); 

                            // Move ahead  
                            slow = slow->ptr; 
                    } 

                    // Iterate in the list again and  
                    // check by popping from the stack 
                    while(head != NULL ){ 

                        // Get the top most element  
                         int i=s.top(); 

                         // Pop the element  
                         s.pop(); 

                         // Check if data is not 
                         // same as popped element  
                        if(head -> data != i){ 
                            return false; 
                        } 

                        // Move ahead  
                       head=head->ptr; 
                    } 

            return true; 
            } 
            
            The time complexity of the above method is O(n).
            
            OR
            bool isPalindrome(struct Node* head) 
{ 
    struct Node *slow_ptr = head, *fast_ptr = head; 
    struct Node *second_half, *prev_of_slow_ptr = head; 
    struct Node* midnode = NULL; // To handle odd size list 
    bool res = true; // initialize result 
  
    if (head != NULL && head->next != NULL) { 
        /* Get the middle of the list. Move slow_ptr by 1 
          and fast_ptrr by 2, slow_ptr will have the middle 
          node */
        while (fast_ptr != NULL && fast_ptr->next != NULL) { 
            fast_ptr = fast_ptr->next->next; 
  
            /*We need previous of the slow_ptr for 
             linked lists  with odd elements */
            prev_of_slow_ptr = slow_ptr; 
            slow_ptr = slow_ptr->next; 
        } 
  
        /* fast_ptr would become NULL when there are even elements in list.  
           And not NULL for odd elements. We need to skip the middle node  
           for odd case and store it somewhere so that we can restore the 
           original list*/
        if (fast_ptr != NULL) { 
            midnode = slow_ptr; 
            slow_ptr = slow_ptr->next; 
        } 
  
        // Now reverse the second half and compare it with first half 
        second_half = slow_ptr; 
        prev_of_slow_ptr->next = NULL; // NULL terminate first half 
        reverse(&second_half); // Reverse the second half 
        res = compareLists(head, second_half); // compare 
  
        /* Construct the original list back */
        reverse(&second_half); // Reverse the second half again 
  
        // If there was a mid node (odd size case) which 
        // was not part of either first half or second half. 
        if (midnode != NULL) { 
            prev_of_slow_ptr->next = midnode; 
            midnode->next = second_half; 
        } 
        else
            prev_of_slow_ptr->next = second_half; 
    } 
    return res; 
} 

This method takes O(n) time and O(1) extra space.

OR
bool isPalindromeUtil(struct node** left, struct node* right) 
{ 
    /* stop recursion when right becomes NULL */
    if (right == NULL) 
        return true; 
  
    /* If sub-list is not palindrome then no need to 
    check for current left and right, return false */
    bool isp = isPalindromeUtil(left, right->next); 
    if (isp == false) 
        return false; 
  
    /* Check values at current left and right */
    bool isp1 = (right->data == (*left)->data); 
  
    /* Move left to next node */
    *left = (*left)->next; 
  
    return isp1; 
} 
  
// A wrapper over isPalindromeUtil() 
bool isPalindrome(struct node* head) 
{ 
    isPalindromeUtil(&head, head); 
} 
Time Complexity: O(n)
Auxiliary Space: O(n) if Function Call Stack size is considered, otherwise O(1).


