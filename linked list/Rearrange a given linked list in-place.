Given a singly linked list L0 -> L1 -> … -> Ln-1 -> Ln. Rearrange the nodes in the list so that the new formed list is : L0 ->
Ln -> L1 -> Ln-1 -> L2 -> Ln-2 …

    1) Initialize current node as head.
    2) While next of current node is not null, do following
        a) Find the last node, remove it from the end and insert it as next
           of the current node.
        b) Move current to next to next of current
    Time complexity of the above simple solution is O(n2) where n is the number of nodes in the linked list.
    Better Solution
    1) Copy contents of given linked list to a vector.
    2) Rearrange given vector by swapping nodes from both ends.
    3) Copy the modified vector back to the linked list.
    Efficient Solution:1) Find the middle point using tortoise and hare method.
    2) Split the linked list into two halves using found middle point in step 1.
    3) Reverse the second half.
    4) Do alternate merge of first and second halves. 
    Time Complexity: O(n)
    Auxiliary Space: O(1)
    Another Approach: ( Using recursion )
        1. Hold a pointer to the head node and go till the last node using recursion
        2. Once last node is reached, start swapping the last node to the next of head node
        3. Move the head pointer to the next node
        4. Repeat this until the head and last node meet or come adjacent to each other

    void rearrange(struct Node** head, struct Node* last) 
    { 

        if (!last) 
            return; 

        // Recursive call 
        rearrange(head, last->next); 

        // (*head)->next will be set to NULL 
        // after rearrangement. 
        // Need not do any operation further 
        // Just return here to come out of recursion 
        if (!(*head)->next) 
            return; 

        // Rearrange the list until both head 
        // and last meet or next to each other. 
        if ((*head) != last && (*head)->next != last) { 
            struct Node* tmp = (*head)->next; 
            (*head)->next = last; 
            last->next = tmp; 
            *head = tmp; 
        } 
        else { 
            if ((*head) != last) 
                *head = (*head)->next; 
            (*head)->next = NULL; 
        } 
    } 

    Method
    1) Create an empty deque
    2) Insert all element from the linked list to the deque
    3) Insert the element back to the linked list from deque in alternate fashion i.e first then last and so on
    void arrange(struct Node* head) 
    { 
        struct Node* temp = head; 
        deque<int> d; // defining a deque 

        // push all the elements of linked list in to deque 
        while (temp != NULL) { 
            d.push_back(temp->data); 
            temp = temp->next; 
        } 

        // Alternatively push the first and last elements 
        // from deque to back to the linked list and pop 
        int i = 0; 
        temp = head; 
        while (!d.empty()) { 
            if (i % 2 == 0) { 
                temp->data = d.front(); 
                d.pop_front(); 
            } 
            else { 
                temp->data = d.back();  
                d.pop_back();  
            } 
            i++; 
            temp = temp->next; // increase temp 
        } 
    } 

