**Given K sorted linked lists of size N each, merge them and print the sorted output.

Example:

Input: k = 3, n =  4
list1 = 1->3->5->7->NULL
list2 = 2->4->6->8->NULL
list3 = 0->9->10->11->NULL

Output: 
0->1->2->3->4->5->6->7->8->9->10->11**

  Method 1 (Simple)
A Simple Solution is to initialize result as first list. Now traverse all lists starting from second list. Insert every node of
currently traversed list into result in a sorted way. Time complexity of this solution is O(N2) where N is total number of nodes
, i.e., N = kn.



 
Method 2 (Using Min Heap)
A Better solution is to use Min Heap based solution which is discussed here for arrays. Time complexity of this solution would 
be O(nk Log k)
Time Complexity: O(nk Logk)
Auxiliary Space: O(k)

Method 3 (Using Divide and Conquer))
  Node* SortedMerge(Node* a, Node* b) 
    { 
        Node* result = NULL; 

        /* Base cases */
        if (a == NULL) 
            return (b); 
        else if(b == NULL) 
            return (a); 

        /* Pick either a or b, and recur */
        if(a->data <= b->data) 
        { 
            result = a; 
            result->next = SortedMerge(a->next, b); 
        } 
        else
        { 
            result = b; 
            result->next = SortedMerge(a, b->next); 
        } 

        return result; 
    } 

    // The main function that takes an array of lists 
    // arr[0..last] and generates the sorted output 
    Node* mergeKLists(Node* arr[], int last) 
    { 
        // repeat until only one list is left 
        while (last != 0) 
        { 
            int i = 0, j = last; 

            // (i, j) forms a pair 
            while (i < j) 
            { 
                // merge List i with List j and store 
                // merged list in List i 
                arr[i] = SortedMerge(arr[i], arr[j]); 

                // consider next pair 
                i++, j--; 

                // If all pairs are merged, update last 
                if (i >= j) 
                    last = j; 
            } 
        } 

        return arr[0]; 
    } 
    Time Complexity of above algorithm is O(nk logk) as outer while loop in function mergeKLists() runs log k times and every
    time we are processing nk elements.
    
    
