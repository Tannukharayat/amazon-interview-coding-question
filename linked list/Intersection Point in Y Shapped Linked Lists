**There are two singly linked lists of size N and M in a system. But, due to some programming error the end node of one of the linked list
got linked into one of the node of second list, forming a inverted Y shaped list. Write a program to get the point where two linked lists 
intersect each other ****

      Method 1(Simply use two loops)
      Use 2 nested for loops. The outer loop will be for each node of the 1st list and inner loop will be for 2nd list. In int getIntesectionNode(Node* head1, Node* head2) 
{ 
  
    // Count the number of nodes in 
    // both the linked list 
    int c1 = getCount(head1); 
    int c2 = getCount(head2); 
    int d; 
  
    // If first is greater 
    if (c1 > c2) { 
        d = c1 - c2; 
        return _getIntesectionNode(d, head1, head2); 
    } 
    else { 
        d = c2 - c1; 
        return _getIntesectionNode(d, head2, head1); 
    } 
} 
  
/* function to get the intersection point of two linked  
lists head1 and head2 where head1 has d more nodes than  
head2 */
int _getIntesectionNode(int d, Node* head1, Node* head2) 
{ 
    // Stand at the starting of the bigger list 
    Node* current1 = head1; 
    Node* current2 = head2; 
  
    // Move the pointer forward 
    for (int i = 0; i < d; i++) { 
        if (current1 == NULL) { 
            return -1; 
        } 
        current1 = current1->next; 
    } 
  
    // Move both pointers of both list till they 
    // intersect with each other 
    while (current1 != NULL && current2 != NULL) { 
        if (current1 == current2) 
            return current1->data; 
  
        // Move both the pointers forward 
        current1 = current1->next; 
        current2 = current2->next; 
    } 
  
    return -1; 
} 
  
/* Takes head pointer of the linked list and  
returns the count of nodes in the list */
int getCount(Node* head) 
{ 
    Node* current = head; 
  
    // Counter to store count of nodes 
    int count = 0; 
  
    // Iterate till NULL 
    while (current != NULL) { 
  
        // Increase the counter 
        count++; 
  
        // Move the Node ahead 
        current = current->next; 
    } 
  
    return count; 
} 
  
// Driver Code 
int main() 
{ 
    /*  
        Create two linked lists  
      
        1st 3->6->9->15->30  
        2nd 10->15->30  
      
        15 is the intersection point  
    */
  
    Node* newNode; 
  
    // Addition of new nodes 
    Node* head1 = new Node(); 
    head1->data = 10; 
  
    Node* head2 = new Node(); 
    head2->data = 3; 
  
    newNode = new Node(); 
    newNode->data = 6; 
    head2->next = newNode; 
  
    newNode = new Node(); 
    newNode->data = 9; 
    head2->next->next = newNode; 
  
    newNode = new Node(); 
    newNode->data = 15; 
    head1->next = newNode; 
    head2->next->next->next = newNode; 
  
    newNode = new Node(); 
    newNode->data = 30; 
    head1->next->next = newNode; 
  
    head1->next->next->next = NULL; 
  
    cout << "The node of intersection is " << getIntesectionNode(head1, head2); 
} 
Time Complexity: O(m+n)
Auxiliary Space: O(1)
OR

      the inner loop, check if any of nodes of the 2nd list is same as the current node of the first linked list. The time complexity of this method will be O(M * N) where m and n are the numbers of nodes in two lists.


      OR
      
      
      int intersectPoint(Node* head1, Node* head2)
      {
          Node* temp1 = head1;
          Node* temp2 = head2;
          while(temp1 != temp2)
          {
              if(temp1==NULL)
              temp1=head2;
              else temp1=temp1->next;

              if(temp2==NULL)
              temp2=head1;
              else temp2=temp2->next;
          }
         return temp1->data;
      }

