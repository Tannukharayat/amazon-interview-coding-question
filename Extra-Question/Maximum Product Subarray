Given an array that contains both positive and negative integers, find the product of the 
maximum product subarray. Expected Time complexity is O(n) and only O(1) extra space can be used
.

Examples:

Input: arr[] = {6, -3, -10, 0, 2}
Output:   180  // The subarray is {6, -3, -10}

Input: arr[] = {-1, -3, -10, 0, 60}
Output:   60  // The subarray is {60}

Input: arr[] = {-2, -3, 0, -2, -40}
Output:   80  // The subarray is {-2, -40}

  
    // C++ program to find Maximum Product Subarray 
#include <bits/stdc++.h> 
using namespace std; 

/* Returns the product of max product subarray. 
Assumes that the given array always has a subarray 
with product more than 1 */
int maxSubarrayProduct(int arr[], int n) 
{ 
	// max positive product ending at the current position 
	int max_ending_here = 1; 

	// min negative product ending at the current position 
	int min_ending_here = 1; 

	// Initialize overall max product 
	int max_so_far = 1; 
	int flag = 0; 
	/* Traverse through the array. Following values are 
	maintained after the i'th iteration: 
	max_ending_here is always 1 or some positive product 
					ending with arr[i] 
	min_ending_here is always 1 or some negative product 
					ending with arr[i] */
	for (int i = 0; i < n; i++) { 
		/* If this element is positive, update max_ending_here. 
		Update min_ending_here only if min_ending_here is 
		negative */
		if (arr[i] > 0) { 
			max_ending_here = max_ending_here * arr[i]; 
			min_ending_here = min(min_ending_here * arr[i], 1); 
			flag = 1; 
		} 

		/* If this element is 0, then the maximum product 
		cannot end here, make both max_ending_here and 
		min_ending_here 0 
		Assumption: Output is alway greater than or equal 
					to 1. */
		else if (arr[i] == 0) { 
			max_ending_here = 1; 
			min_ending_here = 1; 
		} 

		
	/* If element is negative. This is tricky 
		max_ending_here can either be 1 or positive. 
		min_ending_here can either be 1 or negative. 
		next max_ending_here will always be prev. 
		min_ending_here * arr[i] ,next min_ending_here 
		will be 1 if prev max_ending_here is 1, otherwise 
		next min_ending_here will be prev max_ending_here * 
		arr[i] */

		else { 
			int temp = max_ending_here; 
			max_ending_here = max(min_ending_here * arr[i], 1); 
			min_ending_here = temp * arr[i]; 
		} 

		// update max_so_far, if needed 
		if (max_so_far < max_ending_here) 
			max_so_far = max_ending_here; 
	} 
	if (flag == 0 && max_so_far == 1) 
		return 0; 
	return max_so_far; 
} 

// Driver code 
int main() 
{ 
	int arr[] = { 1, -2, -3, 0, 7, -8, -2 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	cout << "Maximum Sub array product is "
		<< maxSubarrayProduct(arr, n); 
	return 0; 
} 

// This is code is contributed by rathbhupendra 

Time Complexity: O(n)
Auxiliary Space: O(1)
 // for negative and 0 result
 
 // C++ program to find maximum subarray product. 
#include <bits/stdc++.h> 

using namespace std; 

// Function to find maximum subarray product. 
int findMaxProduct(int arr[], int n) 
{ 
	int i; 

	// As maximum product can be negative, so 
	// initialize ans with minimum integer value. 
	int ans = INT_MIN; 

	// Variable to store maximum product until 
	// current value. 
	int maxval = 1; 

	// Variable to store minimum product until 
	// current value. 
	int minval = 1; 

	// Variable used during updation of maximum 
	// product and minimum product. 
	int prevMax; 

	for (i = 0; i < n; i++) { 

		// If current element is positive, update 
		// maxval. Update minval if it is 
		// negative. 
		if (arr[i] > 0) { 
			maxval = maxval * arr[i]; 
			minval = min(1, minval * arr[i]); 
		} 

		// If current element is zero, maximum 
		// product cannot end at current element. 
		// Update minval with 1 and maxval with 0. 
		// maxval is updated to 0 as in case all 
		// other elements are negative, then maxval 
		// is 0. 
		else if (arr[i] == 0) { 
			minval = 1; 
			maxval = 0; 
		} 

		// If current element is negative, then new 
		// value of maxval is previous minval*arr[i] 
		// and new value of minval is previous 
		// maxval*arr[i]. Before updating maxval, 
		// store its previous value in prevMax to 
		// be used to update minval. 
		else if (arr[i] < 0) { 
			prevMax = maxval; 
			maxval = minval * arr[i]; 
			minval = prevMax * arr[i]; 
		} 

		// Update ans if necessary. 
		ans = max(ans, maxval); 

		// If maxval is zero, then to calculate 
		// product for next iteration, it should 
		// be set to 1 as maximum product 
		// subarray does not include 0. 
		// The minimum possible value 
		// to be considered in maximum product 
		// subarray is already stored in minval, 
		// so when maxval is negative it is set to 1. 
		if (maxval <= 0) { 
			maxval = 1; 
		} 
	} 

	return ans; 
} 

int main() 
{ 
	int arr[] = { 0, -4, 0, -2 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	cout << findMaxProduct(arr, n); 
	return 0; 
} 

// C++ program to find maximum product subarray 
#include <bits/stdc++.h> 
using namespace std; 

// Function to find maximum product subarray 
int maxProduct(int* arr, int n) 
{ 
	// Variables to store maximum and minimum 
	// product till ith index. 
	int minVal = arr[0]; 
	int maxVal = arr[0]; 

	int maxProduct = arr[0]; 

	for (int i = 1; i < n; i++) { 

		// When multiplied by -ve number, 
		// maxVal becomes minVal 
		// and minVal becomes maxVal. 
		if (arr[i] < 0) 
			swap(maxVal, minVal); 

		// maxVal and minVal stores the 
		// product of subarray ending at arr[i]. 
		maxVal = max(arr[i], maxVal * arr[i]); 
		minVal = min(arr[i], minVal * arr[i]); 

		// Max Product of array. 
		maxProduct = max(maxProduct, maxVal); 
	} 

	// Return maximum product found in array. 
	return maxProduct; 
} 

// Driver Code 
int main() 
{ 
	int arr[] = { -1, -3, -10, 0, 60 }; 

	int n = sizeof(arr) / sizeof(arr[0]); 

	cout << "Maximum Subarray product is "
		<< maxProduct(arr, n) << endl; 

	return 0; 
} 


