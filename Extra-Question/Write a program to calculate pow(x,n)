Given two integers x and n, write a function to compute xn. We may assume that x and n are small and overflow doesnâ€™t happen.

    Examples :

Input : x = 2, n = 3
Output : 8

Input : x = 7, n = 2
Output : 49

    int power(int x, unsigned int y) 
{ 
    if (y == 0) 
        return 1; 
    else if (y % 2 == 0) 
        return power(x, y / 2) * power(x, y / 2); 
    else
        return x * power(x, y / 2) * power(x, y / 2); 
} 
}; 
  
/* Driver code */
int main() 
{ 
    gfg g; 
    int x = 2; 
    unsigned int y = 3; 
  
    cout << g.power(x, y); 
    return 0; 
} 

Time Complexity: O(n)
Space Complexity: O(1)

OR

int power(int x, unsigned int y) 
{ 
    int temp; 
    if( y == 0) 
        return 1; 
    temp = power(x, y/2); 
    if (y%2 == 0) 
        return temp*temp; 
    else
        return x*temp*temp; 
} 
Time Complexity of optimized solution: O(logn)

OR


float power(float x, int y)  
{  
    float temp;  
    if(y == 0)  
        return 1;  
    temp = power(x, y / 2);  
    if (y % 2 == 0)  
        return temp * temp;  
    else
    {  
        if(y > 0)  
            return x * temp * temp;  
        else
            return (temp * temp) / x;  
    }  
}  
  
// Driver Code 
int main()  
{  
    float x = 2;  
    int y = -3;  
    cout << power(x, y);  
    return 0;  
}  

OR

int power(int x, unsigned int y) 
{ 
    int res = 1; // Initialize result 
  
    while (y > 0) { 
        // If y is odd, multiply x with result 
        if (y & 1) 
            res = res * x; 
  
        // n must be even now 
        y = y >> 1; // y = y/2 
        x = x * x; // Change x to x^2 
    } 
    return res; 
} 
  
// Driver program to test above functions 
int main() 
{ 
    int x = 3; 
    unsigned int y = 5; 
  
    printf("Power is %d", power(x, y)); 
  
    return 0; 
}
