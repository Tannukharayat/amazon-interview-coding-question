Given a number n, create an array of size 2n such that the array contains 2 instances of every number from 1 to n, and the number of element
s between two instances of a number i is equal to i. If such a configuration is not possible, then print the same.

Examples:

Input: n = 3
Output: res[] = {3, 1, 2, 1, 3, 2}

Input: n = 2
Output: Not Possible

Input: n = 4
Output: res[] = {4, 1, 3, 1, 2, 4, 3, 2}

    
    bool fillUtil(int res[], int curr, int n)  
      {  
          // If current number becomes 0,  
          // then all numbers are filled  
          if (curr == 0)  
          return true;  

          // Try placing two instances of 'curr' at  
          // all possible locations till solution is found  
          int i;  
          for (i = 0; i < 2 * n - curr - 1; i++)  
          {  
              // Two 'curr' should be placed at  
              // 'curr+1' distance  
              if (res[i] == 0 && res[i + curr + 1] == 0)  
              {  

                  // Plave two instances of 'curr'  
                  res[i] = res[i + curr + 1] = curr;  

                  // Recur to check if the above placement  
                  // leads to a solution  
                  if (fillUtil(res, curr - 1, n))  
                      return true;  

                  // If solution is not possible,  
                  // then backtrack  
                  res[i] = res[i + curr + 1] = 0;  
              }  
          }  
          return false;  
      }  

      // This function prints the result for 
      // input number 'n' using fillUtil()  
      void fill(int n)  
      {  
          // Create an array of size 2n and 
          // initialize all elements in it as 0  
          int res[2 * n], i;  
          for (i = 0; i < 2 * n; i++)  
          res[i] = 0;  

          // If solution is possible,  
          // then print it.  
          if (fillUtil(res, n, n))  
          {  
              for (i = 0; i < 2 * n; i++)  
              cout << res[i] << " ";  
          }  
          else
              cout << "Not Possible";  
      }  

      // Driver Code 
      int main()  
      {  
          fill(7);  
          return 0;  
      }  

      // This code is contributed 
      // by SHUBHAMSINGH8410 

      Output:
      7 3 6 2 5 3 2 4 7 6 5 1 4 1
