Given two integers ‘n’ and ‘m’, find all the stepping numbers in range [n, m]. A number is called stepping number if all adjacent digits
have an absolute difference of 1. 321 is a Stepping Number while 421 is not.

Examples :

Input : n = 0, m = 21
Output : 0 1 2 3 4 5 6 7 8 9 10 12 21

Input : n = 10, m = 15
Output : 10, 12


    bool isStepNum(int n) 
{ 
    // Initalize prevDigit with -1 
    int prevDigit = -1; 
  
    // Iterate through all digits of n and compare difference 
    // between value of previous and current digits 
    while (n) 
    { 
        // Get Current digit 
        int curDigit = n % 10; 
  
        // Single digit is consider as a 
        // Stepping Number 
        if (prevDigit == -1) 
            prevDigit = curDigit; 
        else
        { 
            // Check if absolute difference between 
            // prev digit and current digit is 1 
            if (abs(prevDigit - curDigit) != 1) 
                 return false; 
        } 
        prevDigit = curDigit; 
        n /= 10; 
    } 
  
    return true; 
} 
  
// A brute force approach based function to find all 
// stepping numbers. 
void displaySteppingNumbers(int n, int m) 
{ 
    // Iterate through all the numbers from [N,M] 
    // and check if it’s a stepping number. 
    for (int i=n; i<=m; i++) 
        if (isStepNum(i)) 
            cout << i << " "; 
} 
  
// Driver program to test above function 
int main() 
{ 
    int n = 0, m = 21; 
  
    // Display Stepping Numbers in 
    // the range [n, m] 
    displaySteppingNumbers(n, m); 
  
    return 0; 
} 

Method 2: Using BFS/DFS

void bfs(int n, int m, int num) 
{ 
    // Queue will contain all the stepping Numbers 
    queue<int> q; 
  
    q.push(num); 
  
    while (!q.empty()) 
    { 
        // Get the front element and pop from the queue 
        int stepNum = q.front(); 
        q.pop(); 
  
        // If the Stepping Number is in the range 
        // [n, m] then display 
        if (stepNum <= m && stepNum >= n) 
            cout << stepNum << " "; 
  
        // If Stepping Number is 0 or greater than m, 
        // need to explore the neighbors 
        if (num == 0 || stepNum > m) 
            continue; 
  
        // Get the last digit of the currently visited 
        // Stepping Number 
        int lastDigit = stepNum % 10; 
  
        // There can be 2 cases either digit to be 
        // appended is lastDigit + 1 or lastDigit - 1 
        int stepNumA = stepNum * 10 + (lastDigit- 1); 
        int stepNumB = stepNum * 10 + (lastDigit + 1); 
  
        // If lastDigit is 0 then only possible digit 
        // after 0 can be 1 for a Stepping Number 
        if (lastDigit == 0) 
            q.push(stepNumB); 
  
        //If lastDigit is 9 then only possible 
        //digit after 9 can be 8 for a Stepping 
        //Number 
        else if (lastDigit == 9) 
            q.push(stepNumA); 
  
        else
        { 
            q.push(stepNumA); 
            q.push(stepNumB); 
        } 
    } 
} 
  
// Prints all stepping numbers in range [n, m] 
// using BFS. 
void displaySteppingNumbers(int n, int m) 
{ 
    // For every single digit Number 'i' 
    // find all the Stepping Numbers 
    // starting with i 
    for (int i = 0 ; i <= 9 ; i++) 
        bfs(n, m, i); 
} 
  
//Driver program to test above function 
int main() 
{ 
    int n = 0, m = 21; 
  
    // Display Stepping Numbers in the 
    // range [n,m] 
    displaySteppingNumbers(n,m); 
  
    return 0; 
}

DFS based Solution

void dfs(int n, int m, int stepNum) 
{ 
    // If Stepping Number is in the 
    // range [n,m] then display 
    if (stepNum <= m && stepNum >= n) 
        cout << stepNum << " "; 
  
    // If Stepping Number is 0 or greater 
    // than m, then return 
    if (stepNum == 0 || stepNum > m) 
        return ; 
  
    // Get the last digit of the currently 
    // visited Stepping Number 
    int lastDigit = stepNum % 10; 
  
    // There can be 2 cases either digit 
    // to be appended is lastDigit + 1 or 
    // lastDigit - 1 
    int stepNumA = stepNum*10 + (lastDigit-1); 
    int stepNumB = stepNum*10 + (lastDigit+1); 
  
    // If lastDigit is 0 then only possible 
    // digit after 0 can be 1 for a Stepping 
    // Number 
    if (lastDigit == 0) 
        dfs(n, m, stepNumB); 
  
    // If lastDigit is 9 then only possible 
    // digit after 9 can be 8 for a Stepping 
    // Number 
    else if(lastDigit == 9) 
        dfs(n, m, stepNumA); 
    else
    { 
        dfs(n, m, stepNumA); 
        dfs(n, m, stepNumB); 
    } 
} 
  
// Method displays all the stepping 
// numbers in range [n, m] 
void displaySteppingNumbers(int n, int m) 
{ 
    // For every single digit Number 'i' 
    // find all the Stepping Numbers 
    // starting with i 
    for (int i = 0 ; i <= 9 ; i++) 
        dfs(n, m, i); 
} 
  
//Driver program to test above function 
int main() 
{ 
    int n = 0, m = 21; 
  
    // Display Stepping Numbers in 
    // the range [n,m] 
    displaySteppingNumbers(n,m); 
    return 0; 
} 
