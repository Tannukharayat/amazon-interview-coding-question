Given a Linked List, write a function that accepts the head node of the linked list as a parameter and returns the value of node present at
(floor(sqrt(n)))th position in the Linked List, where n is the length of the linked list or the total number of nodes in the list.
Examples:

Input: 1->2->3->4->5->NULL
Output: 2

Input : 10->20->30->40->NULL
Output : 20

Input : 10->20->30->40->50->60->70->80->90->NULL
Output : 30


    int printsqrtn(Node* head)  
{  
    Node* sqrtn = NULL;  
    int i = 1, j = 1;  
      
    // Traverse the list  
    while (head!=NULL)  
    {  
        // check if j = sqrt(i)  
        if (i == j*j)  
        {  
            // for first node  
            if (sqrtn == NULL)  
                sqrtn = head;  
            else
                sqrtn = sqrtn->next;  
              
            // increment j if j = sqrt(i)  
            j++;  
        }  
        i++;  
          
        head=head->next;  
    }  
      
    // return node's data  
    return sqrtn->data;  
}  
  
void print(Node* head)  
{  
    while (head != NULL)  
    {  
        cout << head->data << " ";  
        head = head->next;  
    }  
    cout<<endl;  
}  
  
// function to add a new node at the  
// beginning of the list  
void push(Node** head_ref, int new_data)  
{  
    // allocate node  
    Node* new_node = new Node(); 
      
    // put in the data  
    new_node->data = new_data;  
      
    // link the old list off the new node  
    new_node->next = (*head_ref);  
      
    // move the head to point to the new node  
    (*head_ref) = new_node;  
}  
  
/* Driver program to test above function*/
int main()  
{  
    /* Start with the empty list */
    Node* head = NULL;  
    push(&head, 40);  
    push(&head, 30);  
    push(&head, 20);  
    push(&head, 10);  
    cout << "Given linked list is:";  
    print(head);  
    cout << "sqrt(n)th node is " << printsqrtn(head);  
      
    return 0;  
}  
  
  
