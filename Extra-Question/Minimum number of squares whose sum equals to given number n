A number can always be represented as a sum of squares of other numbers. Note that 1 is a square and we can always break a number as (1*1 \
+ 1*1 + 1*1 + â€¦). Given a number n, find the minimum number of squares that sum to X.
Examples :

Input:  n = 100
Output: 1
100 can be written as 102. Note that 100 can also be 
written as 52 + 52 + 52 + 52, but this
representation requires 4 squares.

Input:  n = 6
Output: 3

    
    int getMinSquares(unsigned int n) 
{ 
    // base cases 
    // if n is perfect square then Minimum squares required is 1 (144 = 12^2) 
    if (sqrt(n) - floor(sqrt(n)) == 0) 
        return 1; 
    if (n <= 3) 
        return n; 
  
    // getMinSquares rest of the table using recursive 
    // formula 
    int res = n; // Maximum squares required is n (1*1 + 1*1 + ..) 
  
    // Go through all smaller numbers 
    // to recursively find minimum 
    for (int x = 1; x <= n; x++) { 
        int temp = x * x; 
        if (temp > n) 
            break; 
        else
            res = min(res, 1 + getMinSquares(n - temp)); 
    } 
    return res; 
} 
  
// Driver program 
int main() 
{ 
    cout << getMinSquares(6); 
    return 0; 
} 


OR


int getMinSquares(int n) 
{ 
    // Create a dynamic programming table 
    // to store sq 
    int* dp = new int[n + 1]; 
  
    // getMinSquares table for base case entries 
    dp[0] = 0; 
    dp[1] = 1; 
    dp[2] = 2; 
    dp[3] = 3; 
  
    // getMinSquares rest of the table using recursive 
    // formula 
    for (int i = 4; i <= n; i++) { 
        // max value is i as i can always be represented 
        // as 1*1 + 1*1 + ... 
        dp[i] = i; 
  
        // Go through all smaller numbers to 
        // to recursively find minimum 
        for (int x = 1; x <= ceil(sqrt(i)); x++) { 
            int temp = x * x; 
            if (temp > i) 
                break; 
            else
                dp[i] = min(dp[i], 1 + dp[i - temp]); 
        } 
    } 
  
    // Store result and free dp[] 
    int res = dp[n]; 
    delete[] dp; 
  
    return res; 
} 
  
// Driver program 
int main() 
{ 
    cout << getMinSquares(6); 
    return 0; 
} 
