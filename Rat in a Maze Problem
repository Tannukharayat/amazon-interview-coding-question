**Consider a rat placed at (0, 0) in a square matrix m[][] of order n and has to reach the destination at (n-1, n-1). Your task is to 
complete the function printPath() which returns a sorted array of strings denoting all the possible directions which the rat can take to 
reach the destination at (n-1, n-1). The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right).**

            void funct(int m[][MAX], int n, int i , int j, vector<string> &v, string s)
            {
                if(i<0||j<0||i>=n||j>=n||m[i][j]==0||m[i][j]==50)
                {
                    return;
                }

                if(i==n-1&&j==n-1)
                {
                    v.push_back(s);
                    return;
                } m[i][j]=50;
                if(i+1<n&&m[i+1][j]==1)
                {
                    funct(m,n,i+1,j, v , s+'D');
                }
                if(j+1<n&&m[i][j+1]==1)
                {
                    funct(m,n,i,j+1, v , s+'R');
                }
                if(i-1>=0&&m[i-1][j]==1)
                {
                    funct(m,n,i-1,j, v, s+'U');
                }
                if(j-1>=0&&m[i][j-1]==1)
                {
                    funct(m,n,i,j-1, v , s+'L');
                }   m[i][j]=1;
            }
            vector<string> printPath(int m[MAX][MAX], int n)
            {
                string s="";
                vector<string> v;
                funct(m,n,0,0,v,s);	
                sort(v.begin(), v.end());
                for(int i = 0 ; i < v.size() ; i++)
                {
                    cout<<v[i]<<" ";
                }
            }
