Given a string s, find length of the longest prefix which is also suffix. The prefix and suffix should not overlap.

Examples:

Input : aabcdaabc
Output : 4
The string "aabc" is the longest
prefix which is also suffix.

Input : abcab
Output : 2

Input : aaaa
Output : 2

  int largest_prefix_suffix(const std::string &str) { 
    
  int n = str.length(); 
    
  if(n < 2) { 
    return 0; 
  } 
  
  int len = 0; 
  int i = n/2; 
    
  while(i < n) { 
    if(str[i] == str[len]) { 
      ++len; 
      ++i; 
    } else { 
      if(len == 0) { // no prefix 
        ++i; 
      } else { // search for shorter prefixes 
        --len; 
      } 
    } 
  } 
    
  return len; 
  
} 
  
// Driver code 
int main() { 
      
string s = "blablabla"; 
  
cout << largest_prefix_suffix(s); 
  
return 0; 
} 

OR

int longestPrefixSuffix(string s) 
{ 
    int n = s.length(); 
  
    int lps[n]; 
    lps[0] = 0; // lps[0] is always 0 
  
    // length of the previous 
    // longest prefix suffix 
    int len = 0; 
  
    // the loop calculates lps[i] 
    // for i = 1 to n-1 
    int i = 1; 
    while (i < n) 
    { 
        if (s[i] == s[len]) 
        { 
            len++; 
            lps[i] = len; 
            i++; 
        } 
        else // (pat[i] != pat[len]) 
        { 
            // This is tricky. Consider 
            // the example. AAACAAAA 
            // and i = 7. The idea is 
            // similar to search step. 
            if (len != 0) 
            { 
                len = lps[len-1]; 
  
                // Also, note that we do 
                // not increment i here 
            } 
            else // if (len == 0) 
            { 
                lps[i] = 0; 
                i++; 
            } 
        } 
    } 
  
    int res = lps[n-1]; 
  
    // Since we are looking for 
    // non overlapping parts. 
    return (res > n/2)? n/2 : res; 
} 
  
// Driver program to test above function 
int main() 
{ 
    string s = "abcab"; 
    cout << longestPrefixSuffix(s); 
    return 0; 
} 
Time Complexity : O(n)
Auxiliary Space : O(n)
