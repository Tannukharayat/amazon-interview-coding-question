**Given an integer n, find the closest integer (not including itself), which is a palindrome.

The 'closest' is defined as absolute difference minimized between two integers.

Example 1:
Input: "123"
Output: "121"
Note:
The input n is a positive integer represented by string, whose length will not exceed 18.
If there is a tie, return the smaller one as answer.**
      
      
      int closestPlandrome(int num) { 
  
  // case1 : largest palindrome number 
  // which is smaller to given number 
  int RPNum = num - 1; 
  
  while (!isPalindrome(convertNumIntoString(abs(RPNum))))  
    RPNum--;   
  
  // Case 2 : smallest palindrome number 
  // which is greater than given number 
  int SPNum = num + 1; 
  
  while (!isPalindrome(convertNumIntoString(SPNum)))  
    SPNum++;   
  
  // check absolute difference 
  if (abs(num - RPNum) > abs(num - SPNum)) 
    return SPNum; 
  else
    return RPNum; 
} 

OR



      long long int diff(string s1, string s2)
      {
          long long int num1=0;
          for(int i = 0 ; i < s1.length() ; i++)
          {
              num1=num1*10+s1[i]-'0';
          }
          long long int num2=0;
          for(int i = 0 ; i < s2.length() ; i++)
          {
              num2=num2*10+s2[i]-'0';
          }
          return num1-num2;
      }class Solution {
      public:
          string nearestPalindromic(string n) {

             string st=n;
              vector<int> v;
              string s1=st;
              if(st.length()==1)
              {
                  if(st[0]=='1')
                  return "0";
                  else
                  {
                      int num=st[0]-'0'-1;
                      st[0]=num+'0';
                      return st;
                  }
              }
               vector<int> v1, v2;
              string stg="", stl="";
              for(int i = 0 ; i < st.length()/2 ; i++)
              {
                  st[st.length()-1-i]=st[i];
              }

              for(int i = st.length()/2; i < st.length() ; i++)
              {
                          v1.push_back(st[i]-'0');
                          v2.push_back(st[i]-'0');
              }
              stl=stg=st;
              if(st<=s1)
              {
                          int ans=0;
                          stg="";
                          //cout<<v.size()<<endl;
                          for(int i = 0 ; i < v1.size() ; i++)
                          {
                              if(v1[i]+1<=9)
                              {
                                  v1[i]++;
                                  ans=1;
                                  break;
                              }
                          }
                          if(ans==0)
                          {
                              stg+='1';
                              for(int i = 0 ; i < st.length()-1 ; i++)
                              {
                                  stg+='0';
                              }
                             stg+='1';
                          }else 
                          {
                              if(s1.length()%2==0)
                              {
                                  for(int i = v1.size()-1 ; i >= 0 ; i--)
                                  stg+=(v1[i]+'0');
                                  for(int i = 0 ; i < v1.size() ; i++)
                                  stg+=(v1[i]+'0');
                              }else
                              {
                                  for(int i = v1.size()-1 ; i >= 0 ; i--)
                                  stg+=(v1[i]+'0');
                                  for(int i = 1 ; i < v1.size() ; i++)
                                  stg+=(v1[i]+'0');
                              }
                          }

                       //   cout<<stg<<endl;

              }if(st>=s1)
              { 

                        int ans=0, one=0, zero=0;
                        stl="";
                          for(int i = 0 ; i < v2.size() ; i++)
                          {
                              if(v2[i]==0)
                              v2[i]=9;
                              else if(i!=v2.size()-1&&v2[i]-1>=0)
                              {
                                  v2[i]--;
                                  ans=1;
                                  break;
                              }else
                              if(v2[i]-1>0&&i==v2.size()-1)
                              {
                                  v2[i]--;
                                  ans=1;
                                  break;
                              }
                          }
                           if(ans==0)
                          {
                           //   cout<<"*";
                              for(int i = 0 ; i < st.length()-1 ; i++)
                              {
                                  stl+='9';
                              }
                          }else 
                          {
                              if(s1.length()%2==0)
                              {
                                  for(int i = v2.size()-1 ; i >= 0 ; i--)
                                  stl+=(v2[i]+'0');
                                  for(int i = 0 ; i < v2.size() ; i++)
                                  stl+=(v2[i]+'0');
                              }else
                              {
                                  for(int i = v2.size()-1 ; i >= 0 ; i--)
                                  stl+=(v2[i]+'0');
                                  for(int i = 1 ; i < v2.size() ; i++)
                                  stl+=(v2[i]+'0');
                              }
                          }

              }
              long long int l=diff(s1,stl), h=diff(stg,s1);
           //  cout<<l<<" "<<h<<endl;
              if(l<=h)
              {
                  return stl;
              }else return stg;
          }
      };
