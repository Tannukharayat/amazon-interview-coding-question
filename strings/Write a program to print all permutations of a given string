A permutation, also called an “arrangement number” or “order,” is a rearrangement of the elements of an ordered list S into a 
one-to-one correspondence with S itself. A string of length n has n! permutation.

      void permute(string a, int l, int r)  
      {  
          // Base case  
          if (l == r)  
              cout<<a<<endl;  
          else
          {  
              // Permutations made  
              for (int i = l; i <= r; i++)  
              {  

                  // Swapping done  
                  swap(a[l], a[i]);  

                  // Recursion called  
                  permute(a, l+1, r);  

                  //backtrack  
                  swap(a[l], a[i]);  
              }  
          }  
      }  

      // Driver Code  
      int main()  
      {  
          string str = "ABC";  
          int n = str.size();  
          permute(str, 0, n-1);  
          return 0;  
      }  
Time Complexity: O(n*n!)

OR

void permute(string str, string out) 
{ 
    // When size of str becomes 0, out has a 
    // permutation (length of out is n) 
    if (str.size() == 0) 
    { 
        cout << out << endl; 
        return; 
    } 
  
    // One be one move all characters at 
    // the beginning of out (or result) 
    for (int i = 0; i < str.size(); i++) 
    { 
        // Remove first character from str and 
        // add it to out 
        permute(str.substr(1), out + str[0]); 
  
        // Rotate string in a way second character 
        // moves to the beginning. 
        rotate(str.begin(), str.begin() + 1, str.end()); 
    } 
} 
OR

void permute(string str) 
{ 
    // Sort the string in lexicographically 
    // ascennding order 
    sort(str.begin(), str.end()); 
  
    // Keep printing next permutation while there 
    // is next permutation 
    do { 
       cout << str << endl; 
    } while (next_permutation(str.begin(), str.end())); 
}
