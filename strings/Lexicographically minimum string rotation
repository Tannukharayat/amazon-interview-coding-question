Write code to find lexicographic minimum in a circular array, e.g. for the array BCABDADAB, the lexicographic minimum is ABBCABDAD.
Source: Google Written Test

More Examples:



Input:  GEEKSQUIZ
Output: EEKSQUIZG

Input:  GFG
Output: FGG

Input:  GEEKSFORGEEKS
Output: EEKSFORGEEKSG

      string minLexRotation(string str) 
      { 
          // Find length of given string 
          int n = str.length(); 

          // Create an array of strings to store all rotations 
          string arr[n]; 

          // Create a concatenation of string with itself 
          string concat = str + str; 

          // One by one store all rotations of str in array. 
          // A rotation is obtained by getting a substring of concat 
          for (int i = 0; i < n; i++) 
              arr[i] = concat.substr(i, n); 

          // Sort all rotations 
          sort(arr, arr+n); 

          // Return the first rotation from the sorted array 
          return arr[0]; 
      }
      
      time complexity:- O(n^2 * log n)
      
      OR
      
      bool compareSeq(char S[], int x, int y, int n) 
            { 
                for (int i = 0; i < n; i++) { 
                    if (S[x] < S[y]) 
                        return false; 
                    else if (S[x] > S[y]) 
                        return true; 
                    x = (x + 1) % n; 
                    y = (y + 1) % n; 
                } 
                return true; 
            } 

            // Function to find starting index 
            // of lexicographically smallest sequence 
            int smallestSequence(char S[], int n) 
            { 
                int index = 0; 
                for (int i = 1; i < n; i++) 

                    // if new sequence is smaller 
                    if (compareSeq(S, index, i, n)) 

                        // change index of current min 
                        index = i; 

                return index; 
            } 

            // Function to print lexicographically 
            // smallest sequence 
            void printSmallestSequence(char S[], int n) 
            { 
                int starting_index = smallestSequence(S, n); 
                for (int i = 0; i < n; i++) 
                    cout << S[(starting_index + i) % n]; 
            }
