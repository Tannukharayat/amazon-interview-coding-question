Given a string, find the first repeated character in it. We need to find the character that occurs more than once and whose index of second
occurrence is smallest.

  Input: ch = “geeksforgeeks”
Output: e
e is the first element that repeats

Input: str = “hello geeks”
Output: l
l is the first element that repeats

char firstRepeating(string &str) 
{ 
    // Creates an empty hashset 
    unordered_set<char> h; 
  
    // Traverse the input array from left to right 
    for (int i=0; i<str.length(); i++) 
    { 
        char c = str[i]; 
  
        // If element is already in hash set, update x 
        // and then break 
        if (h.find(c) != h.end()) 
            return c; 
  
        else // Else add element to hash set 
            h.insert(c); 
    } 
  
    // If there was no repeated character 
    return '\0'; 
} 
  
OR

We can Use Sorting to solve the problem in O(n Log n) time. Following are detailed steps.

Copy the given array to an auxiliary array temp[].
Sort the temp array using a O(N log N) time sorting algorithm.
Scan the input array from left to right. For every element, count its occurrences in temp[] using binary search. As soon as we find a 
character that occurs more than once, we return the character.

OR

int FirstRepeated(string str) 
{ 
    // An integer to store presence/absence 
    // of 26 characters using its 32 bits. 
    int checker = 0; 
  
    for (int i = 0; i < str.length(); ++i) 
    { 
        int val = (str[i]-'a'); 
  
        // If bit corresponding to current 
        // character is already set 
        if ((checker & (1 << val)) > 0) 
            return i; 
  
        // set bit in checker 
        checker |= (1 << val); 
    } 
  
    return -1; 
}

Time Complexity: O(n)
Auxiliary Space: O(1)
