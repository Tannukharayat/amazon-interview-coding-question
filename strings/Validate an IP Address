  **Write a program to Validate an IPv4 Address. According to Wikipedia, IPv4 addresses are canonically represented in dot-decimal 
  notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots, e.g., 172.16.254.1 . The generalized 
  form of an IPv4 address is (0-255).(0-255).(0-255).(0-255). Here we are considering numbers only from 0 to 255 and any additional **
  leading zeroes will be considered invalid.

Your task is  to complete the function isValid which returns 1 if the ip address is valid else returns 0. The function takes a string 
ip as its only argument .


        int isValid(char *s) 
          {
               vector<string> v;
              int k=4;
               int i=1;
               for( ; s[i]!='\0' ; i++)
               {
                   if(s[i]=='.'&&s[i-1]=='.')
                   {
                       return 0;
                   }
               }
               if(s[i-1]=='.')
               {
               return 0;
               }
               char* token = strtok(s, "."); 

               while (token != NULL) 
                { 
                  v.push_back(token); 
                  token = strtok(NULL, "."); 
                } 
                if(v.size()!=4)
               return 0;
               for(int i = 0 ; i < v.size() ; i++)
               {
                    if(v[i].size()==1&&v[i][0]=='0')
                  {
                      continue;
                  }
                  int cnt=0;
                  int num=0;
                  for(int j = 0 ; j < v[i].size() ; j++)
                  {
                      if(v[i][j]>='1'&&v[i][j]<='9')
                      cnt++;
                      if(!(v[i][j]>='0'&&v[i][j]<='9'))
                      return 0;
                      if(v[i][j]=='0'&&cnt==0)
                      {
                          return 0;
                      }
                      num=num*10+v[i][j]-'0';
                  }
                  if(!(num>=0&&num<=255))
                  return 0;
               }

              return 1;
          }
