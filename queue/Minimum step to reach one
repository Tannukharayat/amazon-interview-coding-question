Given a positive number N, we need to reach to 1 in minimum number of steps where a step is defined as converting N to (N-1) or
converting N to its one of the bigger divisor.
Formally, if we are at N, then in 1 step we can reach to (N â€“ 1) or if N = u*v then we can reach to max(u, v) where u > 1 and v 
> 1.

int minStepToReachOne(int N) 
{ 
    queue<data> q; 
    q.push(data(N, 0)); 
  
    // set is used to visit numbers so that they 
    // won't be pushed in queue again 
    set<int> st; 
  
    //  loop untill we reach to 1 
    while (!q.empty()) 
    { 
        data t = q.front();     q.pop(); 
          
        // if current data value is 1, return its 
        // steps from N 
        if (t.val == 1) 
            return t.steps; 
  
        //  check curr - 1, only if it not visited yet 
        if (st.find(t.val - 1) == st.end()) 
        { 
            q.push(data(t.val - 1, t.steps + 1)); 
            st.insert(t.val - 1); 
        } 
  
        //  loop from 2 to sqrt(value) for its divisors 
        for (int i = 2; i*i <= t.val; i++) 
        { 
  
            // check divisor, only if it is not visited yet 
            // if i is divisor of val, then val / i will 
            // be its bigger divisor 
            if (t.val % i == 0 && st.find(t.val / i) == st.end()) 
            { 
                q.push(data(t.val / i, t.steps + 1)); 
                st.insert(t.val / i); 
            } 
        } 
    }  
} 
  
//  Driver code to test above methods 
int main() 
{ 
    int N = 17; 
    cout << minStepToReachOne(N) << endl;  
} 
