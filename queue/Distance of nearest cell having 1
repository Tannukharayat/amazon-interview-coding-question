**Given a binary matrix of size N x M. The task is to find the distance of nearest 1 in the matrix for each cell. The distance is 
calculated as |i1 – i2| + |j1 – j2|, where i1, j1 are the row number and column number of the current cell and i2, j2 are the row number
and column number of the nearest cell having value 1.**


          int main() 
          {
            int t;
            cin >> t ;
            while(t--)
            {
                int n , m ;
                cin >> n >> m ;
                int a[n][m];
                queue<pair<int,int> >pq;
                int dp[n][m]={-1};
                memset(dp,-1,sizeof(dp));
                for(int i = 0 ; i < n ; i++ )
                {
                    for(int j = 0 ; j < m ; j++)
                    {
                         cin >> a[i][j];
                         if(a[i][j]==1)
                         {
                             pq.push({i,j});
                             dp[i][j]=0;
                         }
                    }
                }
                while(!pq.empty())
                {
                    pair<int,int> p=pq.front();
                    pq.pop();
                    if(p.first+1<n&&dp[p.first+1][p.second]==-1)
                    {
                        dp[p.first+1][p.second]=dp[p.first][p.second]+1;
                        pq.push({p.first+1,p.second});
                    }
                    if(p.first-1>=0&&dp[p.first-1][p.second]==-1)
                    {
                        dp[p.first-1][p.second]=dp[p.first][p.second]+1;
                        pq.push({p.first-1,p.second});
                    }
                    if(p.second+1<m&&dp[p.first][p.second+1]==-1)
                    {
                        dp[p.first][p.second+1]=dp[p.first][p.second]+1;
                        pq.push({p.first,p.second+1});
                    }
                    if(p.second-1>=0&&dp[p.first][p.second-1]==-1)
                    {
                        dp[p.first][p.second-1]=dp[p.first][p.second]+1;
                        pq.push({p.first,p.second-1});
                     }
                }
                for(int i = 0 ; i < n ; i++)
                {
                    for(int j = 0 ; j < m ; j++)
                    {
                        cout<<dp[i][j]<<" ";
                    }
                }cout<<endl;
            }
            return 0;
          }
