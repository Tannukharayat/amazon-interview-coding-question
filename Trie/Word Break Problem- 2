Given an input string and a dictionary of words, find out if the input string can be segmented into a space-separated sequence 
of dictionary words. See following examples for more details.
This is a famous Google interview question, also being asked by many other companies now a days.

Consider the following dictionary 
{ i, like, sam, sung, samsung, mobile, ice, 
  cream, icecream, man, go, mango}

Input:  ilike
Output: Yes 
The string can be segmented as "i like".

Input:  ilikesamsung
Output: Yes
The string can be segmented as "i like samsung" or 
"i like sam sung".

  struct TrieNode 
{ 
    struct TrieNode *children[ALPHABET_SIZE]; 
  
    // isEndOfWord is true if the node represents 
    // end of a word 
    bool isEndOfWord; 
}; 
  
// Returns new trie node (initialized to NULLs) 
struct TrieNode *getNode(void) 
{ 
    struct TrieNode *pNode =  new TrieNode; 
  
    pNode->isEndOfWord = false; 
  
    for (int i = 0; i < ALPHABET_SIZE; i++) 
        pNode->children[i] = NULL; 
  
    return pNode; 
} 
  
// If not present, inserts key into trie 
// If the key is prefix of trie node, just 
// marks leaf node 
void insert(struct TrieNode *root, string key) 
{ 
    struct TrieNode *pCrawl = root; 
  
    for (int i = 0; i < key.length(); i++) 
    { 
        int index = key[i] - 'a'; 
        if (!pCrawl->children[index]) 
            pCrawl->children[index] = getNode(); 
  
        pCrawl = pCrawl->children[index]; 
    } 
  
    // mark last node as leaf 
    pCrawl->isEndOfWord = true; 
} 
  
// Returns true if key presents in trie, else 
// false 
bool search(struct TrieNode *root, string key) 
{ 
    struct TrieNode *pCrawl = root; 
  
    for (int i = 0; i < key.length(); i++) 
    { 
        int index = key[i] - 'a'; 
        if (!pCrawl->children[index]) 
            return false; 
  
        pCrawl = pCrawl->children[index]; 
    } 
  
    return (pCrawl != NULL && pCrawl->isEndOfWord); 
} 
  
// returns true if string can be segmented into 
// space separated words, otherwise returns false 
bool wordBreak(string str, TrieNode *root) 
{ 
    int size = str.size(); 
  
    // Base case 
    if (size == 0)  return true; 
  
    // Try all prefixes of lengths from 1 to size 
    for (int i=1; i<=size; i++) 
    { 
        // The parameter for search is str.substr(0, i) 
        // str.substr(0, i) which is prefix (of input 
        // string) of length 'i'. We first check whether 
        // current prefix is in dictionary. Then we 
        // recursively check for remaining string 
        // str.substr(i, size-i) which is suffix of 
        // length size-i 
        if (search(root, str.substr(0, i)) && 
            wordBreak(str.substr(i, size-i), root)) 
            return true; 
    } 
  
    // If we have tried all prefixes and none 
    // of them worked 
    return false; 
} 
  
// Driver program to test above functions 
int main() 
{ 
    string dictionary[] = {"mobile","samsung","sam", 
                           "sung","ma\n","mango", 
                           "icecream","and","go","i", 
                           "like","ice","cream"}; 
    int n = sizeof(dictionary)/sizeof(dictionary[0]); 
    struct TrieNode *root = getNode(); 
  
    // Construct trie 
    for (int i = 0; i < n; i++) 
        insert(root, dictionary[i]); 
  
    wordBreak("ilikesamsung", root)? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("iiiiiiii", root)? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("", root)? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("ilikelikeimangoiii", root)? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("samsungandmango", root)? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("samsungandmangok", root)? cout <<"Yes\n": cout << "No\n"; 
    return 0; 
}

OR

int dictionaryContains(string word) 
{ 
    string dictionary[] = {"mobile","samsung","sam","sung","man","mango", 
                           "icecream","and","go","i","like","ice","cream"}; 
    int size = sizeof(dictionary)/sizeof(dictionary[0]); 
    for (int i = 0; i < size; i++) 
        if (dictionary[i].compare(word) == 0) 
           return true; 
    return false; 
} 
  
// Returns true if string can be segmented into space separated 
// words, otherwise returns false 
bool wordBreak(string str) 
{ 
    int size = str.size(); 
    if (size == 0)   return true; 
  
    // Create the DP table to store results of subroblems. The value wb[i] 
    // will be true if str[0..i-1] can be segmented into dictionary words, 
    // otherwise false. 
    bool wb[size+1]; 
    memset(wb, 0, sizeof(wb)); // Initialize all values as false. 
  
    for (int i=1; i<=size; i++) 
    { 
        // if wb[i] is false, then check if current prefix can make it true. 
        // Current prefix is "str.substr(0, i)" 
        if (wb[i] == false && dictionaryContains( str.substr(0, i) )) 
            wb[i] = true; 
  
        // wb[i] is true, then check for all substrings starting from 
        // (i+1)th character and store their results. 
        if (wb[i] == true) 
        { 
            // If we reached the last prefix 
            if (i == size) 
                return true; 
  
            for (int j = i+1; j <= size; j++) 
            { 
                // Update wb[j] if it is false and can be updated 
                // Note the parameter passed to dictionaryContains() is 
                // substring starting from index 'i' and length 'j-i' 
                if (wb[j] == false && dictionaryContains( str.substr(i, j-i) )) 
                    wb[j] = true; 
  
                // If we reached the last character 
                if (j == size && wb[j] == true) 
                    return true; 
            } 
        } 
    } 
  
    /* Uncomment these lines to print DP table "wb[]" 
     for (int i = 1; i <= size; i++) 
        cout << " " << wb[i]; */
  
    // If we have tried all prefixes and none of them worked 
    return false; 
} 
  
  OR
  
  int dictionaryContains(string word) 
{ 
    string dictionary[] = {"mobile","samsung","sam","sung","man","mango", 
                           "icecream","and","go","i","like","ice","cream"}; 
    int size = sizeof(dictionary)/sizeof(dictionary[0]); 
    for (int i = 0; i < size; i++) 
        if (dictionary[i].compare(word) == 0) 
           return true; 
    return false; 
} 
  
// Returns true if string can be segmented into space separated 
// words, otherwise returns false 
bool wordBreak(string str) 
{ 
    int size = str.size(); 
    if (size == 0)   return true; 
  
    // Create the DP table to store results of subroblems. The value wb[i] 
    // will be true if str[0..i-1] can be segmented into dictionary words, 
    // otherwise false. 
    bool wb[size+1]; 
    memset(wb, 0, sizeof(wb)); // Initialize all values as false. 
  
    for (int i=1; i<=size; i++) 
    { 
        // if wb[i] is false, then check if current prefix can make it true. 
        // Current prefix is "str.substr(0, i)" 
        if (wb[i] == false && dictionaryContains( str.substr(0, i) )) 
            wb[i] = true; 
  
        // wb[i] is true, then check for all substrings starting from 
        // (i+1)th character and store their results. 
        if (wb[i] == true) 
        { 
            // If we reached the last prefix 
            if (i == size) 
                return true; 
  
            for (int j = i+1; j <= size; j++) 
            { 
                // Update wb[j] if it is false and can be updated 
                // Note the parameter passed to dictionaryContains() is 
                // substring starting from index 'i' and length 'j-i' 
                if (wb[j] == false && dictionaryContains( str.substr(i, j-i) )) 
                    wb[j] = true; 
  
                // If we reached the last character 
                if (j == size && wb[j] == true) 
                    return true; 
            } 
        } 
    } 
  
    /* Uncomment these lines to print DP table "wb[]" 
     for (int i = 1; i <= size; i++) 
        cout << " " << wb[i]; */
  
    // If we have tried all prefixes and none of them worked 
    return false; 
} 

