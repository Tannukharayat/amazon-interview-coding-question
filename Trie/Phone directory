**Given a list of contacts which exist in a phone directory and a query string str. The task is to implement search query for the phone 
directory. Run a search query for each prefix p of the query string str(i.e from  index 1 to str length) that prints all the distinct 
recommended contacts which have the same prefix as our query (p) in lexicographical order. Please refer the explanation part for better 
understanding.

NOTE: If there is no match between query and contacts , print "0".**


        #include <bits/stdc++.h>
        using namespace std;
        class node
        {
            public:
             int f, f1;
            node *child[26];
            node *parent;
             node()
            {
                f=f1=0;
                for(int i = 0 ; i < 26 ; i++)
                {
                    child[i]=NULL;
                    parent=NULL;
                }
            }


        };
        class trie
        {
            public:
            node *root;
            trie()
            {
                root=(node*)calloc(1,sizeof(node));
            }


            void insert(string s)
            {
                node *np=root;
                for(int i = 0 ; i < s.length() ; i++)
                {
                    if(np->child[s[i]-'a']==NULL)
                    {
                        np->child[s[i]-'a']=new node;
                        np->child[s[i]-'a']->parent=np;
                        np=np->child[s[i]-'a'];
                    }else 
                    {
                        np=np->child[s[i]-'a'];
                    }
                }
                np->f=1;
            }
            void display(node *temp,vector<char> v)
              {
                for(int i=0;i<26;i++)
                {
                  if(temp->child[i]!=NULL)
                  {
                    v.push_back('a'+i);
                    display(temp->child[i],v);
                    v.pop_back();
                  }
                }
                if(temp->f!=0)
                {
                  vector<char>::iterator it;
                  for(it=v.begin();it!=v.end();it++)
                  {
                    cout<<*it;
                  }

                  cout<<endl;
                      }
                v.pop_back();
              }
            void search(node *np,string s, vector<string> &v, int &ans)
            {
                if(np->f==1)
                {
                cout<<s<<" ";
                ans=1;
               // cout<<"*";
                }
                for(int i = 0 ; i < 26 ; i++)
                {
                    if(np->child[i]!=NULL)
                    {
                        char ch=i+'a';
                        search(np->child[i],s+ch,v,ans);
                    }
                }
                np->f1=1;
            }
        };
        int main() 
        {
          int t ;
          cin >> t ;
          while(t--)
          {
              trie t;
              int n ;
              cin >> n ;
              for(int i = 0 ; i < n ; i++)
              {
                  string s;
                  cin >> s ;
                  t.insert(s);
              }
             vector<string> v;
             string s;
             cin >> s; 
             node *np=t.root;

                if(np==NULL)
                {
                    int i=0;
                    while(i<s.length())
                    {
                        i++;
                        cout<<"0"<<endl;
                    }
                    continue;
                }
                string st="";
                int i = 0 ;
                 for(i = 0 ; i < s.length() ; i++)
                {
                    char ch=s[i];
                    st=st+ch;
                    int ans=0;
                    if(np->child[s[i]-'a']!=NULL)
                    {
                        np=np->child[s[i]-'a'];
                        t.search(np,st,v,ans);
                        cout<<endl;
                    }else
                    {
                      if(ans==0)
                      cout<<"0"<<endl;
                      break;
                    }
                }i++;
                while(i<s.length())
                {
                    i++;
                    cout<<"0"<<endl;
                }
          }
          return 0;
        }
