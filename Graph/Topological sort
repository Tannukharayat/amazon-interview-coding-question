**Given a directed graph, you need to complete the function topoSort which returns an array having the topologically sorted elements of the
array and takes two arguments. The first argument is the Graph graph represented as adjacency list and the second is the number of vertices
N.**


        int* topoSort(int V, vector<int> adj[])
        {
            int cnt = V;
             static int v[1000];
            int k = 0;
            int indegree[10000]={0}, vis[1000]={0};
            for(int i = 0 ; i < V ; i++)
            {
                for(int j = 0 ; j < adj[i].size() ;j++)
                indegree[adj[i][j]]++;
            }
            while(cnt--)
            {
                for(int i = 0 ; i < V ; i++)
                {
                    if(indegree[i]==0&&vis[i]==0)
                    {
                        v[k++]=i;
                        vis[i]=1;
                        for(int j = 0 ; j < adj[i].size() ; j++)
                        {
                            indegree[adj[i][j]]--;
                        }break;
                    }
                }
            }
            return v;
        }

