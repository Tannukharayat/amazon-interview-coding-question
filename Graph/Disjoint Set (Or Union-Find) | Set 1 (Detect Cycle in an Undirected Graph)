A disjoint-set data structure is a data structure that keeps track of a set of elements 
partitioned into a number of disjoint (non-overlapping) subsets. A union-find algorithm is an 
algorithm that performs two useful operations on such a data structure:

Find: Determine which subset a particular element is in. This can be used for determining if two
elements are in the same subset.

Union: Join two subsets into a single subset.


    class Edge  
{  
    public: 
    int src, dest;  
};  
  
// a structure to represent a graph  
class Graph  
{  
    public: 
    // V-> Number of vertices, E-> Number of edges  
    int V, E;  
  
    // graph is represented as an array of edges  
    Edge* edge;  
};  
  
// Creates a graph with V vertices and E edges  
Graph* createGraph(int V, int E)  
{  
    Graph* graph = new Graph(); 
    graph->V = V;  
    graph->E = E;  
  
    graph->edge = new Edge[graph->E * sizeof(Edge)];  
  
    return graph;  
}  
  
// A utility function to find the subset of an element i  
int find(int parent[], int i)  
{  
    if (parent[i] == -1)  
        return i;  
    return find(parent, parent[i]);  
}  
  
// A utility function to do union of two subsets  
void Union(int parent[], int x, int y)  
{  
    int xset = find(parent, x);  
    int yset = find(parent, y);  
    if(xset != yset) 
    {  
        parent[xset] = yset;  
    }  
}  
  
// The main function to check whether a given graph contains  
// cycle or not  
int isCycle( Graph* graph )  
{  
    // Allocate memory for creating V subsets  
    int *parent = new int[graph->V * sizeof(int)];  
  
    // Initialize all subsets as single element sets  
    memset(parent, -1, sizeof(int) * graph->V);  
  
    // Iterate through all edges of graph, find subset of both  
    // vertices of every edge, if both subsets are same, then  
    // there is cycle in graph.  
    for(int i = 0; i < graph->E; ++i)  
    {  
        int x = find(parent, graph->edge[i].src);  
        int y = find(parent, graph->edge[i].dest);  
  
        if (x == y)  
            return 1;  
  
        Union(parent, x, y);  
    }  
    return 0;  
}  
  
// Driver code 
int main()  
{  
    /* Let us create the following graph  
        0  
        | \  
        | \  
        1-----2 */
    int V = 3, E = 3;  
    Graph* graph = createGraph(V, E);  
  
    // add edge 0-1  
    graph->edge[0].src = 0;  
    graph->edge[0].dest = 1;  
  
    // add edge 1-2  
    graph->edge[1].src = 1;  
    graph->edge[1].dest = 2;  
  
    // add edge 0-2  
    graph->edge[2].src = 0;  
    graph->edge[2].dest = 2;  
  
    if (isCycle(graph))  
        cout<<"graph contains cycle";  
    else
        cout<<"graph doesn't contain cycle";  
  
    return 0;  
}  
Note that the implementation of union() and find() is naive and takes O(n) time in worst case
. These methods can be improved to O(Logn) using Union by Rank or Height. We will soon be 
discussing Union by Rank in a separate post.

OR

struct Edge 
{ 
    int src, dest; 
}; 
  
// a structure to represent a graph 
struct Graph 
{ 
    // V-> Number of vertices, E-> Number of edges 
    int V, E; 
  
    // graph is represented as an array of edges 
    struct Edge* edge; 
}; 
  
struct subset 
{ 
    int parent; 
    int rank; 
}; 
  
// Creates a graph with V vertices and E edges 
struct Graph* createGraph(int V, int E) 
{ 
    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) ); 
    graph->V = V; 
    graph->E = E; 
  
    graph->edge = (struct Edge*) malloc( graph->E * sizeof( struct Edge ) ); 
  
    return graph; 
} 
  
// A utility function to find set of an element i 
// (uses path compression technique) 
int find(struct subset subsets[], int i) 
{ 
    // find root and make root as parent of i (path compression) 
    if (subsets[i].parent != i) 
        subsets[i].parent = find(subsets, subsets[i].parent); 
  
    return subsets[i].parent; 
} 
  
// A function that does union of two sets of x and y 
// (uses union by rank) 
void Union(struct subset subsets[], int x, int y) 
{ 
    int xroot = find(subsets, x); 
    int yroot = find(subsets, y); 
  
    // Attach smaller rank tree under root of high rank tree 
    // (Union by Rank) 
    if (subsets[xroot].rank < subsets[yroot].rank) 
        subsets[xroot].parent = yroot; 
    else if (subsets[xroot].rank > subsets[yroot].rank) 
        subsets[yroot].parent = xroot; 
  
    // If ranks are same, then make one as root and increment 
    // its rank by one 
    else
    { 
        subsets[yroot].parent = xroot; 
        subsets[xroot].rank++; 
    } 
} 
  
// The main function to check whether a given graph contains cycle or not 
int isCycle( struct Graph* graph ) 
{ 
    int V = graph->V; 
    int E = graph->E; 
  
    // Allocate memory for creating V sets 
    struct subset *subsets = 
        (struct subset*) malloc( V * sizeof(struct subset) ); 
  
    for (int v = 0; v < V; ++v) 
    { 
        subsets[v].parent = v; 
        subsets[v].rank = 0; 
    } 
  
    // Iterate through all edges of graph, find sets of both 
    // vertices of every edge, if sets are same, then there is 
    // cycle in graph. 
    for(int e = 0; e < E; ++e) 
    { 
        int x = find(subsets, graph->edge[e].src); 
        int y = find(subsets, graph->edge[e].dest); 
  
        if (x == y) 
            return 1; 
  
        Union(subsets, x, y); 
    } 
    return 0; 
} 
  
// Driver program to test above functions 
int main() 
{ 
    /* Let us create the following graph 
         0 
        |  \ 
        |    \ 
        1-----2 */
  
    int V = 3, E = 3; 
    struct Graph* graph = createGraph(V, E); 
  
    // add edge 0-1 
    graph->edge[0].src = 0; 
    graph->edge[0].dest = 1; 
  
    // add edge 1-2 
    graph->edge[1].src = 1; 
    graph->edge[1].dest = 2; 
  
    // add edge 0-2 
    graph->edge[2].src = 0; 
    graph->edge[2].dest = 2; 
  
    if (isCycle(graph)) 
        printf( "Graph contains cycle" ); 
    else
        printf( "Graph doesn't contain cycle" ); 
  
    return 0; 
} 

