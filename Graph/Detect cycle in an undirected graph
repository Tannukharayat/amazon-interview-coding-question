**Given a undirected graph, the task is to complete the method isCyclic() to detect if there is a cycle in the undirected graph or not**

          bool funct(int x, vector<int> adj[] , int V , int vis[], int p)
          {
              vis[x]=1;
              for(int i = 0 ; i < adj[x].size() ; i++)
              {
                  if(vis[adj[x][i]]==0)
                  {
                     if (funct(adj[x][i], adj, V, vis, x)==1)
                     return 1;
                  }else if(p!=adj[x][i])
                  {
                      return 1;
                  }
              }
              return 0;
          }
          bool isCyclic(vector<int> adj[], int V)
          {
              int vis[V]={0};
              int x = 0;
              for(int i = 0 ; i < V ; i++)
              {
                  if(vis[i]==0)
                  {
                      x=funct(i, adj, V, vis , -1);
                      if(x==1)
                      {
                          return x;
                      }
                      //break;
                  }
              }return x;
          }

          int main()
          {
              int T;
              cin>>T;
              while(T--)
              {
                  int V, E;
                  cin>>V>>E;

                  // array of vectors to represent graph
                  vector<int> adj[V];

                  int u, v;
                  for(int i=0;i<E;i++)
                  {
                      cin>>u>>v;

                      // adding edge to the graph
                      adj[u].push_back(v);
                      adj[v].push_back(u);
                  }

                  cout << isCyclic(adj, V)<<endl;

              }
          }
