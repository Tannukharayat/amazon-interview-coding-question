vector<int> merge(Node *root1, Node *root2)
{
   stack<Node* > s1, s2;
   vector<int> v;
 //  cout<<root1->data<<" "<<root2->data;
   while(root1!=NULL)
   {
      // cout<<root1->data<<" ";
       s1.push(root1);
       root1=root1->left;
   }//cout<<endl;
    while(root2!=NULL)
   {
      //  cout<<root2->data<<" ";
      
       s2.push(root2);
       root2=root2->left;
   }
 
   while(!s1.empty()&&!s2.empty())
   {
     //  cout<<"))";
        root1 = s1.top();
        root2 = s2.top();
       if(root1->data < root2->data)
       {
           s1.pop();
           v.push_back(root1->data);
           root1=root1->right;
           while(root1!=NULL)
           {
               s1.push(root1);
               root1=root1->left;
           }
       }else if(root1->data > root2->data)
       {
           s2.pop();
          v.push_back(root2->data);
          root2=root2->right;
           while(root2!=NULL)
           {
               s2.push(root2);
               root2=root2->left;
           }
       }else
       {
           v.push_back(root1->data);
           v.push_back(root2->data);
           s1.pop();
           s2.pop();
           root1=root1->right;
           root2=root2->right;
            while(root1!=NULL)
           {
               s1.push(root1);
               root1=root1->left;
           }
             while(root2!=NULL)
           {
               s2.push(root2);
               root2=root2->left;
           }
       }
   }
    if(!s1.empty())
                {
                    Node* curr = s1.top();
                    s1.pop();
                    v.push_back(curr->data);
                    curr=curr->right;
                     while (curr != NULL || s1.empty() == false) 
                    { 
                        while (curr !=  NULL) 
                        { 
                            s1.push(curr); 
                            curr = curr->left; 
                        } 
                         curr = s1.top(); 
                        s1.pop(); 

                        v.push_back(curr->data);
                    
                         curr = curr->right; 
                    }
                }else if(!s2.empty())
                {
                   Node* curr = s2.top();
                    s2.pop();
                    v.push_back(curr->data);
                    curr=curr->right;
                     while (curr != NULL || s2.empty() == false) 
                    { 
                        while (curr !=  NULL) 
                        { 
                            s2.push(curr); 
                            curr = curr->left; 
                        } 
                         curr = s2.top(); 
                        s2.pop(); 

                        v.push_back(curr->data);
                    
                         curr = curr->right; 
                    }
                }
   return v;
}
