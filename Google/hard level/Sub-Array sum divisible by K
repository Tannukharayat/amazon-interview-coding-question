You are given an array A of N positive and/or negative integers and a value K. The task is to find the count of all sub-arrays whose sum 
is divisible by K.

    
    int main() 
      {
        int t ;
        cin >> t ;
        while(t--)
        {
            int n , k , sum = 0 , cnt = 0;
            cin >> n >> k ;
            int mp[100001]={0};
            int a[n];
            for(int i = 0 ; i < n ; i++)
            {
                cin >> a[i];
            }
            for(int i = 0 ; i < n ; i++)
            {
                sum+=a[i];
                if(mp[sum%k]>0)
                {
                    cnt+=mp[sum%k];
                }
                if(sum%k==0)
                cnt++;
                mp[sum%k]++;

            }
            cout<<cnt<<endl;
        }
        return 0;
      }
OR

int subCount(int arr[], int n, int k) 
{ 
    // create auxiliary hash array to count frequency 
    // of remainders 
    int mod[k]; 
    memset(mod, 0, sizeof(mod)); 
  
    // Traverse original array and compute cumulative 
    // sum take remainder of this current cumulative 
    // sum and increase count by 1 for this remainder 
    // in mod[] array 
    int cumSum = 0; 
    for (int i = 0; i < n; i++) { 
        cumSum += arr[i]; 
  
        // as the sum can be negative, taking modulo twice 
        mod[((cumSum % k) + k) % k]++; 
    } 
  
    int result = 0; // Initialize result 
  
    // Traverse mod[] 
    for (int i = 0; i < k; i++) 
  
        // If there are more than one prefix subarrays 
        // with a particular mod value. 
        if (mod[i] > 1) 
            result += (mod[i] * (mod[i] - 1)) / 2; 
  
    // add the elements which are divisible by k itself 
    // i.e., the elements whose sum = 0 
    result += mod[0]; 
  
    return result; 
} 
