Given a Singly Linked List which has data members sorted in ascending order. Construct a Balanced Binary Search Tree which has same data members as the given Linked List.

Examples:

Input:  Linked List 1->2->3
Output: A Balanced BST 
     2   
   /  \  
  1    3 


Input: Linked List 1->2->3->4->5->6->7
Output: A Balanced BST
        4
      /   \
     2     6
   /  \   / \
  1   3  5   7  

Input: Linked List 1->2->3->4
Output: A Balanced BST
      3   
    /  \  
   2    4 
 / 
1

Input:  Linked List 1->2->3->4->5->6
Output: A Balanced BST
      4   
    /   \  
   2     6 
 /  \   / 
1   3  5   

Method 1 (Simple)
Following is a simple algorithm where we first find the middle node of the list and make it the root of the tree to be constructed.

1) Get the Middle of the linked list and make it root.
2) Recursively do same for the left half and right half.
       a) Get the middle of the left half and make it left child of the root
          created in step 1.
       b) Get the middle of right half and make it the right child of the
          root created in step 1.

Time complexity: O(nLogn) where n is the number of nodes in Linked List.




SIMILAR TO INORDER TRAVERSAL 
                   // C++ implementation of above approach 
#include <bits/stdc++.h> 
using namespace std; 

/* Link list node */
class LNode 
{ 
	public: 
	int data; 
	LNode* next; 
}; 

/* A Binary Tree node */
class TNode 
{ 
	public: 
	int data; 
	TNode* left; 
	TNode* right; 
}; 

TNode* newNode(int data); 
int countLNodes(LNode *head); 
TNode* sortedListToBSTRecur(LNode **head_ref, int n); 


/* This function counts the number of 
nodes in Linked List and then calls 
sortedListToBSTRecur() to construct BST */
TNode* sortedListToBST(LNode *head) 
{ 
	/*Count the number of nodes in Linked List */
	int n = countLNodes(head); 

	/* Construct BST */
	return sortedListToBSTRecur(&head, n); 
} 

/* The main function that constructs 
balanced BST and returns root of it. 
head_ref --> Pointer to pointer to 
head node of linked list n --> No. 
of nodes in Linked List */
TNode* sortedListToBSTRecur(LNode **head_ref, int n) 
{ 
	/* Base Case */
	if (n <= 0) 
		return NULL; 

	/* Recursively construct the left subtree */
	TNode *left = sortedListToBSTRecur(head_ref, n/2); 

	/* Allocate memory for root, and 
	link the above constructed left 
	subtree with root */
	TNode *root = newNode((*head_ref)->data); 
	root->left = left; 

	/* Change head pointer of Linked List 
	for parent recursive calls */
	*head_ref = (*head_ref)->next; 

	/* Recursively construct the right 
		subtree and link it with root 
		The number of nodes in right subtree 
		is total nodes - nodes in 
		left subtree - 1 (for root) which is n-n/2-1*/
	root->right = sortedListToBSTRecur(head_ref, n - n / 2 - 1); 

	return root; 
} 



/* UTILITY FUNCTIONS */

/* A utility function that returns 
count of nodes in a given Linked List */
int countLNodes(LNode *head) 
{ 
	int count = 0; 
	LNode *temp = head; 
	while(temp) 
	{ 
		temp = temp->next; 
		count++; 
	} 
	return count; 
} 

/* Function to insert a node 
at the beginging of the linked list */
void push(LNode** head_ref, int new_data) 
{ 
	/* allocate node */
	LNode* new_node = new LNode(); 
	
	/* put in the data */
	new_node->data = new_data; 

	/* link the old list off the new node */
	new_node->next = (*head_ref); 

	/* move the head to point to the new node */
	(*head_ref) = new_node; 
} 



Time Complexity: O(n)            
