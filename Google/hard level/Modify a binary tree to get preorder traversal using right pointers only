void modifytree(struct Node* root) 
{ 
    // Base Case 
    if (root == NULL) 
        return; 
  
    // Create an empty stack and push root to it 
    stack<Node*> nodeStack; 
    nodeStack.push(root); 
  
    /* Pop all items one by one.  
        Do following for every popped item 
       a) print it 
       b) push its right child 
       c) push its left child 
    Note that right child is pushed first 
    so that left is processed first */
    struct Node* pre = NULL; 
    while (nodeStack.empty() == false) { 
  
        // Pop the top item from stack 
        struct Node* node = nodeStack.top(); 
  
        nodeStack.pop(); 
  
        // Push right and left children of 
        // the popped node to stack 
        if (node->right) 
            nodeStack.push(node->right); 
        if (node->left) 
            nodeStack.push(node->left); 
  
        // check if some previous node exists 
        if (pre != NULL) { 
  
            // set the right pointer of 
            // previous node to currrent 
            pre->right = node; 
        } 
  
        // set previous node as current node 
        pre = node; 
    } 
} 
  
// printing using right pointer only 
void printpre(struct Node* root) 
{ 
    while (root != NULL) { 
        cout << root->data << " "; 
        root = root->right; 
    } 
} 
  
// Driver code 
int main() 
{ 
    /* Constructed binary tree is 
            10 
          /   \ 
        8      2 
      /  \     
    3     5   
  */
    struct Node* root = newNode(10); 
    root->left = newNode(8); 
    root->right = newNode(2); 
    root->left->left = newNode(3); 
    root->left->right = newNode(5); 
  
    modifytree(root); 
    printpre(root); 
  
    return 0; 
} 
