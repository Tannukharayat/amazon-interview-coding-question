**In share trading, a buyer buys shares and sells on a future date. Given the stock price of n days, the trader is allowed to 
make at most k transactions, where a new transaction can only start after the previous transaction is complete, find out the 
maximum profit that a share trader could have made**

  int maxProfit(int price[], int n, int k) 
      { 
          // table to store results of subproblems 
          // profit[t][i] stores maximum profit using 
          // atmost t transactions up to day i (including 
          // day i) 
          int profit[k + 1][n + 1]; 

          // For day 0, you can't earn money 
          // irrespective of how many times you trade 
          for (int i = 0; i <= k; i++) 
              profit[i][0] = 0; 

          // profit is 0 if we don't do any transation 
          // (i.e. k =0) 
          for (int j = 0; j <= n; j++) 
              profit[0][j] = 0; 

          // fill the table in bottom-up fashion 
          for (int i = 1; i <= k; i++) { 
              for (int j = 1; j < n; j++) { 
                  int max_so_far = INT_MIN; 

                  for (int m = 0; m < j; m++) 
                      max_so_far = max(max_so_far, 
                                       price[j] - price[m] + profit[i - 1][m]); 

                  profit[i][j] = max(profit[i][j - 1], max_so_far); 
              } 
          } 

          return profit[k][n - 1]; 
      } 
       time complexity of O(k.n2)
       
       Optimized Solution:
      The above solution has time complexity of O(k.n2). It can be reduced if we are able to 
      calculate the maximum profit gained by selling shares on the ith day in constant time.

      profit[t][i] = max(profit [t][i-1], max(price[i] – price[j] + profit[t-1][j]))
                                  for all j in range [0, i-1]

      If we carefully notice,
      max(price[i] – price[j] + profit[t-1][j])
      for all j in range [0, i-1]

      can be rewritten as,
      = price[i] + max(profit[t-1][j] – price[j])
      for all j in range [0, i-1]
      = price[i] + max(prevDiff, profit[t-1][i-1] – price[i-1])
      where prevDiff is max(profit[t-1][j] – price[j])
      for all j in range [0, i-2]

      So, if we have already calculated max(profit[t-1][j] – price[j]) for all j in range 
      [0, i-2], we can calculate it for j = i – 1 in constant time. In other words, we don’t 
      have to look back in the range [0, i-1] anymore to find out best day to buy. We can 
      determine that in constant time using below revised relation

             int maxProfit(int price[], int n, int k) 
      { 
          // table to store results of subproblems 
          // profit[t][i] stores maximum profit using atmost 
          // t transactions up to day i (including day i) 
          int profit[k + 1][n + 1]; 

          // For day 0, you can't earn money 
          // irrespective of how many times you trade 
          for (int i = 0; i <= k; i++) 
              profit[i][0] = 0; 

          // profit is 0 if we don't do any transation 
          // (i.e. k =0) 
          for (int j = 0; j <= n; j++) 
              profit[0][j] = 0; 

          // fill the table in bottom-up fashion 
          for (int i = 1; i <= k; i++) { 
              int prevDiff = INT_MIN; 
              for (int j = 1; j < n; j++) { 
                  prevDiff = max(prevDiff, 
                                 profit[i - 1][j - 1] - price[j - 1]); 
                  profit[i][j] = max(profit[i][j - 1], 
                                     price[j] + prevDiff); 
              } 
          } 

          return profit[k][n - 1]; 
      } \
      
      time complexity of the above solution is O(kn) 
      space complexity is O(nk).
