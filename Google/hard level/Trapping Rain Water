*Given an array arr[] of N non-negative integers representing height of blocks at index i as Ai where the width of each block is 1. 
Compute how much water can be trapped in between blocks after raining


      int maxWater(int arr[], int n)  
{ 
      
    // To store the maximum water  
    // that can be stored 
    int res = 0; 
      
    // For every element of the array 
    for (int i = 1; i < n-1; i++) { 
          
        // Find the maximum element on its left 
        int left = arr[i]; 
        for (int j=0; j<i; j++) 
           left = max(left, arr[j]); 
          
        // Find the maximum element on its right    
        int right = arr[i]; 
        for (int j=i+1; j<n; j++) 
           right = max(right, arr[j]);  
         
       // Update the maximum water     
       res = res + (min(left, right) - arr[i]);    
    } 
  
    return res;  
}  

        Complexity Analysis:
        Time Complexity: O(n2).
        There are two nested loops traversing the array, So time Complexity is O(n2).
        Space Complexity: O(1).
        No extra space required.

        int main() 
        {
            int t ;
            cin >> t ;
            while(t--)
            {
                int n , x , ans = 0;
                cin >> n ;
                int a[n];
                for(int i = 0 ; i < n ; i++)
                {
                    cin >> a[i];
                }int left[n],right[n];
                left[0]=0;
                right[n-1]=0;
                for(int i = 1 ; i < n ; i++)
                {
                    left[i]=max(a[i-1],left[i-1]);
                }
                for(int i = n-2 ; i >= 0 ; i-- )
                {
                    right[i]=max(a[i+1],right[i+1]);
                }
                for(int i = 0 ; i < n; i++)
                {
                    if(min(left[i],right[i])>a[i])
                    ans+=(min(left[i],right[i])-a[i]);
                }
                cout<<ans<<endl;
            }
          return 0;
        }
Complexity Analysis:
Time Complexity: O(n).
Only one traversal of the array is needed, So time Complexity is O(n).
Space Complexity: O(n).
Two extra array is needed each of size n.

int findWater(int arr[], int n) 
{ 
    // initialize output 
    int result = 0; 
  
    // maximum element on left and right 
    int left_max = 0, right_max = 0; 
  
    // indices to traverse the array 
    int lo = 0, hi = n - 1; 
  
    while (lo <= hi) { 
        if (arr[lo] < arr[hi]) { 
            if (arr[lo] > left_max) 
                // update max in left 
                left_max = arr[lo]; 
            else
                // water on curr element = max - curr 
                result += left_max - arr[lo]; 
            lo++; 
        } 
        else { 
            if (arr[hi] > right_max) 
                // update right maximum 
                right_max = arr[hi]; 
            else
                result += right_max - arr[hi]; 
            hi--; 
        } 
    } 
  
    return result; 
} 
 
 Complexity Analysis:
Time Complexity: O(n).
Only one traversal of the array is needed.
Auxiliary Space: O(1).
As no extra space is required.
