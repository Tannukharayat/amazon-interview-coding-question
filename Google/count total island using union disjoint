class Solution {
public:
    int rank[10001];
    int parent[10001];
    int vis[10001];
    void create(vector<vector<char>>& grid)
    {
        int n = grid.size();
        int m = grid[0].size();
       //  cout<<n*m<<endl;
        for(int i = 0 ; i < n*m ; i++ )
        {
            parent[i]=i;
            rank[i]=0;
            vis[i]=0;
        }
       
    }
    int find_parent(int x)
    {
        if(x==parent[x])
        return x;
        return find_parent(parent[x]);
    }
    void find_union(int x, int y)
    {
       // cout<<x<<" "<<y<<endl;
        int x_parent=find_parent(x);
        int y_parent=find_parent(y);
        if(x_parent==y_parent)
        return;
        if(rank[x_parent]<rank[y_parent])
        {
            parent[x_parent]=y_parent;
        }else if(rank[x_parent]>rank[y_parent])
        {
            parent[y_parent]=x_parent;
        }else
        {
            parent[x_parent]=y_parent;
            rank[y_parent]++;
        }
    }
    int xShape(vector<vector<char>>& grid) 
    {
        create(grid);
        int n = grid.size();
        int m=grid[0].size();
        //cout<<n<<" "<<m<<endl;
        for(int i = 0 ; i < grid.size() ; i++)
        {
            for(int j = 0 ; j < grid[0].size() ; j++)
            {
                //cout<<parent[i]<<" - ";
                if(grid[i][j]=='O')
                continue;
              //  cout<<i<<" "<<j;
                if(i+1<n&&grid[i+1][j]=='X')
                {
                   // cout<<i*m+j<<" "<<(i+1)*m+j<<"+++";
                
                    find_union(i*m+j,(i+1)*m+j);
                }
                if(j+1<m&&grid[i][j+1]=='X')
                {//cout<<"="; 
               // cout<<i*m+j<<" "<<(i)*m+(j+1)<<"+++";
                    find_union(i*m+j,(i)*m+(j+1));
                }
                
                if(i-1>=0&&grid[i-1][j]=='X')
                {
                  // cout<<i*m+j<<" "<<(i-1)*m+j<<"+++";
                    find_union(i*m+j,(i-1)*m+j);
                }
                if(j-1>=0&&grid[i][j-1]=='X')
                {//cout<<i*m+j<<" "<<(i)*m+(j-1)<<"+++";
                    find_union(i*m+j,(i)*m+(j-1));
                }
              // cout<<endl;
          
            }
        }
        int ans=0;
        
        for(int i = 0 ; i < grid.size() ; i++)
        {
            for(int j = 0 ; j < grid[0].size() ; j++)
            {
               if(grid[i][j]=='X')
                {
                    int x=find_parent(i*m+j);
                   
                    if(vis[x]==0)
                    {
                        vis[x]=1;
                        ans++;
                    }
                }
            }
        }
        return ans;
        
    }
};

orst case time complexity as O(Logn) of union and find function
