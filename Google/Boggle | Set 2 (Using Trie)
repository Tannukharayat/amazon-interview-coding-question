Given a dictionary, a method to do a lookup in the dictionary and a M x N board where every cell has one character. Find all possible words that can be formed by a sequence of adjacent characters. Note that we can move to any of 8 adjacent characters, but a word should not have multiple instances of the same cell.

Example:

Input: dictionary[] = {"GEEKS", "FOR", "QUIZ", "GO"};
       boggle[][]   = {{'G', 'I', 'Z'},
                       {'U', 'E', 'K'},
                       {'Q', 'S', 'E'}};

Output: Following words of the dictionary are present
         GEEKS
         QUIZ
         
         
 
 
 struct TrieNode { 
    TrieNode* Child[SIZE]; 
  
    // isLeaf is true if the node represents 
    // end of a word 
    bool leaf; 
}; 
  
// Returns new trie node (initialized to NULLs) 
TrieNode* getNode() 
{ 
    TrieNode* newNode = new TrieNode; 
    newNode->leaf = false; 
    for (int i = 0; i < SIZE; i++) 
        newNode->Child[i] = NULL; 
    return newNode; 
} 
  
// If not present, inserts a key into the trie 
// If the key is a prefix of trie node, just 
// marks leaf node 
void insert(TrieNode* root, char* Key) 
{ 
    int n = strlen(Key); 
    TrieNode* pChild = root; 
  
    for (int i = 0; i < n; i++) { 
        int index = char_int(Key[i]); 
  
        if (pChild->Child[index] == NULL) 
            pChild->Child[index] = getNode(); 
  
        pChild = pChild->Child[index]; 
    } 
  
    // make last node as leaf node 
    pChild->leaf = true; 
} 
  
// function to check that current location 
// (i and j) is in matrix range 
bool isSafe(int i, int j, bool visited[M][N]) 
{ 
    return (i >= 0 && i < M && j >= 0 && j < N && !visited[i][j]); 
} 
  
// A recursive function to print all words present on boggle 
void searchWord(TrieNode* root, char boggle[M][N], int i, 
                int j, bool visited[][N], string str) 
{ 
    // if we found word in trie / dictionary 
    if (root->leaf == true) 
        cout << str << endl; 
  
    // If both I and j in  range and we visited 
    // that element of matrix first time 
    if (isSafe(i, j, visited)) { 
        // make it visited 
        visited[i][j] = true; 
  
        // traverse all childs of current root 
        for (int K = 0; K < SIZE; K++) { 
            if (root->Child[K] != NULL) { 
                // current character 
                char ch = (char)K + (char)'A'; 
  
                // Recursively search reaming character of word 
                // in trie for all 8 adjacent cells of boggle[i][j] 
                if (isSafe(i + 1, j + 1, visited) 
                    && boggle[i + 1][j + 1] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i + 1, j + 1, visited, str + ch); 
                if (isSafe(i, j + 1, visited) 
                    && boggle[i][j + 1] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i, j + 1, visited, str + ch); 
                if (isSafe(i - 1, j + 1, visited) 
                    && boggle[i - 1][j + 1] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i - 1, j + 1, visited, str + ch); 
                if (isSafe(i + 1, j, visited) 
                    && boggle[i + 1][j] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i + 1, j, visited, str + ch); 
                if (isSafe(i + 1, j - 1, visited) 
                    && boggle[i + 1][j - 1] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i + 1, j - 1, visited, str + ch); 
                if (isSafe(i, j - 1, visited) 
                    && boggle[i][j - 1] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i, j - 1, visited, str + ch); 
                if (isSafe(i - 1, j - 1, visited) 
                    && boggle[i - 1][j - 1] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i - 1, j - 1, visited, str + ch); 
                if (isSafe(i - 1, j, visited) 
                    && boggle[i - 1][j] == ch) 
                    searchWord(root->Child[K], boggle, 
                               i - 1, j, visited, str + ch); 
            } 
        } 
  
        // make current element unvisited 
        visited[i][j] = false; 
    } 
} 
  
// Prints all words present in dictionary. 
void findWords(char boggle[M][N], TrieNode* root) 
{ 
    // Mark all characters as not visited 
    bool visited[M][N]; 
    memset(visited, false, sizeof(visited)); 
  
    TrieNode* pChild = root; 
  
    string str = ""; 
  
    // traverse all matrix elements 
    for (int i = 0; i < M; i++) { 
        for (int j = 0; j < N; j++) { 
            // we start searching for word in dictionary 
            // if we found a character which is child 
            // of Trie root 
            if (pChild->Child[char_int(boggle[i][j])]) { 
                str = str + boggle[i][j]; 
                searchWord(pChild->Child[char_int(boggle[i][j])], 
                           boggle, i, j, visited, str); 
                str = ""; 
            } 
        } 
    } 
} 
