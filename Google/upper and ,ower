int lower_bound(vector<int> a , int x )
{
    int ans=-1;
       int l = 0 , r = a.size()-1;
    while(l<=r)
    {
        int mid=(l+r)/2;
        if(a[mid]>=x)
        {
            ans=mid;
            r=mid-1;
        }else
            l=mid+1;
    }
    return ans;
}
int upper_bound(vector<int> a , int x)
{
     int ans=-1;
        int l = 0 , r = a.size()-1;
  while(l<=r)
    {
        int mid=(l+r)/2;
        if(a[mid]<=x)
        {
            ans=mid;
            l=mid+1;
        }else
            r=mid-1;
    }
    return ans;
}
int is_present(vector<int> a , int x)
{
     int ans=-1;
     int l = 0 , r = a.size()-1;
    while(l<=r)
    {
        int mid=(l+r)/2;
        if(a[mid]<x)
        {
           l=mid+1;
        }else if(a[mid]>x)
            r=mid-1;
            else return mid;
    }
    return ans;
}
int findFrequency(vector<int> v, int x)
{
 // cout<<is_present(v,x);
  sort(v.begin() , v.end());
  if(is_present(v, x)!=-1)
  {
      int lower = lower_bound(v , x);
      int upper = upper_bound(v, x);
      return upper-lower+1;
  }
  return 0;
}

// { Driver Code Starts.

// Driver code
int main() {
	
	int testcase;
	
	cin >> testcase;
	
	while(testcase--){
	    int N;
	    cin >> N;
	    
	    // Declaring vector 
	    vector<int> v;
	        
	    // Taking vector element input
	    for(int i = 0;i<N;i++){
	        int k;
	        cin >> k;
	        v.push_back(k);
	    }
	    
	    // element whose frequency to be find
	    int x;
	    cin >> x;
	    
	    cout << findFrequency(v, x) << endl;
	}
	
	return 0;
}  
