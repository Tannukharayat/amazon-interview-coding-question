Two player X and Y are playing a game in which there are pots of gold arranged in a  line, each containing some gold coins. They get alternating turns in which the player can pick a pot from one of the ends of the line. The winner is the player who has a higher number of coins at the end. The objective is to maximize the number of coins collected by X, assuming Y also plays optimally. You are required to complete the method maxCoins which returns an integer denoting the max coins X could get while playing the game. You may assume that X starts the game. 

int maxCoins(int A[],int N)
{
   int dp[N+1][N+1];
   memset(dp,0,sizeof(dp));
   for(int gap = 0 ; gap < N ; gap++)
   {
       for(int i = 0 , j = gap ; j < N ; j++,i++ )
       {
           int a1 = 0 , a2 = 0 , a3 = 0 , a4 = 0;
           if(i+2<=j)
           {
               a1 =  dp[i+2][j];
           }
           if(i+1<=j-1)
           {
               a3 = dp[i+1][j-1];
           }
           if(i<=j-2)
           {
               a4 = dp[i][j-2];
           }
           dp[i][j]= max(A[i]+min(a1,a3), A[j]+min(a4,a3));
       }
   }
   return dp[0][N-1];
}
