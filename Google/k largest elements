 int heap[1000];
    int size=0;
     void heapify_up(int i)
    {
        if(i<=0)
        return ;
       
        if(heap[i]<heap[i/2])
        {
            int temp=heap[i];
            heap[i]=heap[i/2];
            heap[i/2]=temp;
            heapify(i/2);
        }
    }
    void heapify(int i)
    {
        if(i>=size/2)
        return ;
        int highest=i;
        int l = 2*i+1, r = 2*i+2;
        if(heap[i]>heap[l]&&l<size)
        highest=l;
        if(heap[highest]>heap[r]&&r<size)
        {
            highest=r;
        }
        if(highest!=i)
        {
            int temp=heap[highest];
            heap[highest]=heap[i];
            heap[i]=temp;
            heapify(highest);
        }
    }
    int insert(int num, int k)
    {
        if(size<k)
        {
            heap[size]=num;
            size++;
             heapify_up(size-1);
           
        }else
        {
            if(heap[0]<num)
            {
              heap[0]=num;
              heapify(0);
            }
        }
       // for(int i = 0 ; i < size ; i++)
        //cout<<heap[i]<<" ";
        //cout<<endl;
    }
	vector<int> kLargest(int arr[], int n, int k) {
	  for(int i = 0 ; i < n ; i++)
	   {
	       insert(arr[i], k);
	   }
	   vector<int> v;
	   for(int i = 0 ; i < k ; i++)
	   {
	       v.push_back(0);
	   }
	   int sz=0;
	   for(int i = 0 ; i < k ; i++)
	   {
	       v[sz++]=(heap[0]);
	       heap[0]=heap[size-1];
	       size--;
	       heapify(0);
	   }
	   for(int i = 0 ; i < k/2 ; i++)
	   {
	       int tmp=v[i];
	       v[i]=v[k-i-1];
	       v[k-i-1]=tmp;
	   }
	   return v;
	}
