Given a binary string str. The task is to find the smallest positive integer C such that the binary string can be cut into C pieces (sub-strings) and each sub-string should be a power of 5 with no leading zeros

bool ispower(ll n) 
{ 
    if (n < 125) 
        return (n == 1 || n == 5 || n == 25); 
    if (n % 125 != 0) 
        return false; 
    else
        return ispower(n / 125); 
} 
  
// Function to return the decimal 
// value of binary equivalent 
ll number(string s, int i, int j) 
{ 
    ll ans = 0; 
    for (int x = i; x < j; x++) { 
        ans = ans * 2 + (s[x] - '0'); 
    } 
    return ans; 
} 
  
// Function to return the minimum cuts required 
int minCuts(string s, int n) 
{ 
    int dp[n + 1]; 
  
    // Allocating memory for dp[] array 
    memset(dp, n + 1, sizeof(dp)); 
    dp[0] = 0; 
  
    // From length 1 to n 
    for (int i = 1; i <= n; i++) { 
  
        // If previous character is '0' then ignore 
        // to avoid number with leading 0s. 
        if (s[i - 1] == '0') 
            continue; 
        for (int j = 0; j < i; j++) { 
  
            // Ignore s[j] = '0' starting numbers 
            if (s[j] == '0') 
                continue; 
  
            // Number formed from s[j....i] 
            ll num = number(s, j, i); 
  
            // Check for power of 5 
            if (!ispower(num)) 
                continue; 
  
            // Assigning min value to get min cut possible 
            dp[i] = min(dp[i], dp[j] + 1); 
        } 
    } 
  
    // (n + 1) to check if all the strings are traversed 
    // and no divisible by 5 is obtained like 000000 
    return ((dp[n] < n + 1) ? dp[n] : -1); 
} 
  
// Driver code 
int main() 
{ 
    string s = "101101101"; 
    int n = s.length(); 
    cout << minCuts(s, n); 
  
    return 0; 
} 
