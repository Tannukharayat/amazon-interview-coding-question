long long partition(long long arr[],int n,int k,int l)
    {
        long long sum;
        if(k==1)
        {
            if(l>0)
            {
                sum=arr[n-1]-arr[l-1];
            }else sum=arr[n-1];
            return sum;
        }
        long long res = INT_MAX;
        for(int i = l ; i < n ; i++)
        {
             if(l>0)
            {
                sum=arr[i]-arr[l-1];
            }else sum=arr[i];
          //   cout<<sum<<" "<<res<<"--"<<k<<"++";
       
            res = min( res, max(sum, partition(arr, n , k-1 , i+1)));
                
        }
        return res;
    }
    long long minTime(int arr[], int n, int k)
    {
       long long sum[n];
       sum[0]=arr[0];
       for(int i = 1 ; i < n ; i++)
       {
           sum[i] = sum[i-1]+(long long) arr[i];
       }
       partition(sum, n , k , 0);
    }
    
    OR
    
    
     long long minTime(int arr[], int n, int k)
    {
       
       long long sum[n+1]={0};
       sum[1]=arr[0];
         for(int i = 2 ; i <= n ; i++)
       {
           sum[i] = sum[i-1]+(long long) arr[i-1];
       }
       long long dp[k+1][n+1]={0};
       for(int i = 1 ; i <= n ; i++)
       {
           dp[1][i]=sum[i];
       }
       for(int i = 1 ; i <= k ; i++)
       {
           dp[i][1]=arr[0];
       }
       
       for(int i = 2 ; i <= k ; i++)
       {
           for(int j = 2 ; j <= n ; j++)
           {
               long long ans = INT_MAX;
               for(int l = 1 ; l <= j ; l++)
               {
                   ans = min(ans, max(sum[j]-sum[l], dp[i-1][l]));
               }
               dp[i][j]=ans;
           }
       }
       return dp[k][n];
    }
    
    TIME COMPLEXITY: O(KN*N)
