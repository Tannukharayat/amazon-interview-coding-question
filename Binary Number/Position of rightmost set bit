Algorithm: (Example 12(1100))
Let I/P be 12 (1100)

1. Take two's complement of the given no as all bits are reverted
except the first '1' from right to left (0111)

2  Do a bit-wise & with original no, this will return no with the
required one only (0100)

3  Take the log2 of the no, you will get (position - 1) (2)

4  Add 1 (3)
class gfg 
{ 
  
public: 
unsigned int getFirstSetBitPos(int n) 
{ 
    return log2(n & -n) + 1; 
} 
}; 
  
// Driver code 
int main() 
{ 
    gfg g; 
    int n = 12; 
    cout << g.getFirstSetBitPos(n); 
    return 0; 
} 
OR 
int PositionRightmostSetbit(int n) 
{ 
    // Position variable initialize with 1 
    // m variable is used to check the set bit 
    int position = 1; 
    int m = 1; 
  
    while (!(n & m)) { 
  
        // left shift 
        m = m << 1; 
        position++; 
    } 
    return position; 
} 
OR
int Right_most_setbit(int num) 
{ 
    int pos = 1; 
    // counting the position of first set bit 
    for (int i = 0; i < INT_SIZE; i++) { 
        if (!(num & (1 << i))) 
            pos++; 
        else
            break; 
    } 
    return pos; 
} 
int main() 
{ 
    int num = 18; 
    int pos = Right_most_setbit(num); 
    cout << pos << endl; 
    return 0; 
} 


