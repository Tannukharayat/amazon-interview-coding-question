**Given a word S and a text C. Return the count of the occurences of anagrams of the word in the text**

      while(t--)
        {
            int ans=0;
            string t , w;
            int h[26];
            memset(h,0,sizeof(h));
            cin >> t >> w;
            for(int j = 0 ; j < w.length() ; j++ )
            {
                h[w[j]-'a']--;
            }
            for(int j = 0 ; j < w.length() ; j++ )
            {
                h[t[j]-'a']++;
            }
            int ansf=1;
            for(int j = 0 ; j < 26 ; j++ )
            {
                if(h[j]!=0)
                {
                    ansf = 0 ;
                    break;
                }
            }
            if(ansf==1)
            ans++;
            for(int j = w.length() ; j < t.length() ; j++)
            {
                h[t[j]-'a']++;
                h[t[j-w.length()]-'a']--;
                int ansf=1;
                for(int jk = 0 ; jk < 26 ; jk++ )
                {
                    if(h[jk]!=0)
                    {
                        ansf = 0 ;
                        break;
                    }
                }
                if(ansf==1)
                ans++;
            }
            cout<<ans<<endl;
        }
        
        
        public class GFG { 
    final static int MAX_CHAR = 256
  
    // Function to find if two strings are equal 
    static boolean isCountZero(int[] count) 
    { 
        for (int i = 0; i < MAX_CHAR; i++) 
            if (count[i] != 0) 
                return false; 
        return true; 
    } 
  
    static int countAnagrams(String text, String word) 
    { 
        int N = text.length(); 
        int n = word.length(); 
  
        // Check for first window. The idea is to 
        // use single count array to match counts 
        int[] count = new int[MAX_CHAR]; 
        for (int i = 0; i < n; i++) 
            count[word.charAt(i)]++; 
        for (int i = 0; i < n; i++) 
            count[text.charAt(i)]--; 
  
        // If first window itself is anagram 
        int res = 0; 
        if (isCountZero(count)) 
            res++; 
  
        for (int i = n; i < N; i++) { 
  
            // Add last character of current 
            // window 
            count[text.charAt(i)]--; 
  
            // Remove first character of previous 
            // window. 
            count[text.charAt(i - n)]++; 
  
            // If count array is 0, we found an 
            // anagram. 
            if (isCountZero(count)) 
                res++; 
        } 
        return res; 
    } 
  
    // Driver code 
    public static void main(String args[]) 
    { 
        String text = "forxxorfxdofr"; 
        String word = "for"; 
        System.out.print(countAnagrams(text, word)); 
    } 
} 
