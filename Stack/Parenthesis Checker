          int matchClosing(char X[], int start, 
                          int end, char open, char close) 
          { 
              int c = 1; 
              int i = start + 1; 
              while (i <= end) { 
                  if (X[i] == open) 
                      c++; 
                  else if (X[i] == close) 
                      c--; 
                  if (c == 0) 
                      return i; 
                  i++; 
              } 
              return i; 
          } 

          // Function1 to match opening bracket 
          int matchingOpening(char X[], int start, 
                              int end, char open, char close) 
          { 
              int c = -1; 
              int i = end - 1; 

              while (i >= start) { 
                  if (X[i] == open) 
                      c++; 
                  else if (X[i] == close) 
                      c--; 
                  if (c == 0) 
                      return i; 
                  i--; 
              } 
              return -1; 
          } 

          // Function to check balanced parentheses 
          bool isBalanced(char X[], int n) 
          { 
              // helper variables 
              int i, j, k, x, start, end; 

              for (i = 0; i < n; i++) { 
                  // Handling case of opening parentheses 
                  if (X[i] == '(') 
                      j = matchClosing(X, i, n - 1, '(', ')'); 
                  else if (X[i] == '{') 
                      j = matchClosing(X, i, n - 1, '{', '}'); 
                  else if (X[i] == '[') 
                      j = matchClosing(X, i, n - 1, '[', ']'); 

                  // Handling case of closing parentheses 
                  else { 
                      if (X[i] == ')') 
                          j = matchingOpening(X, 0, i, '(', ')'); 
                      else if (X[i] == '}') 
                          j = matchingOpening(X, 0, i, '{', '}'); 
                      else if (X[i] == ']') 
                          j = matchingOpening(X, 0, i, '[', ']'); 

                      // If corresponsing matching 
                      // opening parentheses doesn't 
                      // lie in given interval return 0 
                      if (j < 0 || j >= i) 
                          return false; 

                      // else continue 
                      continue; 
                  } 

                  // If corresponding closing parentheses 
                  // doesn't lie in given interval 
                  // return 0 
                  if (j >= n || j < 0) 
                      return false; 

                  // if found, now check for each 
                  // opening and closing parentheses 
                  // in this interval 
                  start = i; 
                  end = j; 

                  for (k = start + 1; k < end; k++) { 
                      if (X[k] == '(') { 
                          x = matchClosing(X, k, end, '(', ')'); 
                          if (!(k < x && x < end)) { 
                              return false; 
                          } 
                      } 
                      else if (X[k] == ')') { 
                          x = matchingOpening(X, start, k, '(', ')'); 
                          if (!(start < x && x < k)) { 
                              return false; 
                          } 
                      } 

                      if (X[k] == '{') { 
                          x = matchClosing(X, k, end, '{', '}'); 
                          if (!(k < x && x < end)) { 
                              return false; 
                          } 
                      } 

                      else if (X[k] == '}') { 
                          x = matchingOpening(X, start, k, '{', '}'); 
                          if (!(start < x && x < k)) { 
                              return false; 
                          } 
                      } 
                      if (X[k] == '[') { 
                          x = matchClosing(X, k, end, '[', ']'); 
                          if (!(k < x && x < end)) { 
                              return false; 
                          } 
                      } 
                      else if (X[k] == ']') { 
                          x = matchingOpening(X, start, k, '[', ']'); 
                          if (!(start < x && x < k)) { 
                              return false; 
                          } 
                      } 
                  } 
              } 

              return true; 
          } 
          Time Complexity: O(n3)
          Auxiliary Space: O(1)
          
          OR
          
          bool helperFunc(int& count, string& s, int& i, int& j, char tocom) 
          { 
              count--; 
              if (j > -1 && s[j] == tocom) { 
                  s[i] = '#'; 
                  s[j] = '#'; 
                  while (j >= 0 && s[j] == '#') 
                      j--; 
                  i++; 
                  return 1; 
              } 
              else
                  return 0; 
          } 

          // Function that returns true if s is a 
          // valid balanced bracket string 
          bool isValid(string s) 
          { 

              // Empty string is considered balanced 
              if (s.length() == 0) 
                  return true; 

              else { 
                  int i = 0; 

                  // Increments for opening bracket and 
                  // decrements for closing bracket 
                  int count = 0; 
                  int j = -1; 
                  bool result; 
                  while (i < s.length()) { 
                      switch (s[i]) { 
                      case '}': 
                          result = helperFunc(count, s, i, j, '{'); 
                          if (result == 0) { 
                              return false; 
                          } 
                          break; 

                      case ')': 
                          result = helperFunc(count, s, i, j, '('); 
                          if (result == 0) { 
                              return false; 
                          } 
                          break; 

                      case ']': 
                          result = helperFunc(count, s, i, j, '['); 
                          if (result == 0) { 
                              return false; 
                          } 
                          break; 

                      default: 
                          j = i; 
                          i++; 
                          count++; 
                      } 
                  } 

                  // count != 0 indicates unbalanced parentheses 
                  // this check is required to handle cases where 
                  // count of opening brackets > closing brackets 
                  if (count != 0) 
                      return false; 

                  return true; 
              } 
          } 

          // Driver code 
          int main() 
          { 
              string str = "[[]][]()"; 

              if (isValid(str)) 
                  cout << "Yes"; 
              else
                  cout << "No"; 

              return 0; 
          } 
          O(1) space | O(N^2) time complexity
