**The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate the 
span of stock’s price for all n days. The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive 
days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day.
For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are 
{1, 1, 1, 2, 1, 4, 6} **

      int main() 
      {
        int t ;
        cin >> t ;
        while(t--)
        {
            vector<int> v ;
            int n ;
            cin >> n ;
            int a[n];
            for(int i = 0 ; i < n ; i++)
            {
                cin >> a[i];
            }
            stack<int> st;
            int i = 0;
            while(i<n)
            {
                if(st.empty()||a[st.top()]>a[i])
                {
                    if(st.empty())
                    {
                        v.push_back(i+1);
                    }else v.push_back(i-st.top());
                    st.push(i);
                    i++;
                }else if(a[st.top()]<=a[i])
                {
                    st.pop();
                }
            }
            for(int i = 0 ; i < v.size() ; i++)
            cout<<v[i]<<" ";
            cout<<endl;
        }
        return 0;
      }
Time Complexity: O(n). 
Auxiliary Space: O(n) 

OR

      void calculateSpan(int A[], int n, int ans[]) 
{ 
    // Span value of first element is always 1 
    ans[0] = 1; 
  
    // Calculate span values for rest of the elements 
    for (int i = 1; i < n; i++) { 
        int counter = 1; 
        while ((i - counter) >= 0 && A[i] >= A[i - counter]) { 
            counter += ans[i - counter]; 
        } 
        ans[i] = counter; 
    } 
} 

