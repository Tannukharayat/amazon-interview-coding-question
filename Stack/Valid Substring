**Given a string S consisting only of opening and closing parenthesis 'ie '('  and ')', find out the length of the longest valid substring.
NOTE: Length of smallest the valid substring ( ) is 2. **

      A Simple Approach is to find all the substrings of given string. For every string, check if it is a valid string or not. If valid
      and length is more than maximum length so far, then update maximum length. We can check whether a substring is valid or not in 
      linear time using a stack (See this for details). Time complexity of this solution is O(n2.
      
      OR
      
      
     int findMaxLen(string str) 
{ 
    int n = str.length(); 
  
    // Create a stack and push -1 as initial index to it. 
    stack<int> stk; 
    stk.push(-1); 
  
    // Initialize result 
    int result = 0; 
  
    // Traverse all characters of given string 
    for (int i=0; i<n; i++) 
    { 
        // If opening bracket, push index of it 
        if (str[i] == '(') 
          stk.push(i); 
  
        else // If closing bracket, i.e.,str[i] = ')' 
        { 
            // Pop the previous opening bracket's index 
            stk.pop(); 
  
            // Check if this length formed with base of 
            // current valid substring is more than max  
            // so far 
            if (!stk.empty()) 
                result = max(result, i - stk.top()); 
  
            // If stack is empty. push current index as  
            // base for next valid substring (if any) 
            else stk.push(i); 
        } 
    } 
  
    return result; 
} 
  
// Driver program 
int main() 
{ 
    string str = "((()()"; 
    cout << findMaxLen(str) << endl; 
  
    str = "()(()))))"; 
    cout << findMaxLen(str) << endl ; 
  
    return 0; 
} 
OR


      int main() 
      {
        int n ;
        cin >> n ;
        while(n--)
        {
            string s;
            cin >> s;
            int ans =0, l = 0 , r =0;
            for(int i = 0 ; i < s.length() ; i++)
            {
                if(s[i]=='(')
                {
                    l++;
                }else r++;
               if(l==r)
               ans = max(ans,2*l);
                if(r>l)
                {
                    l=r=0;
                }
            }l=0,r=0;
            for(int i = s.length()-1 ; i >=0 ; i--)
            {
                if(s[i]==')')
                {
                    l++;
                }else r++;
               if(l==r)
               ans = max(ans,2*l);
                if(r>l)
                {
                    l=r=0;
                }
            }
            cout<<ans<<endl;
        }
        return 0;
      }
