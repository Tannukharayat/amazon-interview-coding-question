**Given an array that represents a tree in such a way that array indexes are values in tree nodes and array values give the parent node of that particular index (or node). The value of the root node index would always be -1 as there is no parent for root. Construct the standard linked representation of given Binary Tree from this given representation.

Examples:

Input: parent[] = {1, 5, 5, 2, 2, -1, 3}
Output: root of below tree
          5
        /  \
       1    2
      /    / \
     0    3   4
         /
        6 
Explanation: 
Index of -1 is 5.  So 5 is root.  
5 is present at indexes 1 and 2.  So 1 and 2 are
children of 5.  
1 is present at index 0, so 0 is child of 1.
2 is present at indexes 3 and 4.  So 3 and 4 are
children of 2.  
3 is present at index 6, so 6 is child of 3.

  
  void createNode(int parent[], int i, Node *created[], Node **root) 
    { 
        // If this node is already created 
        if (created[i] != NULL) 
            return; 

        // Create a new node and set created[i] 
        created[i] = newNode(i); 

        // If 'i' is root, change root pointer and return 
        if (parent[i] == -1) 
        { 
            *root = created[i]; 
            return; 
        } 

        // If parent is not created, then create parent first 
        if (created[parent[i]] == NULL) 
            createNode(parent, parent[i], created, root); 

        // Find parent pointer 
        Node *p = created[parent[i]]; 

        // If this is first child of parent 
        if (p->left == NULL) 
            p->left = created[i]; 
        else // If second child 
            p->right = created[i]; 
    } 
    Node *createTree(int parent[], int n) 
    { 
        // Create an array created[] to keep track 
        // of created nodes, initialize all entries 
        // as NULL 
        Node *created[n]; 
        for (int i=0; i<n; i++) 
            created[i] = NULL; 

        Node *root = NULL; 
        for (int i=0; i<n; i++) 
            createNode(parent, i, created, &root); 

        return root; 
    } 
    time complexity: O(N)

OR

          Node* createTree(int parent[], int n) 
          { 
              // A map to keep track of all the nodes created. 
              // Key: node value; Value: Pointer to that Node 
              map<int, Node*> m; 
              Node *root, *temp; 
              int i; 

              // Iterate for all elements of the parent array. 
              for (i = 0; i < n; i++)
              { 

                  // Node i does not exist in the map 
                  if (m.find(i) == m.end()) 
                  { 

                      // Create a new node for the current index 
                      temp = newNode(i); 

                      // Entry of the node in the map with 
                      // key as i and value as temp 
                      m[i] = temp; 
                  } 

                  // If parent is -1 
                  // Current node i is the root 
                  // So mark it as the root of the tree 
                  if (parent[i] == -1) 
                      root = m[i]; 

                  // Current node is not root and parent 
                  // of that node is not created yet 
                  else if (m.find(parent[i]) == m.end()) 
                  { 

                      // Create the parent 
                      temp = newNode(parent[i]); 

                      // Assign the node as the 
                      // left child of the parent 
                      temp->left = m[i]; 

                      // Entry of parent in map 
                      m[parent[i]] = temp; 
                  } 

                  // Current node is not root and parent 
                  // of that node is already created 
                  else 
                  { 

                      // Left child of the parent doesn't exist 
                      if (!m[parent[i]]->left) 
                          m[parent[i]]->left = m[i]; 

                      // Right child of the parent doesn't exist 
                      else
                          m[parent[i]]->right = m[i]; 
                  } 
              } 
              return root; 
          } 
