**Given a Binary Tree, print Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The 
task is to complete the function leftView(), which accepts root of the tree as argument.
Left view of following tree is 1 2 4 8.

          1
       /     \
     2        3
   /     \    /    \
  4     5   6    7
   \
     8   
     
           void funct(struct Node *rt,  map<int,int> &mp, int l )
          {
              if(rt==NULL)
              return;
              //cout<<mp[l]<<" "<<l<<" "<<rt->data<<endl;
              if(mp[l]==0)
              {
                  cout<<rt->data<<" ";
                  mp[l]=1;
              }
             l++;
              funct(rt->left,mp, l);
              funct(rt->right,mp,l);
          }
          void leftView(struct Node *root)
          {
             map<int,int> mp;
             int l = 0;
             funct(root,mp,l);
             return ;
          }
OR
          void leftViewUtil(node* root, int level, int* max_level) 
          { 
              // Base Case 
              if (root == NULL) 
                  return; 

              // If this is the first node of its level 
              if (*max_level < level) 
              { 
                  cout << root->data << "\t"; 
                  *max_level = level; 
              } 

              // Recur for left and right subtrees 
              leftViewUtil(root->left, level + 1, max_level); 
              leftViewUtil(root->right, level + 1, max_level); 
          } 

          // A wrapper over leftViewUtil() 
          void leftView(node* root) 
          { 
              int max_level = 0; 
              leftViewUtil(root, 1, &max_level); 
          } 
          Time Complexity: The function does a simple traversal of the tree, so the complexity is O(n).
          Auxiliary Space: O(n), due to the stack space during recursive call.
  OR
  
          
          
