**Given a Binary Tree, find vertical sum of the nodes that are in same vertical line. Print all sums through different vertical lines**

  void printVertical(Node *root) 
  {
     queue<pair<Node*, int> > q;
     q.push({root,100});
     int mn=1000, mx=0;
     int v[1000];
     memset(v, 0 , sizeof(v));
     while(!q.empty())
     {
          queue<pair<Node*, int> > q1;
          while(!q.empty())
          {
              pair<Node*, int> p;
              p=q.front();
              mn=min(mn,p.second);
              mx=max(mx,p.second);
              q.pop();
              v[p.second]+=p.first->data;
              if(p.first->left!=NULL)
              {
                  q1.push({p.first->left,p.second-1});
              }
              if(p.first->right!=NULL)
              {
                  q1.push({p.first->right, p.second+1});
              }
          }
          q=q1;
     }
     for(int j=mn;j<=mx;j++)
     {
         cout<<v[j]<<" ";
     }

  }

OR (USE OF DOUBLY LINKED LIST)

    struct TNode{ 
    int key; 
    struct TNode *left, *right; 
    }; 

    /// Function to create new tree node 
    TNode* newTNode(int key) 
    { 
        TNode* temp = new TNode; 
        temp->key = key; 
        temp->left = temp->right = NULL; 
        return temp; 
    } 

    /// Doubly linked list structure 
    struct LLNode{ 
        int key; 
        struct LLNode *prev, *next; 
    }; 

    /// Function to create new Linked List Node 
    LLNode* newLLNode(int key) 
    { 
        LLNode* temp = new LLNode; 
        temp->key = key; 
        temp->prev = temp->next = NULL; 
        return temp; 
    } 

    /// Function that creates Linked list and store 
    /// vertical sum in it. 
    void verticalSumDLLUtil(TNode *root, LLNode *sumNode) 
    { 
        /// Update sum of current line by adding value 
        /// of current tree node. 
        sumNode->key = sumNode->key + root->key; 

        /// Recursive call to left subtree. 
        if(root->left) 
        { 
            if(sumNode->prev == NULL) 
            { 
                sumNode->prev = newLLNode(0); 
                sumNode->prev->next = sumNode; 
            } 
            verticalSumDLLUtil(root->left, sumNode->prev); 
        } 

        /// Recursive call to right subtree. 
        if(root->right) 
        { 
            if(sumNode->next == NULL) 
            { 
                sumNode->next = newLLNode(0); 
                sumNode->next->prev = sumNode; 
            } 
            verticalSumDLLUtil(root->right, sumNode->next); 
        } 
    } 

    /// Function to print vertical sum of Tree. 
    /// It uses verticalSumDLLUtil() to calculate sum. 
    void verticalSumDLL(TNode* root) 
    { 
        /// Create Linked list node for 
        /// line passing through root. 
        LLNode* sumNode = newLLNode(0); 

        /// Compute vertical sum of different lines. 
        verticalSumDLLUtil(root, sumNode); 

        /// Make doubly linked list pointer point 
        /// to first node in list. 
        while(sumNode->prev != NULL){ 
            sumNode = sumNode->prev; 
        } 

        /// Print vertical sum of different lines 
        /// of binary tree. 
        while(sumNode != NULL){ 
            cout << sumNode->key <<" "; 
            sumNode = sumNode->next; 
        } 
    } 
