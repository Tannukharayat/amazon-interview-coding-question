Given a binary tree, a complete path is defined as a path from root to a leaf. The sum of all nodes on that path is defined as 
the sum of that path. Given a number K, you have to remove (prune the tree) all nodes which donâ€™t lie in any path with sum>=k.


  struct Node *pruneUtil(struct Node *root, int k, int *sum) 
{ 
    // Base Case 
    if (root == NULL)  return NULL; 
  
    // Initialize left and right sums as sum from root to 
    // this node (including this node) 
    int lsum = *sum + (root->data); 
    int rsum = lsum; 
  
    // Recursively prune left and right subtrees 
    root->left = pruneUtil(root->left, k, &lsum); 
    root->right = pruneUtil(root->right, k, &rsum); 
  
    // Get the maximum of left and right sums 
    *sum = max(lsum, rsum); 
  
    // If maximum is smaller than k, then this node 
    // must be deleted 
    if (*sum < k) 
    { 
        free(root); 
        root = NULL; 
    } 
  
    return root; 
} 
  
// A wrapper over pruneUtil() 
struct Node *prune(struct Node *root, int k) 
{ 
    int sum = 0; 
    return pruneUtil(root, k, &sum); 
} 

Time Complexity: O(n), the solution does a single traversal of given Binary Tree

OR

struct Node *prune(struct Node *root, int sum) 
{ 
    // Base Case 
    if (root == NULL) return NULL; 
  
    // Recur for left and right subtrees 
    root->left = prune(root->left, sum - root->data); 
    root->right = prune(root->right, sum - root->data); 
  
    // If we reach leaf whose data is smaller than sum, 
    // we delete the leaf. An important thing to note 
    // is a non-leaf node can become leaf when its 
    // chilren are deleted. 
    if (root->left==NULL && root->right==NULL) 
    { 
        if (root->data < sum) 
        { 
            free(root); 
            return NULL; 
        } 
    } 
  
    return root; 
} 


