Serialization is to store tree in a file so that it can be later restored. The structure of tree must be maintained. 
Deserialization is reading tree back from file.

**A simple solution is to store both Inorder and Preorder traversals. This solution requires requires space twice the size of
Binary Tree. We can save space by storing Preorder traversal and a marker for NULL pointers.**

  void serialize(Node *root, FILE *fp) 
      { 
          // If current node is NULL, store marker 
          if (root == NULL) 
          { 
              fprintf(fp, "%d ", MARKER); 
              return; 
          } 

          // Else, store current node and recur for its children 
          fprintf(fp, "%d ", root->key); 
          serialize(root->left, fp); 
          serialize(root->right, fp); 
      } 

      // This function constructs a tree from a file pointed by 'fp' 
      void deSerialize(Node *&root, FILE *fp) 
      { 
          // Read next item from file. If theere are no more items or next 
          // item is marker, then return 
          int val; 
          if ( !fscanf(fp, "%d ", &val) || val == MARKER) 
                   return; 

          // Else create node with this item and recur for children 
          root = newNode(val); 
          deSerialize(root->left, fp); 
          deSerialize(root->right, fp); 
      } 
      or 
      
      void serialize(Node *root,vector<int> &A) 
{ 
	if ( !root ) 
	{
		 A.push_back ( INT_MAX ) ; 
		return ; 
	}
	 A.push_back ( root -> data ) ; 
	serialize(root-> left ,A) ; 
	serialize(root-> right ,A) ; 
} 
Node * DeSerialize(vector<int> &A , int &i ) 
{
	 //cout << i << "*" ; 
	if ( i > A.size() or A[ i ] == INT_MAX ) 
	{
	 	i++ ; 
		return NULL ; 
	}
	 Node * temp = new Node ( A [ i ] ) ; 
	i++ ; 
	temp -> left = DeSerialize( A , i ) ;
	 temp -> right = DeSerialize( A , i ) ;
	 return temp ; 
} /*this function deserializes the serialized vector A*/ 
Node * deSerialize(vector<int> &A) 
{ int i = 0 ; // for ( int i = 0 ; i < A.size() ; i ++ ) // cout << A [ i ] << " " ; //cout << endl ; return DeSerialize( A , i ) ; }
      
      ****for n-ary tree****
      void serialize(Node *root, FILE *fp) 
      { 
          // Base case 
          if (root == NULL) return; 

          // Else, store current node and recur for its children 
          fprintf(fp, "%c ", root->key); 
          for (int i = 0; i < N && root->child[i]; i++) 
               serialize(root->child[i],  fp); 

          // Store marker at the end of children 
          fprintf(fp, "%c ", MARKER); 
      } 

      // This function constructs N-ary tree from a file pointed by 'fp'. 
      // This functionr returns 0 to indicate that the next item is a valid 
      // tree key. Else returns 0 
      int deSerialize(Node *&root, FILE *fp) 
      { 
          // Read next item from file. If theere are no more items or next 
          // item is marker, then return 1 to indicate same 
          char val; 
          if ( !fscanf(fp, "%c ", &val) || val == MARKER ) 
             return 1; 

          // Else create node with this item and recur for children 
          root = newNode(val); 
          for (int i = 0; i < N; i++) 
            if (deSerialize(root->child[i], fp)) 
               break; 

          // Finally return 0 for successful finish 
          return 0; 
      } 
