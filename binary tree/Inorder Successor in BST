**Given a BST,  and a reference to a Node x the task is to find the Inorder Successor of the node .**

      void funct(Node *root, Node *&x , int &ans )
      {
          if(root==NULL)
          return ;
          funct(root->left, x, ans);
           if(ans == 1)
          {
              x=root;
              ans = 2;
              return ;
          }
          if(root==x)
          {
              ans = 1;
          }

          if(ans == 2)
          return;
          funct(root->right, x, ans);
      }
      Node * inOrderSuccessor(Node *root, Node *x)
      {
         int ans = 0 ;
         Node* y = x;
         funct(root,x,ans);
         if(x==y)

         return NULL;
         return x;
      }
            
      OR
      
      Input: node, root // node is the node whose Inorder successor is needed.
output: succ // succ is Inorder successor of node.
1) If right subtree of node is not NULL, then succ lies in right subtree. Do following.
Go to right subtree and return the node with minimum key value in right subtree.
2) If right sbtree of node is NULL, then succ is one of the ancestors. Do following.
Travel up using the parent pointer until you see a node which is left child of it’s parent. The parent of such a node is the succ.
  
struct node * inOrderSuccessor(struct node *root, struct node *n) 
{ 
  // step 1 of the above algorithm  
  if( n->right != NULL ) 
    return minValue(n->right); 
  
  // step 2 of the above algorithm 
  struct node *p = n->parent; 
  while(p != NULL && n == p->right) 
  { 
     n = p; 
     p = p->parent; 
  } 
  return p; 
} 








Method 2 (Search from root)
1) If right subtree of node is not NULL, then succ lies in right subtree. Do following.
Go to right subtree and return the node with minimum key value in right subtree.
2) If right sbtree of node is NULL, then start from root and us search like technique. Do following.
Travel down the tree, if a node’s data is greater than root’s data then go right side, otherwise go to left side.

struct node * inOrderSuccessor(struct node *root, struct node *n) 
{ 
    // step 1 of the above algorithm 
    if( n->right != NULL ) 
        return minValue(n->right); 
  
    struct node *succ = NULL; 
  
    // Start from root and search for successor down the tree 
    while (root != NULL) 
    { 
        if (n->data < root->data) 
        { 
            succ = root; 
            root = root->left; 
        } 
        else if (n->data > root->data) 
            root = root->right; 
        else
           break; 
    } 
  
    return succ; 
} 





