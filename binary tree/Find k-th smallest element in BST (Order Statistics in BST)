Method 1: Using Inorder Traversal (O(n) time and O(h) auxiliary space)

Node* kthSmallest(Node* root, int& count, int k) 
{ 
    // base case 
    if (root == NULL) 
        return NULL; 
  
    // search in left subtree 
    Node* left = kthSmallest(root->left, count, k); 
  
    // if k'th smallest is found in left subtree, return it 
    if (left != NULL) 
        return left; 
  
    // if current element is k'th smallest, return it 
    count++; 
    if (count == k) 
        return root; 
  
    // else search in right subtree 
    return kthSmallest(root->right, count, k); 
} 
  
// Function to find k'th largest element in BST 
void printKthSmallest(Node* root, int k) 
{ 
    // maintain index to count number of nodes processed so far 
    int count = 0; 
    Node* res = kthSmallest(root, count, k); 
    if (res == NULL) 
        cout << "There are less than k nodes in the BST"; 
    else
        cout << "K-th Smallest Element is " << res->data; 
} 


Method 2: Augmented  Tree Data Structure (O(h) Time Complexity and O(h) auxiliary space)

struct Node { 
    int data; 
    Node *left, *right; 
    int lCount; 
    Node(int x) 
    { 
        data = x; 
        left = right = NULL; 
        lCount = 0; 
    } 
}; 
  
// Recursive function to insert an key into BST 
Node* insert(Node* root, int x) 
{ 
    if (root == NULL) 
        return new Node(x); 
  
    // If a node is inserted in left subtree, then 
    // lCount of this node is increased. For simplicity, 
    // we are assuming that all keys (tried to be 
    // inserted) are distinct.  
    if (x < root->data) { 
        root->left = insert(root->left, x); 
        root->lCount++; 
    } 
  
    else if (x > root->data) 
        root->right = insert(root->right, x); 
    return root; 
} 
  
// Function to find k'th largest element in BST 
// Here count denotes the number of nodes processed so far 
Node* kthSmallest(Node* root, int k) 
{ 
    // base case 
    if (root == NULL) 
        return NULL; 
  
    int count = root->lCount + 1; 
    if (count == k) 
        return root; 
  
    if (count > k) 
        return kthSmallest(root->left, k); 
  
    // else search in right subtree 
    return kthSmallest(root->right, k - count); 
} 
  

Time complexity: O(h) where h is height of tree
