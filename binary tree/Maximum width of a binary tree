int getMaxWidth(node* root)  
{  
    int maxWidth = 0;  
    int width;  
    int h = height(root);  
    int i;  
          
    /* Get width of each level and compare  
        the width with maximum width so far */
    for(i = 1; i <= h; i++)  
    {  
        width = getWidth(root, i);  
        if(width > maxWidth)  
        maxWidth = width;  
    }  
          
    return maxWidth;  
}  
  
/* Get width of a given level */
int getWidth(node* root, int level)  
{  
      
    if(root == NULL)  
        return 0;  
          
    if(level == 1)  
        return 1;  
                  
    else if (level > 1)  
        return getWidth(root->left, level - 1) +  
                getWidth(root->right, level - 1);  
}  
  
  
/* UTILITY FUNCTIONS */
/* Compute the "height" of a tree -- the number of  
    nodes along the longest path from the root node  
    down to the farthest leaf node.*/
int height(node* node)  
{  
    if (node == NULL)  
        return 0;  
    else
    {  
        /* compute the height of each subtree */
        int lHeight = height(node->left);  
        int rHeight = height(node->right);  
        /* use the larger one */
          
        return (lHeight > rHeight)? (lHeight + 1): (rHeight + 1);  
    }  
}  
  
/* Helper function that allocates a new node with the  
given data and NULL left and right pointers. */
node* newNode(int data)  
{  
    node* Node = new node(); 
    Node->data = data;  
    Node->left = NULL;  
    Node->right = NULL;  
    return(Node);  
}  
  
/* Driver code*/
int main()  
{  
    node *root = newNode(1);  
    root->left = newNode(2);  
    root->right = newNode(3);  
    root->left->left = newNode(4);  
    root->left->right = newNode(5);  
    root->right->right = newNode(8);  
    root->right->right->left = newNode(6);  
    root->right->right->right = newNode(7);      
      
    /*  
    Constructed bunary tree is:  
            1  
            / \  
        2 3  
        / \ \  
        4 5 8  
                / \  
                6 7  
    */
    cout<<"Maximum width is "<< getMaxWidth(root)<<endl;  
    return 0;  
}  
  
 Time Complexity: O(n^2) in the worst case.
 
 OR
 
 int maxWidth(struct Node * root) 
{ 
    // Base case 
    if (root == NULL) 
        return 0; 
  
    // Initialize result 
    int result = 0; 
  
    // Do Level order traversal keeping track of number 
    // of nodes at every level. 
    queue<Node*> q; 
    q.push(root); 
    while (!q.empty()) 
    { 
        // Get the size of queue when the level order 
        // traversal for one level finishes 
        int count = q.size() ; 
  
        // Update the maximum node count value 
        result = max(count, result); 
  
        // Iterate for all the nodes in the queue currently 
        while (count--) 
        { 
            // Dequeue an node from queue 
            Node *temp = q.front(); 
            q.pop(); 
  
            // Enqueue left and right children of 
            // dequeued node 
            if (temp->left != NULL) 
                q.push(temp->left); 
            if (temp->right != NULL) 
                q.push(temp->right); 
        } 
    } 
  
    return result; 
} 
  
/* Helper function that allocates a new node with the 
   given data and NULL left and right pointers. */
struct Node * newNode(int data) 
{ 
    struct Node * node = new Node; 
    node->data = data; 
    node->left = node->right = NULL; 
    return (node); 
} 
  
int main() 
{ 
    struct Node *root = newNode(1); 
    root->left        = newNode(2); 
    root->right       = newNode(3); 
    root->left->left  = newNode(4); 
    root->left->right = newNode(5); 
    root->right->right = newNode(8); 
    root->right->right->left  = newNode(6); 
    root->right->right->right  = newNode(7); 
  
    /*   Constructed Binary tree is: 
                 1 
               /   \ 
             2      3 
           /  \      \ 
          4    5      8 
                    /   \ 
                   6     7    */
    cout << "Maximum width is "
         << maxWidth(root) << endl; 
    return 0; 
} 
  
  OR
  
int getMaxWidth(node* root)  
{  
    int width;  
    int h = height(root);  
  
    // Create an array that will  
    // store count of nodes at each level  
    int *count = new int[h]; 
  
    int level = 0;  
  
    // Fill the count array using preorder traversal  
    getMaxWidthRecur(root, count, level);  
  
    // Return the maximum value from count array  
    return getMax(count, h);  
}  
  
// A function that fills count array 
// with count of nodes at every  
// level of given binary tree  
void getMaxWidthRecur(node *root, int count[], int level)  
{  
    if(root)  
    {  
        count[level]++;  
        getMaxWidthRecur(root->left, count, level + 1);  
        getMaxWidthRecur(root->right, count, level + 1);  
    }  
}  
  
  
/* UTILITY FUNCTIONS */
/* Compute the "height" of a tree -- the number of  
    nodes along the longest path from the root node  
    down to the farthest leaf node.*/
int height(node* node)  
{  
    if (node==NULL)  
        return 0;  
    else
    {  
        /* compute the height of each subtree */
        int lHeight = height(node->left);  
        int rHeight = height(node->right);  
        /* use the larger one */
  
        return (lHeight > rHeight)? (lHeight+1): (rHeight+1);  
    }  
}  
  
/* Helper function that allocates a new node with the  
given data and NULL left and right pointers. */
node* newNode(int data)  
{  
    node* Node = new node(); 
    Node->data = data;  
    Node->left = NULL;  
    Node->right = NULL;  
    return(Node);  
}  
  
// Return the maximum value from count array  
int getMax(int arr[], int n)  
{  
    int max = arr[0];  
    int i;  
    for (i = 0; i < n; i++)  
    {  
        if (arr[i] > max)  
            max = arr[i];  
    }  
    return max;  
}  
  
/* Driver code*/
int main()  
{  
    node *root = newNode(1);  
    root->left = newNode(2);  
    root->right = newNode(3);  
    root->left->left = newNode(4);  
    root->left->right = newNode(5);  
    root->right->right = newNode(8);  
    root->right->right->left = newNode(6);  
    root->right->right->right = newNode(7);  
  
    /*  
    Constructed bunary tree is:  
            1  
            / \  
            2 3  
            / \ \  
            4 5 8  
            / \  
            6 7  
    */
    cout << "Maximum width is " << getMaxWidth(root) << endl;  
    return 0;  
}  
Time Complexity: O(n)
