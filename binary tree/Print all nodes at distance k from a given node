

      void printkdistanceNodeDown(node *root, int k) 
      { 
          // Base Case 
          if (root == NULL || k < 0)  return; 

          // If we reach a k distant node, print it 
          if (k==0) 
          { 
              cout << root->data << endl; 
              return; 
          } 

          // Recur for left and right subtrees 
          printkdistanceNodeDown(root->left, k-1); 
          printkdistanceNodeDown(root->right, k-1); 
      } 

      // Prints all nodes at distance k from a given target node. 
      // The k distant nodes may be upward or downward.  This function 
      // Returns distance of root from target node, it returns -1 if target 
      // node is not present in tree rooted with root. 
      int printkdistanceNode(node* root, node* target , int k) 
      { 
          // Base Case 1: If tree is empty, return -1 
          if (root == NULL) return -1; 

          // If target is same as root.  Use the downward function 
          // to print all nodes at distance k in subtree rooted with 
          // target or root 
          if (root == target) 
          { 
              printkdistanceNodeDown(root, k); 
              return 0; 
          } 

      // Recur for left subtree 
          int dl = printkdistanceNode(root->left, target, k); 

          // Check if target node was found in left subtree 
          if (dl != -1) 
          { 
               // If root is at distance k from target, print root 
               // Note that dl is Distance of root's left child from target 
               if (dl + 1 == k) 
                  cout << root->data << endl; 

               // Else go to right subtree and print all k-dl-2 distant nodes 
               // Note that the right child is 2 edges away from left child 
               else
                  printkdistanceNodeDown(root->right, k-dl-2); 

               // Add 1 to the distance and return value for parent calls 
               return 1 + dl; 
          } 

          // MIRROR OF ABOVE CODE FOR RIGHT SUBTREE 
          // Note that we reach here only when node was not found in left subtree 
          int dr = printkdistanceNode(root->right, target, k); 
          if (dr != -1) 
          { 
               if (dr + 1 == k) 
                  cout << root->data << endl; 
               else
                  printkdistanceNodeDown(root->left, k-dr-2); 
               return 1 + dr; 
          } 

          // If target was neither present in left nor in right subtree 
          return -1; 
      } 
      Time Complexity: At first look the time complexity looks more than O(n), but if we take a closer look, we can observe that no node is traversed more than twice. Therefore the time complexity is O(n).

      OR
      
      class Node { 
    int data; 
    Node left, right; 
  
    Node(int item) 
    { 
        data = item; 
        left = right = null; 
    } 
} 
  
class BinaryTree { 
    Node root; 
  
    /* Given a binary tree and a nuber k, print all nodes that are k  
    distant from a leaf*/
    int printKDistantfromLeaf(Node node, int k) 
    { 
        if (node == null) 
            return -1; 
        int lk = printKDistantfromLeaf(node.left, k); 
        int rk = printKDistantfromLeaf(node.right, k); 
        boolean isLeaf = lk == -1 && lk == rk; 
        if (lk == 0 || rk == 0 || (isLeaf && k == 0)) 
            System.out.print(" " + node.data); 
        if (isLeaf && k > 0) 
            return k - 1; // leaf node 
        if (lk > 0 && lk < k) 
            return lk - 1; // parent of left leaf 
        if (rk > 0 && rk < k) 
            return rk - 1; // parent of right leaf 
  
        return -2; 
    } 
  
    // Driver program to test the above functions 
    public static void main(String args[]) 
    { 
        BinaryTree tree = new BinaryTree(); 
  
        /* Let us construct the tree shown in above diagram */
        tree.root = new Node(1); 
        tree.root.left = new Node(2); 
        tree.root.right = new Node(3); 
        tree.root.left.left = new Node(4); 
        tree.root.left.right = new Node(5); 
        tree.root.right.left = new Node(6); 
        tree.root.right.right = new Node(7); 
        tree.root.right.left.right = new Node(8); 
  
        System.out.println(" Nodes at distance 2 are :"); 
        tree.printKDistantfromLeaf(tree.root, 2); 
    } 
}

Time Complexity: At first look the time complexity looks more than O(n), but if we take a closer look, we can observe that no node is traversed more than twice. Therefore the time complexity is O(n).
