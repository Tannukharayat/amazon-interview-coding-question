**Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14
For the above tree the output should be 5 10 4 14 25**


      void bottomView(Node *root)
      {
          queue<pair<Node*,int> > q;
          q.push({root,200});
          int v[1000];
          int k = 0 ;
          int mx = 0 , mn = 10000 ;
          while(!q.empty())
          {
              queue<pair<Node*,int> >q1;
              while(!q.empty())
              {
                  pair<Node*,int> p;
                  p=q.front();
                  q.pop();
                  mn=min(mn,p.second);
                  mx=max(mx,p.second);
                  v[p.second]=p.first->data;
                  if(p.first->left!=NULL)
                  q1.push({p.first->left,p.second-1});
                  if(p.first->right!=NULL)
                  q1.push({p.first->right,p.second+1});
              }q=q1;
          }
          for(int i = mn ; i <= mx ; i++)
          {
              cout<<v[i]<<" ";
          }
      }


  OR
  
    int l = 0, r = 0; 
int N; 
  
// Function to generate 
// bottom view of 
// binary tree 
void Bottom(Node* root, int arr[], int arr2[], int x, int p, int mid) //level right of left and p up down level
{ 
    // Base case 
    if (root == NULL) { 
        return; 
    } 
  
    if (x < l) { 
        // To store leftmost 
        // value of x in l 
        l = x; 
    } 
  
    // To store rightmost 
    // value of x in r 
    if (x > r) { 
        r = x; 
    } 
  
    // To check if arr 
    // is empty at mid+x 
    if (arr[mid + x] == INT_MIN) { 
        // Insert data of Node 
        // at arr[mid+x] 
        arr[mid + x] = root->data; 
        // Insert priority of 
        // that Node at arr2[mid+x] 
        arr2[mid + x] = p; 
    } 
  
    // If not empty and priotiy 
    // of previously inserted 
    // Node is less than current*/ 
    else if (arr2[mid + x] < p) { 
        // Insert current 
        // Node data at arr[mid+x] 
        arr[mid + x] = root->data; 
  
        // Insert priotiy of 
        // that Node at arr2[mid +x] 
        arr2[mid + x] = p; 
    } 
  
    // Go right first 
    // then left 
    Bottom(root->right, arr, arr2, x + 1, p + 1, mid); 
    Bottom(root->left, arr, arr2, x - 1, p + 1, mid); 
} 
  
// Utility function 
// to generate bottom 
// view of a biany tree 
void bottomView(struct Node* root) 
{ 
    int arr[2 * N + 1]; 
    int arr2[2 * N + 1]; 
  
    for (int i = 0; i < 2 * N + 1; i++) { 
        arr[i] = INT_MIN; 
        arr2[i] = INT_MIN; 
    } 
  
    int mid = N, x = 0, p = 0; 
  
    Bottom(root, arr, arr2, x, p, mid); 
  
    for (int i = mid + l; i <= mid + r; i++) { 
        cout << arr[i] << " "; 
    } 
} 
