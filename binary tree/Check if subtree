**Given two binary trees with head reference as T and S having at most N nodes. The task is to check if S is present as subtree in T.
A subtree of a tree T1 is a tree T2 consisting of a node in T1 and all of its descendants in T1.**

METHOD:1
Node* find_head(Node* T,int x)
{  
    //if(T!=NULL)
    //ut<<T->data<<" ";
    if(T==NULL)
    return NULL;
     if(x==T->data)
    {
       /// cout<<"*"<<x<<"*"<<T->data;
        return T;
    }
    if(T!=NULL)
    {
        find_head(T->left,x);
        find_head(T->right,x);
    }
}
int check_sub(Node* T1, Node *T2)
{
    if(T1==NULL&&T2==NULL)
    return 1;
    if(T1==NULL||T2==NULL)
    return 0;
    if(T1->data==T2->data&&check_sub(T1->left,T2->left)&&check_sub(T1->right,T2->right))
    {
        return 1;
    }
    return 0;
}
bool isSubtree(Node* T1, Node* T2) 
{
   T1=find_head(T1,T2->data);
   //cout<<T1->data<<" ";
   if(T1==NULL)
   {
       //cout<<" *** ";
       return 0;
   }else 
   {
       int y=check_sub(T1,T2);
       return y;
   }
}
or

  bool isSubTree(Node* T, Node* S) 
  {
      if(T==NULL&&S==NULL)
      return 1;
      if(T==NULL||S==NULL)
      return 0;
    if(T->data==S->data&&isSubTree(T->left,S->left)&&isSubTree(T->right,S->right))
          {
              return 1;
          }
      return isSubTree(T->left,S)||isSubTree(T->right,S);
      return 0;
  }
  
  METHOD:2
  
  bool areIdentical(node * root1, node *root2)  
{  
    if (root1 == NULL && root2 == NULL)  
        return true;  
  
    if (root1 == NULL || root2 == NULL)  
        return false;  
        
    return (root1->data == root2->data &&  
            areIdentical(root1->left, root2->left) &&  
            areIdentical(root1->right, root2->right) );  
}  
bool isSubtree(node *T, node *S)  
{  
    if (S == NULL)  
        return true;  
  
    if (T == NULL)  
        return false;  
  
    if (areIdentical(T, S))  
        return true;  
        
    return isSubtree(T->left, S) ||  isSubtree(T->right, S);  
}  
 Method 3 :
 void storeInorder(Node* root, char arr[], int& i) 
{ 
    if (root == NULL) { 
        arr[i++] = '$'; 
        return; 
    } 
    storeInorder(root->left, arr, i); 
    arr[i++] = root->key; 
    storeInorder(root->right, arr, i); 
} 
  
// A utility function to store preorder traversal of tree rooted 
// with root in an array arr[]. Note that i is passed as reference 
void storePreOrder(Node* root, char arr[], int& i) 
{ 
    if (root == NULL) { 
        arr[i++] = '$'; 
        return; 
    } 
    arr[i++] = root->key; 
    storePreOrder(root->left, arr, i); 
    storePreOrder(root->right, arr, i); 
} 
  
bool isSubtree(Node* T, Node* S) 
{ 
    /* base cases */
    if (S == NULL) 
        return true; 
    if (T == NULL) 
        return false; 
  
    // Store Inorder traversals of T and S in inT[0..m-1] 
    // and inS[0..n-1] respectively 
    int m = 0, n = 0; 
    char inT[MAX], inS[MAX]; 
    storeInorder(T, inT, m); 
    storeInorder(S, inS, n); 
    inT[m] = '\0', inS[n] = '\0'; 
  
    // If inS[] is not a substring of preS[], return false 
    if (strstr(inT, inS) == NULL) 
        return false; 
  
    // Store Preorder traversals of T and S in inT[0..m-1] 
    // and inS[0..n-1] respectively 
    m = 0, n = 0; 
    char preT[MAX], preS[MAX]; 
    storePreOrder(T, preT, m); 
    storePreOrder(S, preS, n); 
    preT[m] = '\0', preS[n] = '\0'; 
  
    // If inS[] is not a substring of preS[], return false 
    // Else return true 
    return (strstr(preT, preS) != NULL); 
} 
