**Given 2 Arrays of Inorder and preorder traversal. Construct a tree and print the Postorder traversal**

      Node *build(int in[] , int pre[] , int inStrt , int inEnd, int mp[])
      {
          if(inStrt>inEnd)
          {
              return NULL;
          }
         int curr=pre[preIndex++];
          Node *np=new Node(curr);
           if(inStrt==inEnd)
          return np;
          curr=mp[curr];

          np->left=build(in,pre,inStrt, curr-1,mp);
          np->right=build(in,pre,curr+1,inEnd,mp);

          return np;

      }
      Node* buildTree(int in[],int pre[], int inStrt, int inEnd)
      {
        int mp[10000]={0};
          for(int i = inStrt ; i <= inEnd ; i++)
          {
              mp[in[i]]=i;
          }

          return build(in, pre, inStrt, inEnd,mp);
      }
      Time Complexity: O(n^2). 

      OR
      
      struct Node* buildTree(char in[], char pre[], int inStrt, 
       
       
       int inEnd, unordered_map<char, int>& mp) 
      { 
          static int preIndex = 0; 

          if (inStrt > inEnd) 
              return NULL; 

          /* Pick current node from Preorder traversal using preIndex  
          and increment preIndex */
          char curr = pre[preIndex++]; 
          struct Node* tNode = newNode(curr); 

          /* If this node has no children then return */
          if (inStrt == inEnd) 
              return tNode; 

          /* Else find the index of this node in Inorder traversal */
          int inIndex = mp[curr]; 

          /* Using index in Inorder traversal, construct left and  
          right subtress */
          tNode->left = buildTree(in, pre, inStrt, inIndex - 1, mp); 
          tNode->right = buildTree(in, pre, inIndex + 1, inEnd, mp); 

          return tNode; 
      } 
Time Complexity : O(n)
