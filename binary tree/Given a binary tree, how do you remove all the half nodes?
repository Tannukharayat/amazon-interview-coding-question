Given A binary Tree, how do you remove all the half nodes (which has only one child)? Note leaves should not be touched as they 
have both children as NULL.

  struct node* RemoveHalfNodes(struct node* root) 
{ 
    if (root==NULL) 
        return NULL; 
  
    root->left  = RemoveHalfNodes(root->left); 
    root->right = RemoveHalfNodes(root->right); 
  
    if (root->left==NULL && root->right==NULL) 
        return root; 
  
    /* if current nodes is a half node with left 
       child NULL left, then it's right child is 
       returned and replaces it in the given tree */
    if (root->left==NULL) 
    { 
        struct node *new_root = root->right; 
        free(root); // To avoid memory leak 
        return new_root; 
    } 
  
  
    /* if current nodes is a half node with right 
       child NULL right, then it's right child is 
       returned and replaces it in the given tree  */
    if (root->right==NULL) 
    { 
        struct node *new_root = root->left; 
        free(root); // To avoid memory leak 
        return new_root; 
    } 
  
    return root; 
}
Time complexity of the above solution is O(n) as it does a simple traversal of binary tree.
